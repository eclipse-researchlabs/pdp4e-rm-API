[
  {
    "Id": "CWE-521",
    "Title": " Weak Password Requirements",
    "Description": "The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts. ",
    "ExtendedDescription": "Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "A product's design should require adherance to an appropriate password policy",
        "Description": "A product's design should require adherance to an appropriate password policy. Specific password requirements depend strongly on contextual factors, but it is recommended to contain the following attributes: \r\n  Enforcement of a minimum and maximum length  Restrictions against password reuse  Restrictions against using common passwords  Restrictions against using contextual string in the password (e.g., user id, app name)   Depending on the threat model, the password policy may include several additional attributes.   Complex passwords requiring mixed character sets (alpha, numeric, special, mixed case)  Increasing the range of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication.  Unfortunately, a complex password may be difficult to memorize, encouraging a user to select a short password or to incorrectly manage the password (write it down).  Another disadvantage of this approach is that it often does not result in a significant increases in overal password complexity due to people's predictable usage of various symbols.    Large Minimum Length (encouraging passphrases instead of passwords)  Increasing the number of characters makes the password harder to crack and may be appropriate for systems relying on single factor authentication.  A disadvantage of this approach is that selecting a good passphrase is not easy and poor passwords can still be generated. Some prompting may be needed to encourage long un-predictable passwords.    Randomly Chosen Secrets  Generating a password for the user can help make sure that length and complexity requirements are met, and can result in secure passwords being used.  A disadvantage of this approach is that the resulting password or passpharse may be too difficult to memorize, encouraging them to be written down.    Password Expiration  Requiring a periodic password change can reduce the time window that an adversary has to crack a password, while also limiting the damage caused by password exposures at other locations.  Password expiration may be a good mitigating technique when long complex passwords are not desired.     \r\nSee NIST 800-63B https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63b.pdf Sections: 5.1.1, 10.2.1, and Appendix A for further information on password requirements. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Consider a second authentication factor beyond the password, which prevents the password from being a single point of failure",
        "Description": "Consider a second authentication factor beyond the password, which prevents the password from being a single point of failure. See CWE-308 for further information. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes",
        "Description": "Consider implementing a password complexity meter to inform users when a chosen password meets the required attributes. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-112",
        "Phase": null,
        "Title": null,
        "Description": "Brute Force",
        "Url": "http://capec.mitre.org/data/definitions/112.html"
      },
      {
        "Id": "CAPEC-16",
        "Phase": null,
        "Title": null,
        "Description": "Dictionary-based Password Attack",
        "Url": "http://capec.mitre.org/data/definitions/16.html"
      },
      {
        "Id": "CAPEC-49",
        "Phase": null,
        "Title": null,
        "Description": "Password Brute Forcing",
        "Url": "http://capec.mitre.org/data/definitions/49.html"
      },
      {
        "Id": "CAPEC-509",
        "Phase": null,
        "Title": null,
        "Description": "Kerberoasting",
        "Url": "http://capec.mitre.org/data/definitions/509.html"
      },
      {
        "Id": "CAPEC-55",
        "Phase": null,
        "Title": null,
        "Description": "Rainbow Table Password Cracking",
        "Url": "http://capec.mitre.org/data/definitions/55.html"
      },
      {
        "Id": "CAPEC-555",
        "Phase": null,
        "Title": null,
        "Description": "Remote Services with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/555.html"
      },
      {
        "Id": "CAPEC-561",
        "Phase": null,
        "Title": null,
        "Description": "Windows Admin Shares with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/561.html"
      },
      {
        "Id": "CAPEC-565",
        "Phase": null,
        "Title": null,
        "Description": "Password Spraying",
        "Url": "http://capec.mitre.org/data/definitions/565.html"
      },
      {
        "Id": "CAPEC-70",
        "Phase": null,
        "Title": null,
        "Description": "Try Common or Default Usernames and Passwords",
        "Url": "http://capec.mitre.org/data/definitions/70.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Not enforcing the password policy stated in a products design can allow users to create passwords that do not provide the necessary level of protection. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-258"
    ]
  },
  {
    "Id": "CWE-258",
    "Title": " Empty Password in Configuration File",
    "Description": "Using an empty string as a password is insecure. ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "Passwords should be at least eight characters long -- the longer the better",
        "Description": "Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-200",
    "Title": " Exposure of Sensitive Information to an Unauthorized Actor",
    "Description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information. ",
    "ExtendedDescription": "There are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker. Some kinds of sensitive information include: private, personal information, such as personal messages, financial data, health records, geographic location, or contact details system status and environment, such as the operating system and installed packages business secrets and intellectual property network status and configuration the product's own code or internal state metadata, e.g. logging of connections or message headers indirect information, such as a discrepancy between two internal operations that can be observed by an outsider Information might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected. These parties include: the product's own users people or organizations whose information is created or used by the product, even if they are not direct product users the product's administrators, including the admins of the system(s) and/or networks on which the product operates the developer Information exposures can occur in different ways: the code explicitly inserts sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been \"scrubbed\" or \"sanitized\" a different weakness or mistake indirectly inserts the sensitive information into resources, such as a web script error revealing the full system path of the program. the code manages resources that intentionally contain sensitive information, but the resources are unintentionally made accessible to unauthorized actors. In this case, the information exposure is resultant - i.e., a different weakness enabled the access to the information in the first place. It is common practice to describe any loss of confidentiality as an \"information exposure,\" but this can lead to overuse of CWE-200 in CWE mapping. From the CWE perspective, loss of confidentiality is a technical impact that can arise from dozens of different weaknesses, such as insecure file permissions or out-of-bounds read. CWE-200 and its lower-level descendants are intended to cover the mistakes that occur in behaviors that explicitly manage, store, transfer, or cleanse sensitive information. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-116",
        "Phase": null,
        "Title": null,
        "Description": "Excavation",
        "Url": "http://capec.mitre.org/data/definitions/116.html"
      },
      {
        "Id": "CAPEC-13",
        "Phase": null,
        "Title": null,
        "Description": "Subverting Environment Variable Values",
        "Url": "http://capec.mitre.org/data/definitions/13.html"
      },
      {
        "Id": "CAPEC-169",
        "Phase": null,
        "Title": null,
        "Description": "Footprinting",
        "Url": "http://capec.mitre.org/data/definitions/169.html"
      },
      {
        "Id": "CAPEC-22",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Trust in Client",
        "Url": "http://capec.mitre.org/data/definitions/22.html"
      },
      {
        "Id": "CAPEC-224",
        "Phase": null,
        "Title": null,
        "Description": "Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/224.html"
      },
      {
        "Id": "CAPEC-285",
        "Phase": null,
        "Title": null,
        "Description": "ICMP Echo Request Ping",
        "Url": "http://capec.mitre.org/data/definitions/285.html"
      },
      {
        "Id": "CAPEC-287",
        "Phase": null,
        "Title": null,
        "Description": "TCP SYN Scan",
        "Url": "http://capec.mitre.org/data/definitions/287.html"
      },
      {
        "Id": "CAPEC-290",
        "Phase": null,
        "Title": null,
        "Description": "Enumerate Mail Exchange (MX) Records",
        "Url": "http://capec.mitre.org/data/definitions/290.html"
      },
      {
        "Id": "CAPEC-291",
        "Phase": null,
        "Title": null,
        "Description": "DNS Zone Transfers",
        "Url": "http://capec.mitre.org/data/definitions/291.html"
      },
      {
        "Id": "CAPEC-292",
        "Phase": null,
        "Title": null,
        "Description": "Host Discovery",
        "Url": "http://capec.mitre.org/data/definitions/292.html"
      },
      {
        "Id": "CAPEC-293",
        "Phase": null,
        "Title": null,
        "Description": "Traceroute Route Enumeration",
        "Url": "http://capec.mitre.org/data/definitions/293.html"
      },
      {
        "Id": "CAPEC-294",
        "Phase": null,
        "Title": null,
        "Description": "ICMP Address Mask Request",
        "Url": "http://capec.mitre.org/data/definitions/294.html"
      },
      {
        "Id": "CAPEC-295",
        "Phase": null,
        "Title": null,
        "Description": "Timestamp Request",
        "Url": "http://capec.mitre.org/data/definitions/295.html"
      },
      {
        "Id": "CAPEC-296",
        "Phase": null,
        "Title": null,
        "Description": "ICMP Information Request",
        "Url": "http://capec.mitre.org/data/definitions/296.html"
      },
      {
        "Id": "CAPEC-297",
        "Phase": null,
        "Title": null,
        "Description": "TCP ACK Ping",
        "Url": "http://capec.mitre.org/data/definitions/297.html"
      },
      {
        "Id": "CAPEC-298",
        "Phase": null,
        "Title": null,
        "Description": "UDP Ping",
        "Url": "http://capec.mitre.org/data/definitions/298.html"
      },
      {
        "Id": "CAPEC-299",
        "Phase": null,
        "Title": null,
        "Description": "TCP SYN Ping",
        "Url": "http://capec.mitre.org/data/definitions/299.html"
      },
      {
        "Id": "CAPEC-300",
        "Phase": null,
        "Title": null,
        "Description": "Port Scanning",
        "Url": "http://capec.mitre.org/data/definitions/300.html"
      },
      {
        "Id": "CAPEC-301",
        "Phase": null,
        "Title": null,
        "Description": "TCP Connect Scan",
        "Url": "http://capec.mitre.org/data/definitions/301.html"
      },
      {
        "Id": "CAPEC-302",
        "Phase": null,
        "Title": null,
        "Description": "TCP FIN Scan",
        "Url": "http://capec.mitre.org/data/definitions/302.html"
      },
      {
        "Id": "CAPEC-303",
        "Phase": null,
        "Title": null,
        "Description": "TCP Xmas Scan",
        "Url": "http://capec.mitre.org/data/definitions/303.html"
      },
      {
        "Id": "CAPEC-304",
        "Phase": null,
        "Title": null,
        "Description": "TCP Null Scan",
        "Url": "http://capec.mitre.org/data/definitions/304.html"
      },
      {
        "Id": "CAPEC-305",
        "Phase": null,
        "Title": null,
        "Description": "TCP ACK Scan",
        "Url": "http://capec.mitre.org/data/definitions/305.html"
      },
      {
        "Id": "CAPEC-306",
        "Phase": null,
        "Title": null,
        "Description": "TCP Window Scan",
        "Url": "http://capec.mitre.org/data/definitions/306.html"
      },
      {
        "Id": "CAPEC-307",
        "Phase": null,
        "Title": null,
        "Description": "TCP RPC Scan",
        "Url": "http://capec.mitre.org/data/definitions/307.html"
      },
      {
        "Id": "CAPEC-308",
        "Phase": null,
        "Title": null,
        "Description": "UDP Scan",
        "Url": "http://capec.mitre.org/data/definitions/308.html"
      },
      {
        "Id": "CAPEC-309",
        "Phase": null,
        "Title": null,
        "Description": "Network Topology Mapping",
        "Url": "http://capec.mitre.org/data/definitions/309.html"
      },
      {
        "Id": "CAPEC-310",
        "Phase": null,
        "Title": null,
        "Description": "Scanning for Vulnerable Software",
        "Url": "http://capec.mitre.org/data/definitions/310.html"
      },
      {
        "Id": "CAPEC-312",
        "Phase": null,
        "Title": null,
        "Description": "Active OS Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/312.html"
      },
      {
        "Id": "CAPEC-313",
        "Phase": null,
        "Title": null,
        "Description": "Passive OS Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/313.html"
      },
      {
        "Id": "CAPEC-317",
        "Phase": null,
        "Title": null,
        "Description": "IP ID Sequencing Probe",
        "Url": "http://capec.mitre.org/data/definitions/317.html"
      },
      {
        "Id": "CAPEC-318",
        "Phase": null,
        "Title": null,
        "Description": "IP 'ID' Echoed Byte-Order Probe",
        "Url": "http://capec.mitre.org/data/definitions/318.html"
      },
      {
        "Id": "CAPEC-319",
        "Phase": null,
        "Title": null,
        "Description": "IP (DF) 'Don't Fragment Bit' Echoing Probe",
        "Url": "http://capec.mitre.org/data/definitions/319.html"
      },
      {
        "Id": "CAPEC-320",
        "Phase": null,
        "Title": null,
        "Description": "TCP Timestamp Probe",
        "Url": "http://capec.mitre.org/data/definitions/320.html"
      },
      {
        "Id": "CAPEC-321",
        "Phase": null,
        "Title": null,
        "Description": "TCP Sequence Number Probe",
        "Url": "http://capec.mitre.org/data/definitions/321.html"
      },
      {
        "Id": "CAPEC-322",
        "Phase": null,
        "Title": null,
        "Description": "TCP (ISN) Greatest Common Divisor Probe",
        "Url": "http://capec.mitre.org/data/definitions/322.html"
      },
      {
        "Id": "CAPEC-323",
        "Phase": null,
        "Title": null,
        "Description": "TCP (ISN) Counter Rate Probe",
        "Url": "http://capec.mitre.org/data/definitions/323.html"
      },
      {
        "Id": "CAPEC-324",
        "Phase": null,
        "Title": null,
        "Description": "TCP (ISN) Sequence Predictability Probe",
        "Url": "http://capec.mitre.org/data/definitions/324.html"
      },
      {
        "Id": "CAPEC-325",
        "Phase": null,
        "Title": null,
        "Description": "TCP Congestion Control Flag (ECN) Probe",
        "Url": "http://capec.mitre.org/data/definitions/325.html"
      },
      {
        "Id": "CAPEC-326",
        "Phase": null,
        "Title": null,
        "Description": "TCP Initial Window Size Probe",
        "Url": "http://capec.mitre.org/data/definitions/326.html"
      },
      {
        "Id": "CAPEC-327",
        "Phase": null,
        "Title": null,
        "Description": "TCP Options Probe",
        "Url": "http://capec.mitre.org/data/definitions/327.html"
      },
      {
        "Id": "CAPEC-328",
        "Phase": null,
        "Title": null,
        "Description": "TCP 'RST' Flag Checksum Probe",
        "Url": "http://capec.mitre.org/data/definitions/328.html"
      },
      {
        "Id": "CAPEC-329",
        "Phase": null,
        "Title": null,
        "Description": "ICMP Error Message Quoting Probe",
        "Url": "http://capec.mitre.org/data/definitions/329.html"
      },
      {
        "Id": "CAPEC-330",
        "Phase": null,
        "Title": null,
        "Description": "ICMP Error Message Echoing Integrity Probe",
        "Url": "http://capec.mitre.org/data/definitions/330.html"
      },
      {
        "Id": "CAPEC-472",
        "Phase": null,
        "Title": null,
        "Description": "Browser Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/472.html"
      },
      {
        "Id": "CAPEC-497",
        "Phase": null,
        "Title": null,
        "Description": "File Discovery",
        "Url": "http://capec.mitre.org/data/definitions/497.html"
      },
      {
        "Id": "CAPEC-508",
        "Phase": null,
        "Title": null,
        "Description": "Shoulder Surfing",
        "Url": "http://capec.mitre.org/data/definitions/508.html"
      },
      {
        "Id": "CAPEC-573",
        "Phase": null,
        "Title": null,
        "Description": "Process Footprinting",
        "Url": "http://capec.mitre.org/data/definitions/573.html"
      },
      {
        "Id": "CAPEC-574",
        "Phase": null,
        "Title": null,
        "Description": "Services Footprinting",
        "Url": "http://capec.mitre.org/data/definitions/574.html"
      },
      {
        "Id": "CAPEC-575",
        "Phase": null,
        "Title": null,
        "Description": "Account Footprinting",
        "Url": "http://capec.mitre.org/data/definitions/575.html"
      },
      {
        "Id": "CAPEC-576",
        "Phase": null,
        "Title": null,
        "Description": "Group Permission Footprinting",
        "Url": "http://capec.mitre.org/data/definitions/576.html"
      },
      {
        "Id": "CAPEC-577",
        "Phase": null,
        "Title": null,
        "Description": "Owner Footprinting",
        "Url": "http://capec.mitre.org/data/definitions/577.html"
      },
      {
        "Id": "CAPEC-59",
        "Phase": null,
        "Title": null,
        "Description": "Session Credential Falsification through Prediction",
        "Url": "http://capec.mitre.org/data/definitions/59.html"
      },
      {
        "Id": "CAPEC-60",
        "Phase": null,
        "Title": null,
        "Description": "Reusing Session IDs (aka Session Replay)",
        "Url": "http://capec.mitre.org/data/definitions/60.html"
      },
      {
        "Id": "CAPEC-616",
        "Phase": null,
        "Title": null,
        "Description": "Establish Rogue Location",
        "Url": "http://capec.mitre.org/data/definitions/616.html"
      },
      {
        "Id": "CAPEC-643",
        "Phase": null,
        "Title": null,
        "Description": "Identify Shared Files/Directories on System",
        "Url": "http://capec.mitre.org/data/definitions/643.html"
      },
      {
        "Id": "CAPEC-646",
        "Phase": null,
        "Title": null,
        "Description": "Peripheral Footprinting",
        "Url": "http://capec.mitre.org/data/definitions/646.html"
      },
      {
        "Id": "CAPEC-651",
        "Phase": null,
        "Title": null,
        "Description": "Eavesdropping",
        "Url": "http://capec.mitre.org/data/definitions/651.html"
      },
      {
        "Id": "CAPEC-79",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/79.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2001-1483",
        "Phase": null,
        "Title": "Enumeration of valid usernames based on inconsistent responses ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1483"
      },
      {
        "Id": "CVE-2001-1528",
        "Phase": null,
        "Title": "Account number enumeration via inconsistent responses. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1528"
      },
      {
        "Id": "CVE-2004-2150",
        "Phase": null,
        "Title": "User enumeration via discrepancies in error messages. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2150"
      },
      {
        "Id": "CVE-2005-1205",
        "Phase": null,
        "Title": "Telnet protocol allows servers to obtain sensitive environment information from clients. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1205"
      },
      {
        "Id": "CVE-2002-1725",
        "Phase": null,
        "Title": "Script calls phpinfo(), revealing system configuration to web user ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1725"
      },
      {
        "Id": "CVE-2002-0515",
        "Phase": null,
        "Title": "Product sets a different TTL when a port is being filtered than when it is not being filtered, which allows remote attackers to identify filtered ports by comparing TTLs. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0515"
      },
      {
        "Id": "CVE-2004-0778",
        "Phase": null,
        "Title": "Version control system allows remote attackers to determine the existence of arbitrary files and directories via the -X command for an alternate history file, which causes different error messages to be returned. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0778"
      },
      {
        "Id": "CVE-2000-1117",
        "Phase": null,
        "Title": "Virtual machine allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1117"
      },
      {
        "Id": "CVE-2003-0190",
        "Phase": null,
        "Title": "Product immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0190"
      },
      {
        "Id": "CVE-2008-2049",
        "Phase": null,
        "Title": "POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2049"
      },
      {
        "Id": "CVE-2007-5172",
        "Phase": null,
        "Title": "Program reveals password in error message if attacker can trigger certain database errors. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5172"
      },
      {
        "Id": "CVE-2008-4638",
        "Phase": null,
        "Title": "Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4638"
      },
      {
        "Id": "CVE-2007-1409",
        "Phase": null,
        "Title": "Direct request to library file in web application triggers pathname leak in error message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1409"
      },
      {
        "Id": "CVE-2005-0603",
        "Phase": null,
        "Title": "Malformed regexp syntax leads to information exposure in error message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0603"
      },
      {
        "Id": "CVE-2004-2268",
        "Phase": null,
        "Title": "Password exposed in debug information. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2268"
      },
      {
        "Id": "CVE-2003-1078",
        "Phase": null,
        "Title": "FTP client with debug option enabled shows password to the screen. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1078"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-201",
      "CWE-203",
      "CWE-209",
      "CWE-213",
      "CWE-215",
      "CWE-359",
      "CWE-497",
      "CWE-538",
      "CWE-1243",
      "CWE-1258",
      "CWE-1273",
      "CWE-1295"
    ]
  },
  {
    "Id": "CWE-201",
    "Title": " Insertion of Sensitive Information Into Sent Data",
    "Description": "The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor. ",
    "ExtendedDescription": "Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure). ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Specify which data in the software should be regarded as sensitive",
        "Description": "Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere",
        "Description": "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "Setup default error messages so that unexpected errors do not disclose sensitive information",
        "Description": "Setup default error messages so that unexpected errors do not disclose sensitive information. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-12",
        "Phase": null,
        "Title": null,
        "Description": "Choosing Message Identifier",
        "Url": "http://capec.mitre.org/data/definitions/12.html"
      },
      {
        "Id": "CAPEC-217",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured SSL",
        "Url": "http://capec.mitre.org/data/definitions/217.html"
      },
      {
        "Id": "CAPEC-612",
        "Phase": null,
        "Title": null,
        "Description": "WiFi MAC Address Tracking",
        "Url": "http://capec.mitre.org/data/definitions/612.html"
      },
      {
        "Id": "CAPEC-613",
        "Phase": null,
        "Title": null,
        "Description": "WiFi SSID Tracking",
        "Url": "http://capec.mitre.org/data/definitions/613.html"
      },
      {
        "Id": "CAPEC-618",
        "Phase": null,
        "Title": null,
        "Description": "Cellular Broadcast Message Request",
        "Url": "http://capec.mitre.org/data/definitions/618.html"
      },
      {
        "Id": "CAPEC-619",
        "Phase": null,
        "Title": null,
        "Description": "Signal Strength Tracking",
        "Url": "http://capec.mitre.org/data/definitions/619.html"
      },
      {
        "Id": "CAPEC-621",
        "Phase": null,
        "Title": null,
        "Description": "Analysis of Packet Timing and Sizes",
        "Url": "http://capec.mitre.org/data/definitions/621.html"
      },
      {
        "Id": "CAPEC-622",
        "Phase": null,
        "Title": null,
        "Description": "Electromagnetic Side-Channel Attack",
        "Url": "http://capec.mitre.org/data/definitions/622.html"
      },
      {
        "Id": "CAPEC-623",
        "Phase": null,
        "Title": null,
        "Description": "Compromising Emanations Attack",
        "Url": "http://capec.mitre.org/data/definitions/623.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-598"
    ]
  },
  {
    "Id": "CWE-598",
    "Title": " Use of GET Request Method With Sensitive Query Strings",
    "Description": "The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that requests. ",
    "ExtendedDescription": "The query string can be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources. If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When sensitive information is sent, use the POST method (e",
        "Description": "When sensitive information is sent, use the POST method (e.g. registration form). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-203",
    "Title": " Observable Differences in Behavior to Error Inputs",
    "Description": "Differences in device behavior to an error input may be used by an attacker to gather security-relevant information about the device. The information may be as simple as whether a particular operation was successful. ",
    "ExtendedDescription": "Differences in device response may take many forms and include responses like timing or control flow. These indications may reveal information about the device's operation or internal state. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else",
        "Description": "Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike a balance between being too cryptic and confusing users. The messages should not reveal the methods that were used to determine the error. Such detailed information may be used to refine an attack and increase the chances of a successful attack. \r\nIf errors must be captured in detail, the messages should be saved into log messages. Highly sensitive information such as passwords should never be saved to log files. Avoid inconsistent messaging that might accidentally tip off an attacker about the internal device state, such as whether a username is valid or not. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-189",
        "Phase": null,
        "Title": null,
        "Description": "Black Box Reverse Engineering",
        "Url": "http://capec.mitre.org/data/definitions/189.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-2094",
        "Phase": null,
        "Title": "This, and others, use \"..\" attacks and monitor error responses, so there is overlap with directory traversal. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2094"
      },
      {
        "Id": "CVE-2001-1483",
        "Phase": null,
        "Title": "Enumeration of valid usernames based on inconsistent responses ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1483"
      },
      {
        "Id": "CVE-2001-1528",
        "Phase": null,
        "Title": "Account number enumeration via inconsistent responses. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1528"
      },
      {
        "Id": "CVE-2004-2150",
        "Phase": null,
        "Title": "User enumeration via discrepancies in error messages. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2150"
      },
      {
        "Id": "CVE-2005-1650",
        "Phase": null,
        "Title": "User enumeration via discrepancies in error messages. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1650"
      },
      {
        "Id": "CVE-2004-0294",
        "Phase": null,
        "Title": "Bulletin Board displays different error messages when a user exists or not, which makes it easier for remote attackers to identify valid users and conduct a brute force password guessing attack. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0294"
      },
      {
        "Id": "CVE-2004-0243",
        "Phase": null,
        "Title": "Operating System, when direct remote login is disabled, displays a different message if the password is correct, which allows remote attackers to guess the password via brute force methods. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0243"
      },
      {
        "Id": "CVE-2002-0514",
        "Phase": null,
        "Title": "Product allows remote attackers to determine if a port is being filtered because the response packet TTL is different than the default TTL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0514"
      },
      {
        "Id": "CVE-2002-0515",
        "Phase": null,
        "Title": "Product sets a different TTL when a port is being filtered than when it is not being filtered, which allows remote attackers to identify filtered ports by comparing TTLs. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0515"
      },
      {
        "Id": "CVE-2002-0208",
        "Phase": null,
        "Title": "Product modifies TCP/IP stack and ICMP error messages in unusual ways that show the product is in use. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0208"
      },
      {
        "Id": "CVE-2004-2252",
        "Phase": null,
        "Title": "Behavioral infoleak by responding to SYN-FIN packets. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2252"
      },
      {
        "Id": "CVE-2001-1387",
        "Phase": null,
        "Title": "Product may generate different responses than specified by the administrator, possibly leading to an information leak. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1387"
      },
      {
        "Id": "CVE-2004-0778",
        "Phase": null,
        "Title": "Version control system allows remote attackers to determine the existence of arbitrary files and directories via the -X command for an alternate history file, which causes different error messages to be returned. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0778"
      },
      {
        "Id": "CVE-2004-1428",
        "Phase": null,
        "Title": "FTP server generates an error message if the user name does not exist instead of prompting for a password, which allows remote attackers to determine valid usernames. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1428"
      },
      {
        "Id": "CVE-2003-0078",
        "Phase": null,
        "Title": "SSL implementation does not perform a MAC computation if an incorrect block cipher padding is used, which causes an information leak (timing discrepancy) that may make it easier to launch cryptographic attacks that rely on distinguishing between padding and MAC verification errors, possibly leading to extraction of the original plaintext, aka the \"Vaudenay timing attack.\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0078"
      },
      {
        "Id": "CVE-2000-1117",
        "Phase": null,
        "Title": "Virtual machine allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1117"
      },
      {
        "Id": "CVE-2003-0637",
        "Phase": null,
        "Title": "Product uses a shorter timeout for a non-existent user than a valid user, which makes it easier for remote attackers to guess usernames and conduct brute force password guessing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0637"
      },
      {
        "Id": "CVE-2003-0190",
        "Phase": null,
        "Title": "Product immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0190"
      },
      {
        "Id": "CVE-2004-1602",
        "Phase": null,
        "Title": "FTP server responds in a different amount of time when a given username exists, which allows remote attackers to identify valid usernames by timing the server response. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1602"
      },
      {
        "Id": "CVE-2005-0918",
        "Phase": null,
        "Title": "Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0918"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-204",
      "CWE-205",
      "CWE-208",
      "CWE-1300",
      "CWE-1303"
    ]
  },
  {
    "Id": "CWE-204",
    "Title": " Observable Response Discrepancy",
    "Description": "The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere. ",
    "ExtendedDescription": "This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design). ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else",
        "Description": "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success. \r\nIf errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-2094",
        "Phase": null,
        "Title": "This, and others, use \"..\" attacks and monitor error responses, so there is overlap with directory traversal. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2094"
      },
      {
        "Id": "CVE-2001-1483",
        "Phase": null,
        "Title": "Enumeration of valid usernames based on inconsistent responses ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1483"
      },
      {
        "Id": "CVE-2001-1528",
        "Phase": null,
        "Title": "Account number enumeration via inconsistent responses. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1528"
      },
      {
        "Id": "CVE-2004-2150",
        "Phase": null,
        "Title": "User enumeration via discrepancies in error messages. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2150"
      },
      {
        "Id": "CVE-2005-1650",
        "Phase": null,
        "Title": "User enumeration via discrepancies in error messages. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1650"
      },
      {
        "Id": "CVE-2004-0294",
        "Phase": null,
        "Title": "Bulletin Board displays different error messages when a user exists or not, which makes it easier for remote attackers to identify valid users and conduct a brute force password guessing attack. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0294"
      },
      {
        "Id": "CVE-2004-0243",
        "Phase": null,
        "Title": "Operating System, when direct remote login is disabled, displays a different message if the password is correct, which allows remote attackers to guess the password via brute force methods. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0243"
      },
      {
        "Id": "CVE-2002-0514",
        "Phase": null,
        "Title": "Product allows remote attackers to determine if a port is being filtered because the response packet TTL is different than the default TTL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0514"
      },
      {
        "Id": "CVE-2002-0515",
        "Phase": null,
        "Title": "Product sets a different TTL when a port is being filtered than when it is not being filtered, which allows remote attackers to identify filtered ports by comparing TTLs. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0515"
      },
      {
        "Id": "CVE-2001-1387",
        "Phase": null,
        "Title": "Product may generate different responses than specified by the administrator, possibly leading to an information leak. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1387"
      },
      {
        "Id": "CVE-2004-0778",
        "Phase": null,
        "Title": "Version control system allows remote attackers to determine the existence of arbitrary files and directories via the -X command for an alternate history file, which causes different error messages to be returned. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0778"
      },
      {
        "Id": "CVE-2004-1428",
        "Phase": null,
        "Title": "FTP server generates an error message if the user name does not exist instead of prompting for a password, which allows remote attackers to determine valid usernames. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1428"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-205",
    "Title": " Observable Behavioral Discrepancy",
    "Description": "The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality. ",
    "ExtendedDescription": "Ideally, a product should provide as little information about its internal operations as possible. Otherwise, attackers could use knowledge of these internal operations to simplify or optimize their attack. In some cases, behavioral discrepancies can be used by attackers to form a side channel. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0208",
        "Phase": null,
        "Title": "Product modifies TCP/IP stack and ICMP error messages in unusual ways that show the product is in use. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0208"
      },
      {
        "Id": "CVE-2004-2252",
        "Phase": null,
        "Title": "Behavioral infoleak by responding to SYN-FIN packets. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2252"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-206",
      "CWE-207",
      "CWE-1255"
    ]
  },
  {
    "Id": "CWE-206",
    "Title": " Observable Internal Behavioral Discrepancy",
    "Description": "The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points. ",
    "ExtendedDescription": "Ideally, a product should provide as little information as possible to an attacker. Any hints that the attacker may be making progress can then be used to simplify or optimize the attack. For example, in a login procedure that requires a username and password, ultimately there is only one decision: success or failure. However, internally, two separate actions are performed: determining if the username exists, and checking if the password is correct. If the product behaves differently based on whether the username exists or not, then the attacker only needs to concentrate on the password. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Setup generic response pages for error conditions",
        "Description": "Setup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-2031",
        "Phase": null,
        "Title": "File existence via infoleak monitoring whether \"onerror\" handler fires or not. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2031"
      },
      {
        "Id": "CVE-2005-2025",
        "Phase": null,
        "Title": "Valid groupname enumeration via behavioral infoleak (sends response if valid, doesn't respond if not). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2025"
      },
      {
        "Id": "CVE-2001-1497",
        "Phase": null,
        "Title": "Behavioral infoleak in GUI allows attackers to distinguish between alphanumeric and non-alphanumeric characters in a password, thus reducing the search space. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1497"
      },
      {
        "Id": "CVE-2003-0190",
        "Phase": null,
        "Title": "Product immediately sends an error message when user does not exist instead of waiting until the password is provided, allowing username enumeration. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0190"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-207",
    "Title": " Observable Behavioral Discrepancy With Equivalent Products",
    "Description": "The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker. ",
    "ExtendedDescription": "For many kinds of products, multiple products may be available that perform the same functionality, such as a web server, network interface, or intrusion detection system. Attackers often perform \"fingerprinting,\" which uses discrepancies in order to identify which specific product is in use. Once the specific product has been identified, the attacks can be made more customized and efficient. Often, an organization might intentionally allow the specific product to be identifiable. However, in some environments, the ability to identify a distinct product is unacceptable, and it is expected that every product would behave in exactly the same way. In these more restricted environments, a behavioral difference might pose an unacceptable risk if it makes it easier to identify the product's vendor, model, configuration, version, etc. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0208",
        "Phase": null,
        "Title": "Product modifies TCP/IP stack and ICMP error messages in unusual ways that show the product is in use. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0208"
      },
      {
        "Id": "CVE-2004-2252",
        "Phase": null,
        "Title": "Behavioral infoleak by responding to SYN-FIN packets. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2252"
      },
      {
        "Id": "CVE-2000-1142",
        "Phase": null,
        "Title": "Honeypot generates an error with a \"pwd\" command in a particular directory, allowing attacker to know they are in a honeypot system. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1142"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-208",
    "Title": " Observable Timing Discrepancy",
    "Description": "Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not. ",
    "ExtendedDescription": "In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations. For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess. Timing discrepancies effectively form a timing side channel. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-462",
        "Phase": null,
        "Title": null,
        "Description": "Cross-Domain Search Timing",
        "Url": "http://capec.mitre.org/data/definitions/462.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2003-0078",
        "Phase": null,
        "Title": "SSL implementation does not perform a MAC computation if an incorrect block cipher padding is used, which causes an information leak (timing discrepancy) that may make it easier to launch cryptographic attacks that rely on distinguishing between padding and MAC verification errors, possibly leading to extraction of the original plaintext, aka the \"Vaudenay timing attack.\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0078"
      },
      {
        "Id": "CVE-2000-1117",
        "Phase": null,
        "Title": "Virtual machine allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1117"
      },
      {
        "Id": "CVE-2003-0637",
        "Phase": null,
        "Title": "Product uses a shorter timeout for a non-existent user than a valid user, which makes it easier for remote attackers to guess usernames and conduct brute force password guessing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0637"
      },
      {
        "Id": "CVE-2003-0190",
        "Phase": null,
        "Title": "Product immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0190"
      },
      {
        "Id": "CVE-2004-1602",
        "Phase": null,
        "Title": "FTP server responds in a different amount of time when a given username exists, which allows remote attackers to identify valid usernames by timing the server response. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1602"
      },
      {
        "Id": "CVE-2005-0918",
        "Phase": null,
        "Title": "Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0918"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-1254"
    ]
  },
  {
    "Id": "CWE-1254",
    "Title": " Incorrect Comparison Logic Granularity",
    "Description": "The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes. ",
    "ExtendedDescription": "Comparison logic is used to compare a variety of objects including passwords, Message Authentication Codes (MACs), and responses to verification challenges. When comparison logic is implemented at a finer granularity (e.g., byte-by-byte comparison) and breaks in the case of a comparison failure, an attacker can exploit this implementation to identify when exactly the failure occurred. With multiple attempts, the attacker may be able to guesses the correct password/response to challenge and elevate their privileges. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "The hardware designer should ensure that comparison logic is implemented so as to compare in one operation instead in smaller chunks",
        "Description": "The hardware designer should ensure that comparison logic is implemented so as to compare in one operation instead in smaller chunks. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2014-0984",
        "Phase": null,
        "Title": "The passwordCheck function in SAP Router 721 patch 117, 720 patch 411, 710 patch 029, and earlier terminates validation of a Route Permission Table entry password upon encountering the first incorrect character, which allows remote attackers to obtain passwords via a brute-force attack that relies on timing differences in responses to incorrect password guesses, aka a timing side-channel attack. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0984"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-209",
    "Title": " Generation of Error Message Containing Sensitive Information",
    "Description": "The software generates an error message that includes sensitive information about its environment, users, or associated data. ",
    "ExtendedDescription": "The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways: self-generated: the source code explicitly constructs the error message and delivers it externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of \"..\" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else",
        "Description": "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success. \r\nIf errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Handle exceptions internally and do not display errors containing potentially sensitive information to a user",
        "Description": "Handle exceptions internally and do not display errors containing potentially sensitive information to a user. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nUse naming conventions and strong types to make it easier to spot when sensitive data is being used",
        "Description": "Strategy:  Attack Surface Reduction\r\nUse naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible. \r\nEffectiveness: Defense in Depth\r\nNote: This makes it easier to spot places in the code where data is being used that is unencrypted.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Build and Compilation",
        "Title": "Strategy:  Compilation or Build Hardening\r\nDebugging information should not make its way into a production release",
        "Description": "Strategy:  Compilation or Build Hardening\r\nDebugging information should not make its way into a production release. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Build and Compilation",
        "Title": "Strategy:  Environment Hardening\r\nDebugging information should not make its way into a production release",
        "Description": "Strategy:  Environment Hardening\r\nDebugging information should not make its way into a production release. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "Where available, configure the environment to use less verbose error messages",
        "Description": "Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "Create default error pages or messages that do not leak any information",
        "Description": "Create default error pages or messages that do not leak any information. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-214",
        "Phase": null,
        "Title": null,
        "Description": "Fuzzing for garnering J2EE/.NET-based stack traces, for application mapping",
        "Url": "http://capec.mitre.org/data/definitions/214.html"
      },
      {
        "Id": "CAPEC-215",
        "Phase": null,
        "Title": null,
        "Description": "Fuzzing and observing application log data/errors for application mapping",
        "Url": "http://capec.mitre.org/data/definitions/215.html"
      },
      {
        "Id": "CAPEC-463",
        "Phase": null,
        "Title": null,
        "Description": "Padding Oracle Crypto Attack",
        "Url": "http://capec.mitre.org/data/definitions/463.html"
      },
      {
        "Id": "CAPEC-54",
        "Phase": null,
        "Title": null,
        "Description": "Query System for Information",
        "Url": "http://capec.mitre.org/data/definitions/54.html"
      },
      {
        "Id": "CAPEC-7",
        "Phase": null,
        "Title": null,
        "Description": "Blind SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/7.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-2049",
        "Phase": null,
        "Title": "POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2049"
      },
      {
        "Id": "CVE-2007-5172",
        "Phase": null,
        "Title": "Program reveals password in error message if attacker can trigger certain database errors. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5172"
      },
      {
        "Id": "CVE-2008-4638",
        "Phase": null,
        "Title": "Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4638"
      },
      {
        "Id": "CVE-2008-1579",
        "Phase": null,
        "Title": "Existence of user names can be determined by requesting a nonexistent blog and reading the error message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1579"
      },
      {
        "Id": "CVE-2007-1409",
        "Phase": null,
        "Title": "Direct request to library file in web application triggers pathname leak in error message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1409"
      },
      {
        "Id": "CVE-2008-3060",
        "Phase": null,
        "Title": "Malformed input to login page causes leak of full path when IMAP call fails. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3060"
      },
      {
        "Id": "CVE-2005-0603",
        "Phase": null,
        "Title": "Malformed regexp syntax leads to information exposure in error message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0603"
      },
      {
        "Id": "CVE-2017-9615",
        "Phase": null,
        "Title": "verbose logging stores admin credentials in a world-readablelog file ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9615"
      },
      {
        "Id": "CVE-2018-1999036",
        "Phase": null,
        "Title": "SSH password for private key stored in build log ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999036"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "System Configuration",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-210",
      "CWE-211",
      "CWE-550"
    ]
  },
  {
    "Id": "CWE-210",
    "Title": " Self-generated Error Message Containing Sensitive Information",
    "Description": "The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Build and Compilation",
        "Title": "Strategy:  Compilation or Build Hardening\r\nDebugging information should not make its way into a production release",
        "Description": "Strategy:  Compilation or Build Hardening\r\nDebugging information should not make its way into a production release. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Build and Compilation",
        "Title": "Strategy:  Environment Hardening\r\nDebugging information should not make its way into a production release",
        "Description": "Strategy:  Environment Hardening\r\nDebugging information should not make its way into a production release. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-1745",
        "Phase": null,
        "Title": "Infoleak of sensitive information in error message (physical access required). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1745"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-211",
    "Title": " Externally-Generated Error Message Containing Sensitive Information",
    "Description": "The application performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the application, such as an error generated by the programming language interpreter that the software uses. The error can contain sensitive system information. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "Configure the application's environment in a way that prevents errors from being generated",
        "Description": "Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Build and Compilation",
        "Title": "Strategy:  Compilation or Build Hardening\r\nDebugging information should not make its way into a production release",
        "Description": "Strategy:  Compilation or Build Hardening\r\nDebugging information should not make its way into a production release. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Build and Compilation",
        "Title": "Strategy:  Environment Hardening\r\nDebugging information should not make its way into a production release",
        "Description": "Strategy:  Environment Hardening\r\nDebugging information should not make its way into a production release. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Handle exceptions internally and do not display errors containing potentially sensitive information to a user",
        "Description": "Handle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message",
        "Description": "The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-1581",
        "Phase": null,
        "Title": "chain: product does not protect against direct request of an include file, leading to resultant path disclosure when the include file does not successfully execute. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1581"
      },
      {
        "Id": "CVE-2004-1579",
        "Phase": null,
        "Title": "Single \"'\" inserted into SQL query leads to invalid SQL query execution, triggering full path disclosure. Possibly resultant from more general SQL injection issue. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1579"
      },
      {
        "Id": "CVE-2005-0459",
        "Phase": null,
        "Title": "chain: product does not protect against direct request of a library file, leading to resultant path disclosure when the file does not successfully execute. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0459"
      },
      {
        "Id": "CVE-2005-0443",
        "Phase": null,
        "Title": "invalid parameter triggers a failure to find an include file, leading to infoleak in error message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0443"
      },
      {
        "Id": "CVE-2005-0433",
        "Phase": null,
        "Title": "Various invalid requests lead to information leak in verbose error messages describing the failure to instantiate a class, open a configuration file, or execute an undefined function. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0433"
      },
      {
        "Id": "CVE-2004-1101",
        "Phase": null,
        "Title": "Improper handling of filename request with trailing \"/\" causes multiple consequences, including information leak in Visual Basic error message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1101"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "PHP applications are often targeted for having this issue when the PHP interpreter generates the error outside of the application's control. However, other languages/environments exhibit the same issue. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-535",
      "CWE-536",
      "CWE-537"
    ]
  },
  {
    "Id": "CWE-535",
    "Title": " Exposure of Information Through Shell Error Message",
    "Description": "A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-536",
    "Title": " Servlet Runtime Error Message Containing Sensitive Information",
    "Description": "A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-537",
    "Title": " Java Runtime Error Message Containing Sensitive Information",
    "Description": "In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Do not expose sensitive error information to the user",
        "Description": "Do not expose sensitive error information to the user. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-550",
    "Title": " Server-generated Error Message Containing Sensitive Information",
    "Description": "Certain conditions, such as network failure, will cause a server error message to be displayed. ",
    "ExtendedDescription": "While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; System Configuration",
        "Title": "Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed",
        "Description": "Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-213",
    "Title": " Exposure of Sensitive Information Due to Incompatible Policies",
    "Description": "The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed. ",
    "ExtendedDescription": "When handling information, the developer must consider whether the information is regarded as sensitive by different stakeholders, such as users or administrators. Each stakeholder effectively has its own intended security policy that the product is expected to uphold. When a developer does not treat that information as sensitive, this can introduce a vulnerability that violates the expectations of the product's users. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1725",
        "Phase": null,
        "Title": "Script calls phpinfo() ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1725"
      },
      {
        "Id": "CVE-2004-0033",
        "Phase": null,
        "Title": "Script calls phpinfo() ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0033"
      },
      {
        "Id": "CVE-2003-1181",
        "Phase": null,
        "Title": "Script calls phpinfo() ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1181"
      },
      {
        "Id": "CVE-2004-1422",
        "Phase": null,
        "Title": "Script calls phpinfo() ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1422"
      },
      {
        "Id": "CVE-2004-1590",
        "Phase": null,
        "Title": "Script calls phpinfo() ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1590"
      },
      {
        "Id": "CVE-2003-1038",
        "Phase": null,
        "Title": "Product lists DLLs and full pathnames. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1038"
      },
      {
        "Id": "CVE-2005-1205",
        "Phase": null,
        "Title": "Telnet protocol allows servers to obtain sensitive environment information from clients. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1205"
      },
      {
        "Id": "CVE-2005-0488",
        "Phase": null,
        "Title": "Telnet protocol allows servers to obtain sensitive environment information from clients. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0488"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Policy",
        "Title": "This can occur when the product's policy does not account for all relevant stakeholders, or when the policies of other stakeholders are not interpreted properly. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Requirements",
        "Title": "This can occur when requirements do not explicitly account for all relevant stakeholders. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Communications or data exchange frameworks may be chosen that exchange or provide access to more information than strictly needed. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "This can occur when the developer does not properly track the flow of sensitive information and how it is exposed, e.g., via an API. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-215",
    "Title": " Insertion of Sensitive Information Into Debugging Code",
    "Description": "The application inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production. ",
    "ExtendedDescription": "When debugging, it may be necessary to report detailed information to the programmer. However, if the debugging code is not disabled when the application is operating in a production environment, then this sensitive information may be exposed to attackers. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Do not leave debug statements that could be executed in the source code",
        "Description": "Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-2268",
        "Phase": null,
        "Title": "Password exposed in debug information. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2268"
      },
      {
        "Id": "CVE-2002-0918",
        "Phase": null,
        "Title": "CGI script includes sensitive information in debug messages when an error is triggered. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0918"
      },
      {
        "Id": "CVE-2003-1078",
        "Phase": null,
        "Title": "FTP client with debug option enabled shows password to the screen. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1078"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-359",
    "Title": " Exposure of Private Personal Information to an Unauthorized Actor",
    "Description": "The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected. ",
    "ExtendedDescription": "There are many types of sensitive information that products must protect from attackers, including system data, communications, configuration, business secrets, intellectual property, and an individual's personal (private) information. Private personal information may include a password, phone number, geographic location, personal messages, credit card number, etc. Private information is important to consider whether the person is a user of the product, or part of a data set that is processed by the product. An exposure of private information does not necessarily prevent the product from working properly, and in fact the exposure might be intended by the developer, e.g. as part of data sharing with other organizations. However, the exposure of personal private information can still be undesirable or explicitly prohibited by law or regulation. Some types of private information include: Government identifiers, such as Social Security Numbers Contact information, such as home addresses and telephone numbers Geographic location - where the user is (or was) Employment history Financial data - such as credit card numbers, salary, bank accounts, and debts Pictures, video, or audio Behavioral patterns - such as web surfing history, when certain activities are performed, etc. Relationships (and types of relationships) with others - family, friends, contacts, etc. Communications - e-mail addresses, private messages, text messages, chat logs, etc. Health - medical conditions, insurance status, prescription records Account passwords and other credentials Some of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry. Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Identify and consult all relevant regulations for personal privacy",
        "Description": "Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Carefully evaluate how secure design may interfere with privacy, and vice versa",
        "Description": "Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-464",
        "Phase": null,
        "Title": null,
        "Description": "Evercookie",
        "Url": "http://capec.mitre.org/data/definitions/464.html"
      },
      {
        "Id": "CAPEC-467",
        "Phase": null,
        "Title": null,
        "Description": "Cross Site Identification",
        "Url": "http://capec.mitre.org/data/definitions/467.html"
      },
      {
        "Id": "CAPEC-508",
        "Phase": null,
        "Title": null,
        "Description": "Shoulder Surfing",
        "Url": "http://capec.mitre.org/data/definitions/508.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-497",
    "Title": " Exposure of Sensitive System Information to an Unauthorized Control Sphere",
    "Description": "The application does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the application does. ",
    "ExtendedDescription": "Network-based software, such as web applications, often runs on top of an operating system or similar environment. When the application communicates with outside parties, details about the underlying system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the application itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan. An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts. An attacker can use messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. An application may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user",
        "Description": "Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-170",
        "Phase": null,
        "Title": null,
        "Description": "Web Application Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/170.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-214",
      "CWE-526",
      "CWE-548"
    ]
  },
  {
    "Id": "CWE-214",
    "Title": " Invocation of Process Using Visible Sensitive Information",
    "Description": "A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system. ",
    "ExtendedDescription": "Many operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the software or related resources. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-1387",
        "Phase": null,
        "Title": "password passed on command line ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1387"
      },
      {
        "Id": "CVE-2005-2291",
        "Phase": null,
        "Title": "password passed on command line ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2291"
      },
      {
        "Id": "CVE-2001-1565",
        "Phase": null,
        "Title": "username/password on command line allows local users to view via \"ps\" or other process listing programs ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1565"
      },
      {
        "Id": "CVE-2004-1948",
        "Phase": null,
        "Title": "Username/password on command line allows local users to view via \"ps\" or other process listing programs. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1948"
      },
      {
        "Id": "CVE-1999-1270",
        "Phase": null,
        "Title": "PGP passphrase provided as command line argument. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1270"
      },
      {
        "Id": "CVE-2004-1058",
        "Phase": null,
        "Title": "Kernel race condition allows reading of environment variables of a process that is still spawning. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1058"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-526",
    "Title": " Exposure of Sensitive Information Through Environmental Variables",
    "Description": "Environmental variables may contain sensitive information about a remote server. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Protect information stored in environment variable from being exposed to the user",
        "Description": "Protect information stored in environment variable from being exposed to the user. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-548",
    "Title": " Exposure of Information Through Directory Listing",
    "Description": "A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers. ",
    "ExtendedDescription": "A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; System Configuration",
        "Title": "Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack",
        "Description": "Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-538",
    "Title": " Insertion of Sensitive Information into Externally-Accessible File or Directory",
    "Description": "The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation; System Configuration",
        "Title": "Do not expose file and directory information to the user",
        "Description": "Do not expose file and directory information to the user. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-95",
        "Phase": null,
        "Title": null,
        "Description": "WSDL Scanning",
        "Url": "http://capec.mitre.org/data/definitions/95.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-532",
      "CWE-540",
      "CWE-651"
    ]
  },
  {
    "Id": "CWE-532",
    "Title": " Insertion of Sensitive Information into Log File",
    "Description": "Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information. ",
    "ExtendedDescription": "While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers. Different log files may be produced and stored for: Server log files (e.g. server.log). This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords. log files that are used for debugging ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Consider seriously the sensitivity of the information written into log files",
        "Description": "Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Distribution",
        "Title": "Remove debug log files before deploying the application into production",
        "Description": "Remove debug log files before deploying the application into production. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Protect log files against unauthorized read/write",
        "Description": "Protect log files against unauthorized read/write. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Adjust configurations appropriately when software is transitioned from a debug state to production",
        "Description": "Adjust configurations appropriately when software is transitioned from a debug state to production. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-215",
        "Phase": null,
        "Title": null,
        "Description": "Fuzzing and observing application log data/errors for application mapping",
        "Url": "http://capec.mitre.org/data/definitions/215.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2017-9615",
        "Phase": null,
        "Title": "verbose logging stores admin credentials in a world-readablelog file ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9615"
      },
      {
        "Id": "CVE-2018-1999036",
        "Phase": null,
        "Title": "SSH password for private key stored in build log ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999036"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-540",
    "Title": " Inclusion of Sensitive Information in Source Code",
    "Description": "Source code on a web server or repository often contains sensitive information and should generally not be accessible to users. ",
    "ExtendedDescription": "There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; System Configuration",
        "Title": "Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet",
        "Description": "Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-531",
      "CWE-541",
      "CWE-615"
    ]
  },
  {
    "Id": "CWE-531",
    "Title": " Inclusion of Sensitive Information in Test Code",
    "Description": "Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Distribution; Installation",
        "Title": "Remove test code before deploying the application into production",
        "Description": "Remove test code before deploying the application into production. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Testing",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-541",
    "Title": " Inclusion of Sensitive Information in an Include File",
    "Description": "If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not store sensitive information in include files",
        "Description": "Do not store sensitive information in include files. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; System Configuration",
        "Title": "Protect include files from being exposed",
        "Description": "Protect include files from being exposed. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-615",
    "Title": " Inclusion of Sensitive Information in Source Code Comments",
    "Description": "While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc. ",
    "ExtendedDescription": "An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Distribution",
        "Title": "Remove comments which have sensitive information about the design/implementation of the application",
        "Description": "Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2007-6197",
        "Phase": null,
        "Title": "Version numbers and internal hostnames leaked in HTML comments. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6197"
      },
      {
        "Id": "CVE-2007-4072",
        "Phase": null,
        "Title": "CMS places full pathname of server in HTML comment. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4072"
      },
      {
        "Id": "CVE-2009-2431",
        "Phase": null,
        "Title": "blog software leaks real username in HTML comment. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2431"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-651",
    "Title": " Exposure of WSDL File Containing Sensitive Information",
    "Description": "The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return). ",
    "ExtendedDescription": "An information exposure may occur if any of the following apply: The WSDL file is accessible to a wider audience than intended. The WSDL file contains information on the methods/services that should not be publicly accessible or information about deprecated methods. This problem is made more likely due to the WSDL often being automatically generated from the code. Information in the WSDL file helps guess names/locations of methods/resources that should not be publicly accessible. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Limit access to the WSDL file as much as possible",
        "Description": "Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nMake sure that WSDL does not describe methods that should not be publicly accessible",
        "Description": "Strategy:  Separation of Privilege\r\nMake sure that WSDL does not describe methods that should not be publicly accessible. Make sure to protect service methods that should not be publicly accessible with access controls. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service",
        "Description": "Do not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1243",
    "Title": " Sensitive Non-Volatile Information Not Protected During Debug",
    "Description": "Access to security-sensitive information stored in fuses is not limited during debug. ",
    "ExtendedDescription": "Several security-sensitive values are are programmed into fuses to be used during early-boot flows or later at runtime. Examples of these security-sensitive values include root keys, encryption keys, manufacturing-specific information, chip-manufacturer-specific information, and original-equipment-manufacturer (OEM) data. After the chip is powered on, these values are sensed from fuses and stored in temporary locations such as registers and local memories. These locations are typically access-control protected from untrusted agents capable of accessing them. Even to trusted agents, only read-access is provided. However, these locations are not blocked during debug operations, allowing a users to access this sensitive information. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Disable access to security-sensitive information stored in fuses directly and also reflected from temporary storage locations when in debug mode",
        "Description": "Disable access to security-sensitive information stored in fuses directly and also reflected from temporary storage locations when in debug mode. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-116",
        "Phase": null,
        "Title": null,
        "Description": "Excavation",
        "Url": "http://capec.mitre.org/data/definitions/116.html"
      },
      {
        "Id": "CAPEC-545",
        "Phase": null,
        "Title": null,
        "Description": "Pull Data from System Resources",
        "Url": "http://capec.mitre.org/data/definitions/545.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1273",
    "Title": " Device Unlock Credential Sharing",
    "Description": "The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information. ",
    "ExtendedDescription": "“Unlocking a device” often means activating certain, unadvertised, debug and manufacturer-specific capabilities of a device using sensitive credentials. Unlocking a device might be necessary for the purpose of troubleshooting device problems. For example, suppose a device contains the ability to dump the content of the full system memory by disabling the memory-protection mechanisms. Since this is a highly security-sensitive capability, this capability is “locked” in the production part. Unless the device gets unlocked by supplying the proper credentials the debug capablilities are not available. For cases where the chip designer, chip manufacturer (fabricator), and manufacturing and assembly testers are the all employed by the same company, the compromise of the credentials are greatly reduced. However, when the chip designer is employed by one company, the chip manufacturer is employed by another company (a foundry), and the assemblers and testers are employed by yet a third company. Since these different companies will need to perform various tests on the device to verify correct device function, they all need to share the unlock key. Unfortunately, the level of secrecy and policy might be quite different at each company, greatly increasing the risk of sensitive credentials being compromised. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Integration",
        "Title": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy",
        "Description": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Manufacturing",
        "Title": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy",
        "Description": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-560",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Domain Credentials",
        "Url": "http://capec.mitre.org/data/definitions/560.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Integration",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Manufacturing",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-345",
    "Title": " Insufficient Verification of Data Authenticity",
    "Description": "The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-111",
        "Phase": null,
        "Title": null,
        "Description": "JSON Hijacking (aka JavaScript Hijacking)",
        "Url": "http://capec.mitre.org/data/definitions/111.html"
      },
      {
        "Id": "CAPEC-141",
        "Phase": null,
        "Title": null,
        "Description": "Cache Poisoning",
        "Url": "http://capec.mitre.org/data/definitions/141.html"
      },
      {
        "Id": "CAPEC-142",
        "Phase": null,
        "Title": null,
        "Description": "DNS Cache Poisoning",
        "Url": "http://capec.mitre.org/data/definitions/142.html"
      },
      {
        "Id": "CAPEC-148",
        "Phase": null,
        "Title": null,
        "Description": "Content Spoofing",
        "Url": "http://capec.mitre.org/data/definitions/148.html"
      },
      {
        "Id": "CAPEC-218",
        "Phase": null,
        "Title": null,
        "Description": "Spoofing of UDDI/ebXML Messages",
        "Url": "http://capec.mitre.org/data/definitions/218.html"
      },
      {
        "Id": "CAPEC-384",
        "Phase": null,
        "Title": null,
        "Description": "Application API Message Manipulation via Man-in-the-Middle",
        "Url": "http://capec.mitre.org/data/definitions/384.html"
      },
      {
        "Id": "CAPEC-385",
        "Phase": null,
        "Title": null,
        "Description": "Transaction or Event Tampering via Application API Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/385.html"
      },
      {
        "Id": "CAPEC-386",
        "Phase": null,
        "Title": null,
        "Description": "Application API Navigation Remapping",
        "Url": "http://capec.mitre.org/data/definitions/386.html"
      },
      {
        "Id": "CAPEC-387",
        "Phase": null,
        "Title": null,
        "Description": "Navigation Remapping To Propagate Malicious Content",
        "Url": "http://capec.mitre.org/data/definitions/387.html"
      },
      {
        "Id": "CAPEC-388",
        "Phase": null,
        "Title": null,
        "Description": "Application API Button Hijacking",
        "Url": "http://capec.mitre.org/data/definitions/388.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-346",
      "CWE-347",
      "CWE-349",
      "CWE-351",
      "CWE-352",
      "CWE-353",
      "CWE-354",
      "CWE-360",
      "CWE-494",
      "CWE-616",
      "CWE-646",
      "CWE-649",
      "CWE-924",
      "CWE-1293"
    ]
  },
  {
    "Id": "CWE-346",
    "Title": " Origin Validation Error",
    "Description": "The software does not properly verify that the source of data or communication is valid. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-111",
        "Phase": null,
        "Title": null,
        "Description": "JSON Hijacking (aka JavaScript Hijacking)",
        "Url": "http://capec.mitre.org/data/definitions/111.html"
      },
      {
        "Id": "CAPEC-141",
        "Phase": null,
        "Title": null,
        "Description": "Cache Poisoning",
        "Url": "http://capec.mitre.org/data/definitions/141.html"
      },
      {
        "Id": "CAPEC-142",
        "Phase": null,
        "Title": null,
        "Description": "DNS Cache Poisoning",
        "Url": "http://capec.mitre.org/data/definitions/142.html"
      },
      {
        "Id": "CAPEC-160",
        "Phase": null,
        "Title": null,
        "Description": "Exploit Script-Based APIs",
        "Url": "http://capec.mitre.org/data/definitions/160.html"
      },
      {
        "Id": "CAPEC-21",
        "Phase": null,
        "Title": null,
        "Description": "Exploitation of Trusted Identifiers",
        "Url": "http://capec.mitre.org/data/definitions/21.html"
      },
      {
        "Id": "CAPEC-384",
        "Phase": null,
        "Title": null,
        "Description": "Application API Message Manipulation via Man-in-the-Middle",
        "Url": "http://capec.mitre.org/data/definitions/384.html"
      },
      {
        "Id": "CAPEC-385",
        "Phase": null,
        "Title": null,
        "Description": "Transaction or Event Tampering via Application API Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/385.html"
      },
      {
        "Id": "CAPEC-386",
        "Phase": null,
        "Title": null,
        "Description": "Application API Navigation Remapping",
        "Url": "http://capec.mitre.org/data/definitions/386.html"
      },
      {
        "Id": "CAPEC-387",
        "Phase": null,
        "Title": null,
        "Description": "Navigation Remapping To Propagate Malicious Content",
        "Url": "http://capec.mitre.org/data/definitions/387.html"
      },
      {
        "Id": "CAPEC-388",
        "Phase": null,
        "Title": null,
        "Description": "Application API Button Hijacking",
        "Url": "http://capec.mitre.org/data/definitions/388.html"
      },
      {
        "Id": "CAPEC-510",
        "Phase": null,
        "Title": null,
        "Description": "SaaS User Request Forgery",
        "Url": "http://capec.mitre.org/data/definitions/510.html"
      },
      {
        "Id": "CAPEC-59",
        "Phase": null,
        "Title": null,
        "Description": "Session Credential Falsification through Prediction",
        "Url": "http://capec.mitre.org/data/definitions/59.html"
      },
      {
        "Id": "CAPEC-60",
        "Phase": null,
        "Title": null,
        "Description": "Reusing Session IDs (aka Session Replay)",
        "Url": "http://capec.mitre.org/data/definitions/60.html"
      },
      {
        "Id": "CAPEC-75",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Writeable Configuration Files",
        "Url": "http://capec.mitre.org/data/definitions/75.html"
      },
      {
        "Id": "CAPEC-76",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Web Input to File System Calls",
        "Url": "http://capec.mitre.org/data/definitions/76.html"
      },
      {
        "Id": "CAPEC-89",
        "Phase": null,
        "Title": null,
        "Description": "Pharming",
        "Url": "http://capec.mitre.org/data/definitions/89.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2000-1218",
        "Phase": null,
        "Title": "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1218"
      },
      {
        "Id": "CVE-2005-0877",
        "Phase": null,
        "Title": "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0877"
      },
      {
        "Id": "CVE-2001-1452",
        "Phase": null,
        "Title": "DNS server caches glue records received from non-delegated name servers ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1452"
      },
      {
        "Id": "CVE-2005-2188",
        "Phase": null,
        "Title": "user ID obtained from untrusted source (URL) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2188"
      },
      {
        "Id": "CVE-2003-0174",
        "Phase": null,
        "Title": "LDAP service does not verify if a particular attribute was set by the LDAP server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0174"
      },
      {
        "Id": "CVE-1999-1549",
        "Phase": null,
        "Title": "product does not sufficiently distinguish external HTML from internal, potentially dangerous HTML, allowing bypass using special strings in the page title. Overlaps special elements. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1549"
      },
      {
        "Id": "CVE-2003-0981",
        "Phase": null,
        "Title": "product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0981"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-347",
    "Title": " Improper Verification of Cryptographic Signature",
    "Description": "The software does not verify, or incorrectly verifies, the cryptographic signature for data. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-463",
        "Phase": null,
        "Title": null,
        "Description": "Padding Oracle Crypto Attack",
        "Url": "http://capec.mitre.org/data/definitions/463.html"
      },
      {
        "Id": "CAPEC-475",
        "Phase": null,
        "Title": null,
        "Description": "Signature Spoofing by Improper Validation",
        "Url": "http://capec.mitre.org/data/definitions/475.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1796",
        "Phase": null,
        "Title": "Does not properly verify signatures for \"trusted\" entities. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1796"
      },
      {
        "Id": "CVE-2005-2181",
        "Phase": null,
        "Title": "Insufficient verification allows spoofing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2181"
      },
      {
        "Id": "CVE-2005-2182",
        "Phase": null,
        "Title": "Insufficient verification allows spoofing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2182"
      },
      {
        "Id": "CVE-2002-1706",
        "Phase": null,
        "Title": "Accepts a configuration file without a Message Integrity Check (MIC) signature. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1706"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-668",
    "Title": " Exposure of Resource to Wrong Sphere",
    "Description": "The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource. ",
    "ExtendedDescription": "Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files. A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system. In either case, the end result is that a resource has been exposed to the wrong party. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-8",
      "CWE-22",
      "CWE-134",
      "CWE-200",
      "CWE-374",
      "CWE-375",
      "CWE-377",
      "CWE-402",
      "CWE-427",
      "CWE-428",
      "CWE-491",
      "CWE-492",
      "CWE-493",
      "CWE-522",
      "CWE-524",
      "CWE-552",
      "CWE-582",
      "CWE-583",
      "CWE-608",
      "CWE-642",
      "CWE-732",
      "CWE-767",
      "CWE-927",
      "CWE-1189",
      "CWE-1282"
    ]
  },
  {
    "Id": "CWE-8",
    "Title": " J2EE Misconfiguration",
    "Description": "When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Declare Java beans \"local\" when possible",
        "Description": "Declare Java beans \"local\" when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-22",
    "Title": " Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "Description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. ",
    "ExtendedDescription": "Many file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\", which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. \r\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: \r\n  realpath() in C  getCanonicalPath() in Java  GetFullPath() in ASP.NET  realpath() or abs_path() in Perl  realpath() in PHP   ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Strategy:  Firewall\r\nUse an application firewall that can detect attacks against this weakness",
        "Description": "Strategy:  Firewall\r\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth. \r\nEffectiveness: Moderate\r\nNote: An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]",
        "Description": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Enforcement by Conversion\r\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs",
        "Description": "Strategy:  Enforcement by Conversion\r\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. \r\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Sandbox or Jail\r\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system",
        "Description": "Strategy:  Sandbox or Jail\r\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. \r\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. \r\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. \r\nBe careful to avoid CWE-243 and other weaknesses related to jails. \r\nEffectiveness: Limited\r\nNote: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Attack Surface Reduction\r\nStore library, include, and utility files outside of the web document root, if possible",
        "Description": "Strategy:  Attack Surface Reduction\r\nStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately. \r\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else",
        "Description": "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success. \r\nIf errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not. \r\nIn the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Operation; Implementation",
        "Title": "Strategy:  Environment Hardening\r\nWhen using PHP, configure the application so that it does not use register_globals",
        "Description": "Strategy:  Environment Hardening\r\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-126",
        "Phase": null,
        "Title": null,
        "Description": "Path Traversal",
        "Url": "http://capec.mitre.org/data/definitions/126.html"
      },
      {
        "Id": "CAPEC-64",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/64.html"
      },
      {
        "Id": "CAPEC-76",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Web Input to File System Calls",
        "Url": "http://capec.mitre.org/data/definitions/76.html"
      },
      {
        "Id": "CAPEC-78",
        "Phase": null,
        "Title": null,
        "Description": "Using Escaped Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/78.html"
      },
      {
        "Id": "CAPEC-79",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/79.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2010-0467",
        "Phase": null,
        "Title": "Newsletter module allows reading arbitrary files using \"../\" sequences. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0467"
      },
      {
        "Id": "CVE-2009-4194",
        "Phase": null,
        "Title": "FTP server allows deletion of arbitrary files using \"..\" in the DELE command. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4194"
      },
      {
        "Id": "CVE-2009-4053",
        "Phase": null,
        "Title": "FTP server allows creation of arbitrary directories using \"..\" in the MKD command. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4053"
      },
      {
        "Id": "CVE-2009-0244",
        "Phase": null,
        "Title": "OBEX FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using \"..\" sequences. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0244"
      },
      {
        "Id": "CVE-2009-4013",
        "Phase": null,
        "Title": "Software package maintenance program allows overwriting arbitrary files using \"../\" sequences. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4013"
      },
      {
        "Id": "CVE-2009-4449",
        "Phase": null,
        "Title": "Bulletin board allows attackers to determine the existence of files using the avatar. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4449"
      },
      {
        "Id": "CVE-2009-4581",
        "Phase": null,
        "Title": "PHP program allows arbitrary code execution using \"..\" in filenames that are fed to the include() function. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4581"
      },
      {
        "Id": "CVE-2010-0012",
        "Phase": null,
        "Title": "Overwrite of files using a .. in a Torrent file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0012"
      },
      {
        "Id": "CVE-2010-0013",
        "Phase": null,
        "Title": "Chat program allows overwriting files using a custom smiley request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0013"
      },
      {
        "Id": "CVE-2008-5748",
        "Phase": null,
        "Title": "Chain: external control of values for user's desired language and theme enables path traversal. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5748"
      },
      {
        "Id": "CVE-2009-1936",
        "Phase": null,
        "Title": "Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1936"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-23",
      "CWE-36"
    ]
  },
  {
    "Id": "CWE-23",
    "Title": " Relative Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. \r\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes: \r\n  realpath() in C  getCanonicalPath() in Java  GetFullPath() in ASP.NET  realpath() or abs_path() in Perl  realpath() in PHP   ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-139",
        "Phase": null,
        "Title": null,
        "Description": "Relative Path Traversal",
        "Url": "http://capec.mitre.org/data/definitions/139.html"
      },
      {
        "Id": "CAPEC-76",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Web Input to File System Calls",
        "Url": "http://capec.mitre.org/data/definitions/76.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0298",
        "Phase": null,
        "Title": "Server allows remote attackers to cause a denial of service via certain HTTP GET requests containing a %2e%2e (encoded dot-dot), several \"/../\" sequences, or several \"../\" in a URI. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0298"
      },
      {
        "Id": "CVE-2002-0661",
        "Phase": null,
        "Title": "\"\\\" not in denylist for web server, allowing path traversal attacks when the server is run in Windows and other OSes. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0661"
      },
      {
        "Id": "CVE-2002-0946",
        "Phase": null,
        "Title": "Arbitrary files may be read files via ..\\ (dot dot) sequences in an HTTP request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0946"
      },
      {
        "Id": "CVE-2002-1042",
        "Phase": null,
        "Title": "Directory traversal vulnerability in search engine for web server allows remote attackers to read arbitrary files via \"..\\\" sequences in queries. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1042"
      },
      {
        "Id": "CVE-2002-1209",
        "Phase": null,
        "Title": "Directory traversal vulnerability in FTP server allows remote attackers to read arbitrary files via \"..\\\" sequences in a GET request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1209"
      },
      {
        "Id": "CVE-2002-1178",
        "Phase": null,
        "Title": "Directory traversal vulnerability in servlet allows remote attackers to execute arbitrary commands via \"..\\\" sequences in an HTTP request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1178"
      },
      {
        "Id": "CVE-2002-1987",
        "Phase": null,
        "Title": "Protection mechanism checks for \"/..\" but doesn't account for Windows-specific \"\\..\" allowing read of arbitrary files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1987"
      },
      {
        "Id": "CVE-2005-2142",
        "Phase": null,
        "Title": "Directory traversal vulnerability in FTP server allows remote authenticated attackers to list arbitrary directories via a \"\\..\" sequence in an LS command. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2142"
      },
      {
        "Id": "CVE-2002-0160",
        "Phase": null,
        "Title": "The administration function in Access Control Server allows remote attackers to read HTML, Java class, and image files outside the web root via a \"..\\..\" sequence in the URL to port 2002. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0160"
      },
      {
        "Id": "CVE-2001-0467",
        "Phase": null,
        "Title": "\"\\...\" in web server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0467"
      },
      {
        "Id": "CVE-2001-0963",
        "Phase": null,
        "Title": "\"...\" in cd command in FTP server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0963"
      },
      {
        "Id": "CVE-2001-1193",
        "Phase": null,
        "Title": "\"...\" in cd command in FTP server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1193"
      },
      {
        "Id": "CVE-2001-1131",
        "Phase": null,
        "Title": "\"...\" in cd command in FTP server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1131"
      },
      {
        "Id": "CVE-2001-0480",
        "Phase": null,
        "Title": "read of arbitrary files and directories using GET or CD with \"...\" in Windows-based FTP server. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0480"
      },
      {
        "Id": "CVE-2002-0288",
        "Phase": null,
        "Title": "read files using \".\" and Unicode-encoded \"/\" or \"\\\" characters in the URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0288"
      },
      {
        "Id": "CVE-2003-0313",
        "Phase": null,
        "Title": "Directory listing of web server using \"...\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0313"
      },
      {
        "Id": "CVE-2005-1658",
        "Phase": null,
        "Title": "Triple dot ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1658"
      },
      {
        "Id": "CVE-2000-0240",
        "Phase": null,
        "Title": "read files via \"/........../\" in URL ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0240"
      },
      {
        "Id": "CVE-2000-0773",
        "Phase": null,
        "Title": "read files via \"....\" in web server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0773"
      },
      {
        "Id": "CVE-1999-1082",
        "Phase": null,
        "Title": "read files via \"......\" in web server (doubled triple dot?) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1082"
      },
      {
        "Id": "CVE-2004-2121",
        "Phase": null,
        "Title": "read files via \"......\" in web server (doubled triple dot?) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2121"
      },
      {
        "Id": "CVE-2001-0491",
        "Phase": null,
        "Title": "multiple attacks using \"..\", \"...\", and \"....\" in different commands ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0491"
      },
      {
        "Id": "CVE-2001-0615",
        "Phase": null,
        "Title": "\"...\" or \"....\" in chat server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0615"
      },
      {
        "Id": "CVE-2005-2169",
        "Phase": null,
        "Title": "chain: \".../...//\" bypasses protection mechanism using regexp's that remove \"../\" resulting in collapse into an unsafe value \"../\" (CWE-182) and resultant path traversal. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2169"
      },
      {
        "Id": "CVE-2005-0202",
        "Phase": null,
        "Title": "\".../....///\" bypasses regexp's that remove \"./\" and \"../\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0202"
      },
      {
        "Id": "CVE-2004-1670",
        "Phase": null,
        "Title": "Mail server allows remote attackers to create arbitrary directories via a \"..\" or rename arbitrary files via a \"....//\" in user supplied parameters. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1670"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-24",
      "CWE-25",
      "CWE-26",
      "CWE-27",
      "CWE-28",
      "CWE-29",
      "CWE-30",
      "CWE-31",
      "CWE-32",
      "CWE-33",
      "CWE-34",
      "CWE-35"
    ]
  },
  {
    "Id": "CWE-24",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"../\" sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The \"../\" manipulation is the canonical manipulation for operating systems that use \"/\" as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which \"/\" is supported but not the primary separator, such as Windows, which uses \"\\\" but can also accept \"/\". ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-25",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/../\" sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. Sometimes a program checks for \"../\" at the beginning of the input, so a \"/../\" can bypass that check. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-26",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/dir/../filename\" sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '/dir/../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for \"../\" at the beginning of the input, so a \"/../\" can bypass that check. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-27",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal \"../\" sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The 'directory/../../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one \"../\" sequence, so multiple \"../\" can bypass that check. Alternately, this manipulation could be used to bypass a check for \"../\" at the beginning of the pathname, moving up more than one directory level. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0298",
        "Phase": null,
        "Title": "Server allows remote attackers to cause a denial of service via certain HTTP GET requests containing a %2e%2e (encoded dot-dot), several \"/../\" sequences, or several \"../\" in a URI. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0298"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-28",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"..\\\" sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '..\\' manipulation is the canonical manipulation for operating systems that use \"\\\" as directory separators, such as Windows. However, it is also useful for bypassing path traversal protection schemes that only assume that the \"/\" separator is valid. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0661",
        "Phase": null,
        "Title": "\"\\\" not in denylist for web server, allowing path traversal attacks when the server is run in Windows and other OSes. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0661"
      },
      {
        "Id": "CVE-2002-0946",
        "Phase": null,
        "Title": "Arbitrary files may be read files via ..\\ (dot dot) sequences in an HTTP request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0946"
      },
      {
        "Id": "CVE-2002-1042",
        "Phase": null,
        "Title": "Directory traversal vulnerability in search engine for web server allows remote attackers to read arbitrary files via \"..\\\" sequences in queries. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1042"
      },
      {
        "Id": "CVE-2002-1209",
        "Phase": null,
        "Title": "Directory traversal vulnerability in FTP server allows remote attackers to read arbitrary files via \"..\\\" sequences in a GET request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1209"
      },
      {
        "Id": "CVE-2002-1178",
        "Phase": null,
        "Title": "Directory traversal vulnerability in servlet allows remote attackers to execute arbitrary commands via \"..\\\" sequences in an HTTP request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1178"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-29",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. This is similar to CWE-25, except using \"\\\" instead of \"/\". Sometimes a program checks for \"..\\\" at the beginning of the input, so a \"\\..\\\" can bypass that check. It is also useful for bypassing path traversal protection schemes that only assume that the \"/\" separator is valid. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1987",
        "Phase": null,
        "Title": "Protection mechanism checks for \"/..\" but doesn't account for Windows-specific \"\\..\" allowing read of arbitrary files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1987"
      },
      {
        "Id": "CVE-2005-2142",
        "Phase": null,
        "Title": "Directory traversal vulnerability in FTP server allows remote authenticated attackers to list arbitrary directories via a \"\\..\" sequence in an LS command. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2142"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-30",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\dir\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. This is similar to CWE-26, except using \"\\\" instead of \"/\". The '\\dir\\..\\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for \"..\\\" at the beginning of the input, so a \"\\..\\\" can bypass that check. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1987",
        "Phase": null,
        "Title": "Protection mechanism checks for \"/..\" but doesn't account for Windows-specific \"\\..\" allowing read of arbitrary files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1987"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-31",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir\\..\\..\\filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The 'dir\\..\\..\\filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one \"..\\\" sequence, so multiple \"..\\\" can bypass that check. Alternately, this manipulation could be used to bypass a check for \"..\\\" at the beginning of the pathname, moving up more than one directory level. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0160",
        "Phase": null,
        "Title": "The administration function in Access Control Server allows remote attackers to read HTML, Java class, and image files outside the web root via a \"..\\..\" sequence in the URL to port 2002. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0160"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-32",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '...' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to \"..\\..\" and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of \"./\" sequences, can ultimately produce valid \"..\" sequences due to a collapse into unsafe value (CWE-182). ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2001-0467",
        "Phase": null,
        "Title": "\"\\...\" in web server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0467"
      },
      {
        "Id": "CVE-2001-0615",
        "Phase": null,
        "Title": "\"...\" or \"....\" in chat server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0615"
      },
      {
        "Id": "CVE-2001-0963",
        "Phase": null,
        "Title": "\"...\" in cd command in FTP server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0963"
      },
      {
        "Id": "CVE-2001-1193",
        "Phase": null,
        "Title": "\"...\" in cd command in FTP server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1193"
      },
      {
        "Id": "CVE-2001-1131",
        "Phase": null,
        "Title": "\"...\" in cd command in FTP server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1131"
      },
      {
        "Id": "CVE-2001-0480",
        "Phase": null,
        "Title": "read of arbitrary files and directories using GET or CD with \"...\" in Windows-based FTP server. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0480"
      },
      {
        "Id": "CVE-2002-0288",
        "Phase": null,
        "Title": "read files using \".\" and Unicode-encoded \"/\" or \"\\\" characters in the URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0288"
      },
      {
        "Id": "CVE-2003-0313",
        "Phase": null,
        "Title": "Directory listing of web server using \"...\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0313"
      },
      {
        "Id": "CVE-2005-1658",
        "Phase": null,
        "Title": "Triple dot ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1658"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-33",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '....' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to \"..\\..\\..\" and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of \"./\" sequences, can ultimately produce valid \"..\" sequences due to a collapse into unsafe value (CWE-182). ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2000-0240",
        "Phase": null,
        "Title": "read files via \"/........../\" in URL ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0240"
      },
      {
        "Id": "CVE-2000-0773",
        "Phase": null,
        "Title": "read files via \"....\" in web server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0773"
      },
      {
        "Id": "CVE-1999-1082",
        "Phase": null,
        "Title": "read files via \"......\" in web server (doubled triple dot?) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1082"
      },
      {
        "Id": "CVE-2004-2121",
        "Phase": null,
        "Title": "read files via \"......\" in web server (doubled triple dot?) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2121"
      },
      {
        "Id": "CVE-2001-0491",
        "Phase": null,
        "Title": "multiple attacks using \"..\", \"...\", and \"....\" in different commands ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0491"
      },
      {
        "Id": "CVE-2001-0615",
        "Phase": null,
        "Title": "\"...\" or \"....\" in chat server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0615"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-34",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '....//' manipulation is useful for bypassing some path traversal protection schemes. If \"../\" is filtered in a sequential fashion, as done by some regular expression engines, then \"....//\" can collapse into the \"../\" unsafe value (CWE-182). It could also be useful when \"..\" is removed, if the operating system treats \"//\" and \"/\" as equivalent. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-1670",
        "Phase": null,
        "Title": "Mail server allows remote attackers to create arbitrary directories via a \"..\" or rename arbitrary files via a \"....//\" in user supplied parameters. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1670"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-35",
    "Title": " Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '.../...//' manipulation is useful for bypassing some path traversal protection schemes. If \"../\" is filtered in a sequential fashion, as done by some regular expression engines, then \".../...//\" can collapse into the \"../\" unsafe value (CWE-182). Removing the first \"../\" yields \"....//\"; the second removal yields \"../\". Depending on the algorithm, the software could be susceptible to CWE-34 but not CWE-35, or vice versa. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-2169",
        "Phase": null,
        "Title": "chain: \".../...//\" bypasses protection mechanism using regexp's that remove \"../\" resulting in collapse into an unsafe value \"../\" (CWE-182) and resultant path traversal. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2169"
      },
      {
        "Id": "CVE-2005-0202",
        "Phase": null,
        "Title": "\".../....///\" bypasses regexp's that remove \"./\" and \"../\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0202"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-36",
    "Title": " Absolute Path Traversal",
    "Description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory. ",
    "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-597",
        "Phase": null,
        "Title": null,
        "Description": "Absolute Path Traversal",
        "Url": "http://capec.mitre.org/data/definitions/597.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1345",
        "Phase": null,
        "Title": "Multiple FTP clients write arbitrary files via absolute paths in server responses ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1345"
      },
      {
        "Id": "CVE-2001-1269",
        "Phase": null,
        "Title": "ZIP file extractor allows full path ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1269"
      },
      {
        "Id": "CVE-2002-1818",
        "Phase": null,
        "Title": "Path traversal using absolute pathname ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1818"
      },
      {
        "Id": "CVE-2002-1913",
        "Phase": null,
        "Title": "Path traversal using absolute pathname ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1913"
      },
      {
        "Id": "CVE-2005-2147",
        "Phase": null,
        "Title": "Path traversal using absolute pathname ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2147"
      },
      {
        "Id": "CVE-2000-0614",
        "Phase": null,
        "Title": "Arbitrary files may be overwritten via compressed attachments that specify absolute path names for the decompressed output. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0614"
      },
      {
        "Id": "CVE-1999-1263",
        "Phase": null,
        "Title": "Mail client allows remote attackers to overwrite arbitrary files via an e-mail message containing a uuencoded attachment that specifies the full pathname for the file to be modified. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1263"
      },
      {
        "Id": "CVE-2003-0753",
        "Phase": null,
        "Title": "Remote attackers can read arbitrary files via a full pathname to the target file in config parameter. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0753"
      },
      {
        "Id": "CVE-2002-1525",
        "Phase": null,
        "Title": "Remote attackers can read arbitrary files via an absolute pathname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1525"
      },
      {
        "Id": "CVE-2001-0038",
        "Phase": null,
        "Title": "Remote attackers can read arbitrary files by specifying the drive letter in the requested URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0038"
      },
      {
        "Id": "CVE-2001-0255",
        "Phase": null,
        "Title": "FTP server allows remote attackers to list arbitrary directories by using the \"ls\" command and including the drive letter name (e.g. C:) in the requested pathname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0255"
      },
      {
        "Id": "CVE-2001-0933",
        "Phase": null,
        "Title": "FTP server allows remote attackers to list the contents of arbitrary drives via a ls command that includes the drive letter as an argument. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0933"
      },
      {
        "Id": "CVE-2002-0466",
        "Phase": null,
        "Title": "Server allows remote attackers to browse arbitrary directories via a full pathname in the arguments to certain dynamic pages. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0466"
      },
      {
        "Id": "CVE-2002-1483",
        "Phase": null,
        "Title": "Remote attackers can read arbitrary files via an HTTP request whose argument is a filename of the form \"C:\" (Drive letter), \"//absolute/path\", or \"..\" . ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1483"
      },
      {
        "Id": "CVE-2004-2488",
        "Phase": null,
        "Title": "FTP server read/access arbitrary files using \"C:\\\" filenames ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2488"
      },
      {
        "Id": "CVE-2001-0687",
        "Phase": null,
        "Title": "FTP server allows a remote attacker to retrieve privileged web server system information by specifying arbitrary paths in the UNC format (\\\\computername\\sharename). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0687"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-37",
      "CWE-38",
      "CWE-39",
      "CWE-40"
    ]
  },
  {
    "Id": "CWE-37",
    "Title": " Path Traversal",
    "Description": "A software system that accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1345",
        "Phase": null,
        "Title": "Multiple FTP clients write arbitrary files via absolute paths in server responses ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1345"
      },
      {
        "Id": "CVE-2001-1269",
        "Phase": null,
        "Title": "ZIP file extractor allows full path ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1269"
      },
      {
        "Id": "CVE-2002-1818",
        "Phase": null,
        "Title": "Path traversal using absolute pathname ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1818"
      },
      {
        "Id": "CVE-2002-1913",
        "Phase": null,
        "Title": "Path traversal using absolute pathname ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1913"
      },
      {
        "Id": "CVE-2005-2147",
        "Phase": null,
        "Title": "Path traversal using absolute pathname ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2147"
      },
      {
        "Id": "CVE-2000-0614",
        "Phase": null,
        "Title": "Arbitrary files may be overwritten via compressed attachments that specify absolute path names for the decompressed output. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0614"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-38",
    "Title": " Path Traversal",
    "Description": "A software system that accepts input in the form of a backslash absolute path ('\\absolute\\pathname\\here') without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-1999-1263",
        "Phase": null,
        "Title": "Mail client allows remote attackers to overwrite arbitrary files via an e-mail message containing a uuencoded attachment that specifies the full pathname for the file to be modified. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1263"
      },
      {
        "Id": "CVE-2003-0753",
        "Phase": null,
        "Title": "Remote attackers can read arbitrary files via a full pathname to the target file in config parameter. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0753"
      },
      {
        "Id": "CVE-2002-1525",
        "Phase": null,
        "Title": "Remote attackers can read arbitrary files via an absolute pathname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1525"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-39",
    "Title": " Path Traversal",
    "Description": "An attacker can inject a drive letter or Windows volume letter ('C:dirname') into a software system to potentially redirect access to an unintended location or arbitrary file. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2001-0038",
        "Phase": null,
        "Title": "Remote attackers can read arbitrary files by specifying the drive letter in the requested URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0038"
      },
      {
        "Id": "CVE-2001-0255",
        "Phase": null,
        "Title": "FTP server allows remote attackers to list arbitrary directories by using the \"ls\" command and including the drive letter name (e.g. C:) in the requested pathname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0255"
      },
      {
        "Id": "CVE-2001-0687",
        "Phase": null,
        "Title": "FTP server allows a remote attacker to retrieve privileged system information by specifying arbitrary paths. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0687"
      },
      {
        "Id": "CVE-2001-0933",
        "Phase": null,
        "Title": "FTP server allows remote attackers to list the contents of arbitrary drives via a ls command that includes the drive letter as an argument. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0933"
      },
      {
        "Id": "CVE-2002-0466",
        "Phase": null,
        "Title": "Server allows remote attackers to browse arbitrary directories via a full pathname in the arguments to certain dynamic pages. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0466"
      },
      {
        "Id": "CVE-2002-1483",
        "Phase": null,
        "Title": "Remote attackers can read arbitrary files via an HTTP request whose argument is a filename of the form \"C:\" (Drive letter), \"//absolute/path\", or \"..\" . ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1483"
      },
      {
        "Id": "CVE-2004-2488",
        "Phase": null,
        "Title": "FTP server read/access arbitrary files using \"C:\\\" filenames ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2488"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-40",
    "Title": " Path Traversal",
    "Description": "An attacker can inject a Windows UNC share ('\\\\UNC\\share\\name') into a software system to potentially redirect access to an unintended location or arbitrary file. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2001-0687",
        "Phase": null,
        "Title": "FTP server allows a remote attacker to retrieve privileged web server system information by specifying arbitrary paths in the UNC format (\\\\computername\\sharename). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0687"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-134",
    "Title": " Use of Externally-Controlled Format String",
    "Description": "The software uses a function that accepts a format string as an argument, but the format string originates from an external source. ",
    "ExtendedDescription": "When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems. It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Choose a language that is not subject to this flaw",
        "Description": "Choose a language that is not subject to this flaw. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well",
        "Description": "Ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117] ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Build and Compilation",
        "Title": "Heed the warnings of compilers and linkers, since they may alert you to improper usage",
        "Description": "Heed the warnings of compilers and linkers, since they may alert you to improper usage. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-135",
        "Phase": null,
        "Title": null,
        "Description": "Format String Injection",
        "Url": "http://capec.mitre.org/data/definitions/135.html"
      },
      {
        "Id": "CAPEC-67",
        "Phase": null,
        "Title": null,
        "Description": "String Format Overflow in syslog()",
        "Url": "http://capec.mitre.org/data/definitions/67.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1825",
        "Phase": null,
        "Title": "format string in Perl program ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1825"
      },
      {
        "Id": "CVE-2001-0717",
        "Phase": null,
        "Title": "format string in bad call to syslog function ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0717"
      },
      {
        "Id": "CVE-2002-0573",
        "Phase": null,
        "Title": "format string in bad call to syslog function ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0573"
      },
      {
        "Id": "CVE-2002-1788",
        "Phase": null,
        "Title": "format strings in NNTP server responses ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1788"
      },
      {
        "Id": "CVE-2006-2480",
        "Phase": null,
        "Title": "Format string vulnerability exploited by triggering errors or warnings, as demonstrated via format string specifiers in a .bmp filename. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2480"
      },
      {
        "Id": "CVE-2007-2027",
        "Phase": null,
        "Title": "Chain: untrusted search path enabling resultant format string by loading malicious internationalization messages ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2027"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "The programmer rarely intends for a format string to be externally-controlled at all. This weakness is frequently introduced in code that constructs log messages, where a constant format string is omitted. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "In cases such as localization and internationalization, the language-specific message repositories could be an avenue for exploitation, but the format string issue would be resultant, since attacker control of those repositories would also allow modification of message length, format, and content. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-374",
    "Title": " Passing Mutable Objects to an Untrusted Method",
    "Description": "The program sends non-cloned mutable data as an argument to a method or function. ",
    "ExtendedDescription": "The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Pass in data which should not be altered as constant or immutable",
        "Description": "Pass in data which should not be altered as constant or immutable. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Clone all mutable data before passing it into an external function ",
        "Description": "Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-375",
    "Title": " Returning a Mutable Object to an Untrusted Caller",
    "Description": "Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function. ",
    "ExtendedDescription": "In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Declare returned data which should not be altered as constant or immutable",
        "Description": "Declare returned data which should not be altered as constant or immutable. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Clone all mutable data before returning references to it",
        "Description": "Clone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-377",
    "Title": " Insecure Temporary File",
    "Description": "Creating and using insecure temporary files can leave application and system data vulnerable to attack. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-155",
        "Phase": null,
        "Title": null,
        "Description": "Screen Temporary Files for Sensitive Information",
        "Url": "http://capec.mitre.org/data/definitions/155.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-378",
      "CWE-379"
    ]
  },
  {
    "Id": "CWE-378",
    "Title": " Creation of Temporary File With Insecure Permissions",
    "Description": "Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack. ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Many contemporary languages have functions which properly handle this condition",
        "Description": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that you use proper file permissions",
        "Description": "Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Randomize temporary file names",
        "Description": "Randomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-379",
    "Title": " Creation of Temporary File in Directory with Insecure Permissions",
    "Description": "The software creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file. ",
    "ExtendedDescription": "On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Many contemporary languages have functions which properly handle this condition",
        "Description": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Try to store sensitive tempfiles in a directory which is not world readable -- i",
        "Description": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Avoid using vulnerable temp file functions",
        "Description": "Avoid using vulnerable temp file functions. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-402",
    "Title": " Transmission of Private Resources into a New Sphere ('Resource Leak')",
    "Description": "The software makes resources available to untrusted parties when those resources are only intended to be accessed by the software. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-403",
      "CWE-619"
    ]
  },
  {
    "Id": "CWE-403",
    "Title": " Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')",
    "Description": "A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors. ",
    "ExtendedDescription": "When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2003-0740",
        "Phase": null,
        "Title": "Server leaks a privileged file descriptor, allowing the server to be hijacked. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0740"
      },
      {
        "Id": "CVE-2004-1033",
        "Phase": null,
        "Title": "File descriptor leak allows read of restricted files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1033"
      },
      {
        "Id": "CVE-2000-0094",
        "Phase": null,
        "Title": "Access to restricted resource using modified file descriptor for stderr. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0094"
      },
      {
        "Id": "CVE-2002-0638",
        "Phase": null,
        "Title": "Open file descriptor used as alternate channel in complex race condition. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0638"
      },
      {
        "Id": "CVE-2003-0489",
        "Phase": null,
        "Title": "Program does not fully drop privileges after creating a file descriptor, which allows access to the descriptor via a separate vulnerability. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0489"
      },
      {
        "Id": "CVE-2003-0937",
        "Phase": null,
        "Title": "User bypasses restrictions by obtaining a file descriptor then calling setuid program, which does not close the descriptor. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0937"
      },
      {
        "Id": "CVE-2004-2215",
        "Phase": null,
        "Title": "Terminal manager does not properly close file descriptors, allowing attackers to access terminals of other users. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2215"
      },
      {
        "Id": "CVE-2006-5397",
        "Phase": null,
        "Title": "Module opens a file for reading twice, allowing attackers to read files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5397"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-619",
    "Title": " Dangling Database Cursor ('Cursor Injection')",
    "Description": "If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor \"dangling.\" ",
    "ExtendedDescription": "For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Close cursors immediately after access to them is complete",
        "Description": "Close cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "This issue is currently reported for unhandled exceptions, but it is theoretically possible any time the programmer does not close the cursor at the proper time. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-427",
    "Title": " Uncontrolled Search Path Element",
    "Description": "The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. ",
    "ExtendedDescription": "Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as \"/tmp\" or the current working directory. In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled: the directory from which the program has been loaded the current working directory. In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used. In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nHard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file",
        "Description": "Strategy:  Attack Surface Reduction\r\nHard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nWhen invoking other programs, specify those programs using fully-qualified pathnames",
        "Description": "Strategy:  Attack Surface Reduction\r\nWhen invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nRemove or restrict all environment settings before invoking other programs",
        "Description": "Strategy:  Attack Surface Reduction\r\nRemove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory",
        "Description": "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a denylist approach, it might not be a complete solution. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use other functions that require explicit paths",
        "Description": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-38",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging/Manipulating Configuration File Search Paths",
        "Url": "http://capec.mitre.org/data/definitions/38.html"
      },
      {
        "Id": "CAPEC-471",
        "Phase": null,
        "Title": null,
        "Description": "Search Order Hijacking",
        "Url": "http://capec.mitre.org/data/definitions/471.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2010-3402",
        "Phase": null,
        "Title": "\"DLL hijacking\" issue in document editor. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3402"
      },
      {
        "Id": "CVE-2010-3397",
        "Phase": null,
        "Title": "\"DLL hijacking\" issue in encryption software. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3397"
      },
      {
        "Id": "CVE-2010-3138",
        "Phase": null,
        "Title": "\"DLL hijacking\" issue in library used by multiple media players. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3138"
      },
      {
        "Id": "CVE-2010-3152",
        "Phase": null,
        "Title": "\"DLL hijacking\" issue in illustration program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3152"
      },
      {
        "Id": "CVE-2010-3147",
        "Phase": null,
        "Title": "\"DLL hijacking\" issue in address book. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3147"
      },
      {
        "Id": "CVE-2010-3135",
        "Phase": null,
        "Title": "\"DLL hijacking\" issue in network monitoring software. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3135"
      },
      {
        "Id": "CVE-2010-3131",
        "Phase": null,
        "Title": "\"DLL hijacking\" issue in web browser. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3131"
      },
      {
        "Id": "CVE-2010-1795",
        "Phase": null,
        "Title": "\"DLL hijacking\" issue in music player/organizer. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1795"
      },
      {
        "Id": "CVE-2002-1576",
        "Phase": null,
        "Title": "Product uses the current working directory to find and execute a program, which allows local users to gain privileges by creating a symlink that points to a malicious version of the program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1576"
      },
      {
        "Id": "CVE-1999-1461",
        "Phase": null,
        "Title": "Product trusts the PATH environmental variable to find and execute a program, which allows local users to obtain root access by modifying the PATH to point to a malicous version of that program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1461"
      },
      {
        "Id": "CVE-1999-1318",
        "Phase": null,
        "Title": "Software uses a search path that includes the current working directory (.), which allows local users to gain privileges via malicious programs. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1318"
      },
      {
        "Id": "CVE-2003-0579",
        "Phase": null,
        "Title": "Admin software trusts the user-supplied -uv.install command line option to find and execute the uv.install program, which allows local users to gain privileges by providing a pathname that is under control of the user. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0579"
      },
      {
        "Id": "CVE-2000-0854",
        "Phase": null,
        "Title": "When a document is opened, the directory of that document is first used to locate DLLs , which could allow an attacker to execute arbitrary commands by inserting malicious DLLs into the same directory as the document. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0854"
      },
      {
        "Id": "CVE-2001-0943",
        "Phase": null,
        "Title": "Database trusts the PATH environment variable to find and execute programs, which allows local users to modify the PATH to point to malicious programs. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0943"
      },
      {
        "Id": "CVE-2001-0942",
        "Phase": null,
        "Title": "Database uses an environment variable to find and execute a program, which allows local users to execute arbitrary programs by changing the environment variable. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0942"
      },
      {
        "Id": "CVE-2001-0507",
        "Phase": null,
        "Title": "Server uses relative paths to find system files that will run in-process, which allows local users to gain privileges via a malicious file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0507"
      },
      {
        "Id": "CVE-2002-2017",
        "Phase": null,
        "Title": "Product allows local users to execute arbitrary code by setting an environment variable to reference a malicious program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2017"
      },
      {
        "Id": "CVE-1999-0690",
        "Phase": null,
        "Title": "Product includes the current directory in root's PATH variable. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0690"
      },
      {
        "Id": "CVE-2001-0912",
        "Phase": null,
        "Title": "Error during packaging causes product to include a hard-coded, non-standard directory in search path. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0912"
      },
      {
        "Id": "CVE-2001-0289",
        "Phase": null,
        "Title": "Product searches current working directory for configuration file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0289"
      },
      {
        "Id": "CVE-2005-1705",
        "Phase": null,
        "Title": "Product searches current working directory for configuration file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1705"
      },
      {
        "Id": "CVE-2005-1307",
        "Phase": null,
        "Title": "Product executable other program from current working directory. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1307"
      },
      {
        "Id": "CVE-2002-2040",
        "Phase": null,
        "Title": "Untrusted path. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2040"
      },
      {
        "Id": "CVE-2005-2072",
        "Phase": null,
        "Title": "Modification of trusted environment variable leads to untrusted path vulnerability. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2072"
      },
      {
        "Id": "CVE-2005-1632",
        "Phase": null,
        "Title": "Product searches /tmp for modules before other paths. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1632"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-428",
    "Title": " Unquoted Search Path or Element",
    "Description": "The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path. ",
    "ExtendedDescription": "If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as \"C:\\Program.exe\" to be run by a privileged program making use of WinExec. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Properly quote the full search path before executing a program on the system",
        "Description": "Properly quote the full search path before executing a program on the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-1185",
        "Phase": null,
        "Title": "Small handful of others. Program doesn't quote the \"C:\\Program Files\\\" path when calling a program to be executed - or any other path with a directory or file whose name contains a space - so attacker can put a malicious program.exe into C:. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1185"
      },
      {
        "Id": "CVE-2005-2938",
        "Phase": null,
        "Title": "CreateProcess() and CreateProcessAsUser() can be misused by applications to allow \"program.exe\" style attacks in C: ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2938"
      },
      {
        "Id": "CVE-2000-1128",
        "Phase": null,
        "Title": "Applies to \"Common Files\" folder, with a malicious common.exe, instead of \"Program Files\"/program.exe. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1128"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-491",
    "Title": " Public cloneable() Method Without Final ('Object Hijack')",
    "Description": "A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Make the cloneable() method final",
        "Description": "Make the cloneable() method final. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-492",
    "Title": " Use of Inner Class Containing Sensitive Data",
    "Description": "Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers. ",
    "ExtendedDescription": "Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in its enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways",
        "Description": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Inner Classes do not provide security",
        "Description": "Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-493",
    "Title": " Critical Public Variable Without Final Modifier",
    "Description": "The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values. ",
    "ExtendedDescription": "If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet",
        "Description": "Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-500"
    ]
  },
  {
    "Id": "CWE-500",
    "Title": " Public Static Field Not Marked Final",
    "Description": "An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways. ",
    "ExtendedDescription": "Public static variables can be read without an accessor and changed without a mutator by any classes in the application. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Clearly identify the scope for all critical data elements, including whether they should be regarded as static",
        "Description": "Clearly identify the scope for all critical data elements, including whether they should be regarded as static. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Make any static fields private and constant",
        "Description": "Make any static fields private and constant. \r\nA constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-522",
    "Title": " Insufficiently Protected Credentials",
    "Description": "The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use an appropriate security mechanism to protect the credentials",
        "Description": "Use an appropriate security mechanism to protect the credentials. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Make appropriate use of cryptography to protect the credentials",
        "Description": "Make appropriate use of cryptography to protect the credentials. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use industry standards to protect the credentials (e",
        "Description": "Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-102",
        "Phase": null,
        "Title": null,
        "Description": "Session Sidejacking",
        "Url": "http://capec.mitre.org/data/definitions/102.html"
      },
      {
        "Id": "CAPEC-474",
        "Phase": null,
        "Title": null,
        "Description": "Signature Spoofing by Key Theft",
        "Url": "http://capec.mitre.org/data/definitions/474.html"
      },
      {
        "Id": "CAPEC-50",
        "Phase": null,
        "Title": null,
        "Description": "Password Recovery Exploitation",
        "Url": "http://capec.mitre.org/data/definitions/50.html"
      },
      {
        "Id": "CAPEC-509",
        "Phase": null,
        "Title": null,
        "Description": "Kerberoasting",
        "Url": "http://capec.mitre.org/data/definitions/509.html"
      },
      {
        "Id": "CAPEC-551",
        "Phase": null,
        "Title": null,
        "Description": "Modify Existing Service",
        "Url": "http://capec.mitre.org/data/definitions/551.html"
      },
      {
        "Id": "CAPEC-555",
        "Phase": null,
        "Title": null,
        "Description": "Remote Services with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/555.html"
      },
      {
        "Id": "CAPEC-560",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Domain Credentials",
        "Url": "http://capec.mitre.org/data/definitions/560.html"
      },
      {
        "Id": "CAPEC-561",
        "Phase": null,
        "Title": null,
        "Description": "Windows Admin Shares with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/561.html"
      },
      {
        "Id": "CAPEC-600",
        "Phase": null,
        "Title": null,
        "Description": "Credential Stuffing",
        "Url": "http://capec.mitre.org/data/definitions/600.html"
      },
      {
        "Id": "CAPEC-644",
        "Phase": null,
        "Title": null,
        "Description": "Use of Captured Hashes (Pass The Hash)",
        "Url": "http://capec.mitre.org/data/definitions/644.html"
      },
      {
        "Id": "CAPEC-645",
        "Phase": null,
        "Title": null,
        "Description": "Use of Captured Tickets (Pass The Ticket)",
        "Url": "http://capec.mitre.org/data/definitions/645.html"
      },
      {
        "Id": "CAPEC-652",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Kerberos Credentials",
        "Url": "http://capec.mitre.org/data/definitions/652.html"
      },
      {
        "Id": "CAPEC-653",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Windows Credentials",
        "Url": "http://capec.mitre.org/data/definitions/653.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2007-0681",
        "Phase": null,
        "Title": "Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0681"
      },
      {
        "Id": "CVE-2000-0944",
        "Phase": null,
        "Title": "Web application password change utility doesn't check the original password. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0944"
      },
      {
        "Id": "CVE-2005-3435",
        "Phase": null,
        "Title": "product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435"
      },
      {
        "Id": "CVE-2005-0408",
        "Phase": null,
        "Title": "chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0408"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-256",
      "CWE-257",
      "CWE-260",
      "CWE-523",
      "CWE-549"
    ]
  },
  {
    "Id": "CWE-256",
    "Title": " Unprotected Storage of Credentials",
    "Description": "Storing a password in plaintext may result in a system compromise. ",
    "ExtendedDescription": "Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Avoid storing passwords in easily accessible locations",
        "Description": "Avoid storing passwords in easily accessible locations. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext",
        "Description": "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": null,
        "Title": "A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily",
        "Description": "A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily. \r\nEffectiveness: None",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this belief makes an attacker's job easier. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-257",
    "Title": " Storing Passwords in a Recoverable Format",
    "Description": "The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts. ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use strong, non-reversible encryption to protect stored passwords",
        "Description": "Use strong, non-reversible encryption to protect stored passwords. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-49",
        "Phase": null,
        "Title": null,
        "Description": "Password Brute Forcing",
        "Url": "http://capec.mitre.org/data/definitions/49.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-260",
    "Title": " Password in Configuration File",
    "Description": "The software stores a password in a configuration file that might be accessible to actors who do not know the password. ",
    "ExtendedDescription": "This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Avoid storing passwords in easily accessible locations",
        "Description": "Avoid storing passwords in easily accessible locations. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext",
        "Description": "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-13",
      "CWE-258",
      "CWE-555"
    ]
  },
  {
    "Id": "CWE-13",
    "Title": " ASP.NET Misconfiguration",
    "Description": "Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files",
        "Description": "Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-523",
    "Title": " Unprotected Transport of Credentials",
    "Description": "Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Operation; System Configuration",
        "Title": "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information",
        "Description": "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-102",
        "Phase": null,
        "Title": null,
        "Description": "Session Sidejacking",
        "Url": "http://capec.mitre.org/data/definitions/102.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-549",
    "Title": " Missing Password Field Masking",
    "Description": "The software does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Requirements",
        "Title": "Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information",
        "Description": "Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-555",
    "Title": " J2EE Misconfiguration",
    "Description": "The J2EE application stores a plaintext password in a configuration file. ",
    "ExtendedDescription": "Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not hardwire passwords into your software",
        "Description": "Do not hardwire passwords into your software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use industry standard libraries to encrypt passwords before storage in configuration files",
        "Description": "Use industry standard libraries to encrypt passwords before storage in configuration files. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-524",
    "Title": " Use of Cache Containing Sensitive Information",
    "Description": "The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere. ",
    "ExtendedDescription": "Applications may use caches to improve efficiency when communicating with remote entities or performing intensive calculations. A cache maintains a pool of objects, threads, connections, pages, financial data, passwords, or other resources to minimize the time it takes to initialize and access these resources. If the cache is accessible to unauthorized actors, attackers can read the cache and obtain this sensitive information. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Protect information stored in cache",
        "Description": "Protect information stored in cache. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not store unnecessarily sensitive information in the cache",
        "Description": "Do not store unnecessarily sensitive information in the cache. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Consider using encryption in the cache",
        "Description": "Consider using encryption in the cache. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-204",
        "Phase": null,
        "Title": null,
        "Description": "Lifting Sensitive Data Embedded in Cache",
        "Url": "http://capec.mitre.org/data/definitions/204.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-525"
    ]
  },
  {
    "Id": "CWE-525",
    "Title": " Use of Web Browser Cache Containing Sensitive Information",
    "Description": "The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Protect information stored in cache",
        "Description": "Protect information stored in cache. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Use a restrictive caching policy for forms and web pages that potentially contain sensitive information",
        "Description": "Use a restrictive caching policy for forms and web pages that potentially contain sensitive information. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not store unnecessarily sensitive information in the cache",
        "Description": "Do not store unnecessarily sensitive information in the cache. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Consider using encryption in the cache",
        "Description": "Consider using encryption in the cache. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-37",
        "Phase": null,
        "Title": null,
        "Description": "Retrieve Embedded Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/37.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-552",
    "Title": " Files or Directories Accessible to External Parties",
    "Description": "The product makes files or directories accessible to unauthorized actors, even though they should not be. ",
    "ExtendedDescription": "Web servers, FTP servers, and similar servers may store a set of files underneath a \"root\" directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-150",
        "Phase": null,
        "Title": null,
        "Description": "Collect Data from Common Resource Locations",
        "Url": "http://capec.mitre.org/data/definitions/150.html"
      },
      {
        "Id": "CAPEC-639",
        "Phase": null,
        "Title": null,
        "Description": "Probe System Files",
        "Url": "http://capec.mitre.org/data/definitions/639.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-219",
      "CWE-220",
      "CWE-527",
      "CWE-528",
      "CWE-529",
      "CWE-530",
      "CWE-539",
      "CWE-553"
    ]
  },
  {
    "Id": "CWE-219",
    "Title": " Storage of File with Sensitive Data Under Web Root",
    "Description": "The application stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties. ",
    "ExtendedDescription": "Besides public-facing web pages and code, applications may store sensitive data, code that is not directly invoked, or other files under the web document root of the web server. If the server is not configured or otherwise used to prevent direct access to those files, then attackers may obtain this sensitive data. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Implementation; System Configuration",
        "Title": "Avoid storing information under the web root directory",
        "Description": "Avoid storing information under the web root directory. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory",
        "Description": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-1835",
        "Phase": null,
        "Title": "Data file under web root. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1835"
      },
      {
        "Id": "CVE-2005-2217",
        "Phase": null,
        "Title": "Data file under web root. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2217"
      },
      {
        "Id": "CVE-2002-1449",
        "Phase": null,
        "Title": "Username/password in data file under web root. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1449"
      },
      {
        "Id": "CVE-2002-0943",
        "Phase": null,
        "Title": "Database file under web root. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0943"
      },
      {
        "Id": "CVE-2005-1645",
        "Phase": null,
        "Title": "database file under web root. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1645"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-433"
    ]
  },
  {
    "Id": "CWE-433",
    "Title": " Unparsed Raw Web Content Delivery",
    "Description": "The software stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server. ",
    "ExtendedDescription": "If code is stored in a file with an extension such as \".inc\" or \".pl\", and the web server does not have a handler for that extension, then the server will likely send the contents of the file directly to the requester without the pre-processing that was expected. When that file contains sensitive information such as database credentials, this may allow the attacker to compromise the application or associated components. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Perform a type check before interpreting files",
        "Description": "Perform a type check before interpreting files. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not store sensitive information in files which may be misinterpreted",
        "Description": "Do not store sensitive information in files which may be misinterpreted. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1886",
        "Phase": null,
        "Title": "\".inc\" file stored under web document root and returned unparsed by the server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1886"
      },
      {
        "Id": "CVE-2002-2065",
        "Phase": null,
        "Title": "\".inc\" file stored under web document root and returned unparsed by the server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2065"
      },
      {
        "Id": "CVE-2005-2029",
        "Phase": null,
        "Title": "\".inc\" file stored under web document root and returned unparsed by the server ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2029"
      },
      {
        "Id": "CVE-2001-0330",
        "Phase": null,
        "Title": "direct request to .pl file leaves it unparsed ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0330"
      },
      {
        "Id": "CVE-2002-0614",
        "Phase": null,
        "Title": ".inc file ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0614"
      },
      {
        "Id": "CVE-2004-2353",
        "Phase": null,
        "Title": "unparsed config.conf file ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2353"
      },
      {
        "Id": "CVE-2007-3365",
        "Phase": null,
        "Title": "Chain: uppercase file extensions causes web server to return script source code instead of executing the script. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3365"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-220",
    "Title": " Storage of File With Sensitive Data Under FTP Root",
    "Description": "The application stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Implementation; System Configuration",
        "Title": "Avoid storing information under the FTP root directory",
        "Description": "Avoid storing information under the FTP root directory. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory",
        "Description": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-527",
    "Title": " Exposure of Version-Control Repository to an Unauthorized Control Sphere",
    "Description": "The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors. ",
    "ExtendedDescription": "Version control repositories such as CVS or git store version-specific metadata and other details within subdirectories. If these subdirectories are stored on a web server or added to an archive, then these could be used by an attacker. This information may include usernames, filenames, path root, IP addresses, and detailed \"diff\" data about how files have been changed - which could reveal source code snippets that were never intended to be made public. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Operation; Distribution; System Configuration",
        "Title": "Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed",
        "Description": "Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-528",
    "Title": " Exposure of Core Dump File to an Unauthorized Control Sphere",
    "Description": "The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "Protect the core dump files from unauthorized access",
        "Description": "Protect the core dump files from unauthorized access. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-529",
    "Title": " Exposure of Access Control List Files to an Unauthorized Control Sphere",
    "Description": "The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere. ",
    "ExtendedDescription": "Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "Protect access control list files",
        "Description": "Protect access control list files. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-530",
    "Title": " Exposure of Backup File to an Unauthorized Control Sphere",
    "Description": "A backup file is stored in a directory or archive that is made accessible to unauthorized actors. ",
    "ExtendedDescription": "Often, older backup files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Policy",
        "Title": "Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot",
        "Description": "Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-539",
    "Title": " Use of Persistent Cookies Containing Sensitive Information",
    "Description": "The web application uses persistent cookies, but the cookies contain sensitive information. ",
    "ExtendedDescription": "Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory and are not stored anywhere, but persistent cookies are stored on the browser's hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not store sensitive information in persistent cookies",
        "Description": "Do not store sensitive information in persistent cookies. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-21",
        "Phase": null,
        "Title": null,
        "Description": "Exploitation of Trusted Identifiers",
        "Url": "http://capec.mitre.org/data/definitions/21.html"
      },
      {
        "Id": "CAPEC-31",
        "Phase": null,
        "Title": null,
        "Description": "Accessing/Intercepting/Modifying HTTP Cookies",
        "Url": "http://capec.mitre.org/data/definitions/31.html"
      },
      {
        "Id": "CAPEC-39",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Opaque Client-based Data Tokens",
        "Url": "http://capec.mitre.org/data/definitions/39.html"
      },
      {
        "Id": "CAPEC-59",
        "Phase": null,
        "Title": null,
        "Description": "Session Credential Falsification through Prediction",
        "Url": "http://capec.mitre.org/data/definitions/59.html"
      },
      {
        "Id": "CAPEC-60",
        "Phase": null,
        "Title": null,
        "Description": "Reusing Session IDs (aka Session Replay)",
        "Url": "http://capec.mitre.org/data/definitions/60.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-553",
    "Title": " Command Shell in Externally Accessible Directory",
    "Description": "A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Installation; System Configuration",
        "Title": "Remove any Shells accessible under the web root folder and children directories",
        "Description": "Remove any Shells accessible under the web root folder and children directories. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-650",
        "Phase": null,
        "Title": null,
        "Description": "Upload a Web Shell to a Web Server",
        "Url": "http://capec.mitre.org/data/definitions/650.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-582",
    "Title": " Array Declared Public, Final, and Static",
    "Description": "The program declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified. ",
    "ExtendedDescription": "Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "In most situations the array should be made private",
        "Description": "In most situations the array should be made private. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-583",
    "Title": " finalize() Method Declared Public",
    "Description": "The program violates secure coding principles for mobile code by declaring a finalize() method public. ",
    "ExtendedDescription": "A program should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access",
        "Description": "If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-608",
    "Title": " Struts",
    "Description": "An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Make all fields private",
        "Description": "Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-642",
    "Title": " External Control of Critical State Data",
    "Description": "The software stores security-critical state information about its users, or the software itself, in a location that is accessible to unauthorized actors. ",
    "ExtendedDescription": "If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed. State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an \"authenticated=true\" cookie. An attacker may simply create this cookie in order to bypass the authentication. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Understand all the potential locations that are accessible to attackers",
        "Description": "Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Attack Surface Reduction\r\nStore state information and sensitive data on the server side only",
        "Description": "Strategy:  Attack Surface Reduction\r\nStore state information and sensitive data on the server side only. \r\nEnsure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions. \r\nIf information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Store state information on the server side only",
        "Description": "Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nWith a stateless protocol such as HTTP, use some frameworks can maintain the state for you. \r\nExamples include ASP.NET View State and the OWASP ESAPI Session Management feature. \r\nBe careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Operation; Implementation",
        "Title": "Strategy:  Environment Hardening\r\nWhen using PHP, configure the application so that it does not use register_globals",
        "Description": "Strategy:  Environment Hardening\r\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use automated static analysis tools that target this type of weakness",
        "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection",
        "Description": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session",
        "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-21",
        "Phase": null,
        "Title": null,
        "Description": "Exploitation of Trusted Identifiers",
        "Url": "http://capec.mitre.org/data/definitions/21.html"
      },
      {
        "Id": "CAPEC-31",
        "Phase": null,
        "Title": null,
        "Description": "Accessing/Intercepting/Modifying HTTP Cookies",
        "Url": "http://capec.mitre.org/data/definitions/31.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2005-2428",
        "Phase": null,
        "Title": "Mail client stores password hashes for unrelated accounts in a hidden form field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2428"
      },
      {
        "Id": "CVE-2008-0306",
        "Phase": null,
        "Title": "Privileged program trusts user-specified environment variable to modify critical configuration settings. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0306"
      },
      {
        "Id": "CVE-1999-0073",
        "Phase": null,
        "Title": "Telnet daemon allows remote clients to specify critical environment variables for the server, leading to code execution. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0073"
      },
      {
        "Id": "CVE-2007-4432",
        "Phase": null,
        "Title": "Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4432"
      },
      {
        "Id": "CVE-2006-7191",
        "Phase": null,
        "Title": "Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7191"
      },
      {
        "Id": "CVE-2008-5738",
        "Phase": null,
        "Title": "Calendar application allows bypass of authentication by setting a certain cookie value to 1. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5738"
      },
      {
        "Id": "CVE-2008-5642",
        "Phase": null,
        "Title": "Setting of a language preference in a cookie enables path traversal attack. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5642"
      },
      {
        "Id": "CVE-2008-5125",
        "Phase": null,
        "Title": "Application allows admin privileges by setting a cookie value to \"admin.\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5125"
      },
      {
        "Id": "CVE-2008-5065",
        "Phase": null,
        "Title": "Application allows admin privileges by setting a cookie value to \"admin.\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5065"
      },
      {
        "Id": "CVE-2008-4752",
        "Phase": null,
        "Title": "Application allows admin privileges by setting a cookie value to \"admin.\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4752"
      },
      {
        "Id": "CVE-2000-0102",
        "Phase": null,
        "Title": "Shopping cart allows price modification via hidden form field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0102"
      },
      {
        "Id": "CVE-2000-0253",
        "Phase": null,
        "Title": "Shopping cart allows price modification via hidden form field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0253"
      },
      {
        "Id": "CVE-2008-1319",
        "Phase": null,
        "Title": "Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1319"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-15",
      "CWE-73",
      "CWE-426",
      "CWE-472",
      "CWE-565"
    ]
  },
  {
    "Id": "CWE-15",
    "Title": " External Control of System or Configuration Setting",
    "Description": "One or more system settings or configuration elements can be externally controlled by a user. ",
    "ExtendedDescription": "Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete",
        "Description": "Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "In general, do not allow user-provided or otherwise untrusted data to control sensitive values",
        "Description": "In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-13",
        "Phase": null,
        "Title": null,
        "Description": "Subverting Environment Variable Values",
        "Url": "http://capec.mitre.org/data/definitions/13.html"
      },
      {
        "Id": "CAPEC-146",
        "Phase": null,
        "Title": null,
        "Description": "XML Schema Poisoning",
        "Url": "http://capec.mitre.org/data/definitions/146.html"
      },
      {
        "Id": "CAPEC-176",
        "Phase": null,
        "Title": null,
        "Description": "Configuration/Environment Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/176.html"
      },
      {
        "Id": "CAPEC-203",
        "Phase": null,
        "Title": null,
        "Description": "Manipulate Registry Information",
        "Url": "http://capec.mitre.org/data/definitions/203.html"
      },
      {
        "Id": "CAPEC-270",
        "Phase": null,
        "Title": null,
        "Description": "Modification of Registry Run Keys",
        "Url": "http://capec.mitre.org/data/definitions/270.html"
      },
      {
        "Id": "CAPEC-271",
        "Phase": null,
        "Title": null,
        "Description": "Schema Poisoning",
        "Url": "http://capec.mitre.org/data/definitions/271.html"
      },
      {
        "Id": "CAPEC-69",
        "Phase": null,
        "Title": null,
        "Description": "Target Programs with Elevated Privileges",
        "Url": "http://capec.mitre.org/data/definitions/69.html"
      },
      {
        "Id": "CAPEC-76",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Web Input to File System Calls",
        "Url": "http://capec.mitre.org/data/definitions/76.html"
      },
      {
        "Id": "CAPEC-77",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating User-Controlled Variables",
        "Url": "http://capec.mitre.org/data/definitions/77.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-73",
    "Title": " External Control of File Name or Path",
    "Description": "The software allows user input to control or influence paths or file names that are used in filesystem operations. ",
    "ExtendedDescription": "This could allow an attacker to access or modify system files or other files that are critical to the application. Path manipulation errors occur when the following two conditions are met: 1. An attacker can specify a path used in an operation on the filesystem. 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs",
        "Description": "When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap provide this capability. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system",
        "Description": "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory. \r\nExamples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection. \r\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. \r\nBe careful to avoid CWE-243 and other weaknesses related to jails. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434. \r\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"",
        "Description": "Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Installation; Operation",
        "Title": "Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack",
        "Description": "Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Operation; Implementation",
        "Title": "If you are using PHP, configure your application so that it does not use register_globals",
        "Description": "If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use automated static analysis tools that target this type of weakness",
        "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection",
        "Description": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session",
        "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-13",
        "Phase": null,
        "Title": null,
        "Description": "Subverting Environment Variable Values",
        "Url": "http://capec.mitre.org/data/definitions/13.html"
      },
      {
        "Id": "CAPEC-267",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/267.html"
      },
      {
        "Id": "CAPEC-64",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/64.html"
      },
      {
        "Id": "CAPEC-72",
        "Phase": null,
        "Title": null,
        "Description": "URL Encoding",
        "Url": "http://capec.mitre.org/data/definitions/72.html"
      },
      {
        "Id": "CAPEC-76",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Web Input to File System Calls",
        "Url": "http://capec.mitre.org/data/definitions/76.html"
      },
      {
        "Id": "CAPEC-78",
        "Phase": null,
        "Title": null,
        "Description": "Using Escaped Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/78.html"
      },
      {
        "Id": "CAPEC-79",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/79.html"
      },
      {
        "Id": "CAPEC-80",
        "Phase": null,
        "Title": null,
        "Description": "Using UTF-8 Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/80.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-5748",
        "Phase": null,
        "Title": "Chain: external control of values for user's desired language and theme enables path traversal. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5748"
      },
      {
        "Id": "CVE-2008-5764",
        "Phase": null,
        "Title": "Chain: external control of user's target language enables remote file inclusion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5764"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-114"
    ]
  },
  {
    "Id": "CWE-114",
    "Title": " Process Control",
    "Description": "Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker. ",
    "ExtendedDescription": "Process control vulnerabilities take two forms: 1. An attacker can change the command that the program executes: the attacker explicitly controls what the command is. 2. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nLibraries that are loaded should be well understood and come from a trusted source",
        "Description": "Strategy:  Libraries or Frameworks\r\nLibraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-108",
        "Phase": null,
        "Title": null,
        "Description": "Command Line Execution through SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/108.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-426",
    "Title": " Untrusted Search Path",
    "Description": "The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control. ",
    "ExtendedDescription": "This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the application uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted application would then execute. The problem extends to any type of critical resource that the application trusts. Some of the most common variants of untrusted search path are: In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library. In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nHard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file",
        "Description": "Strategy:  Attack Surface Reduction\r\nHard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When invoking other programs, specify those programs using fully-qualified pathnames",
        "Description": "When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Remove or restrict all environment settings before invoking other programs",
        "Description": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory",
        "Description": "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use other functions that require explicit paths",
        "Description": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-38",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging/Manipulating Configuration File Search Paths",
        "Url": "http://capec.mitre.org/data/definitions/38.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-1999-1120",
        "Phase": null,
        "Title": "Application relies on its PATH environment variable to find and execute program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1120"
      },
      {
        "Id": "CVE-2008-1810",
        "Phase": null,
        "Title": "Database application relies on its PATH environment variable to find and execute program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1810"
      },
      {
        "Id": "CVE-2007-2027",
        "Phase": null,
        "Title": "Chain: untrusted search path enabling resultant format string by loading malicious internationalization messages. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2027"
      },
      {
        "Id": "CVE-2008-3485",
        "Phase": null,
        "Title": "Untrusted search path using malicious .EXE in Windows environment. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3485"
      },
      {
        "Id": "CVE-2008-2613",
        "Phase": null,
        "Title": "setuid program allows compromise using path that finds and loads a malicious library. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2613"
      },
      {
        "Id": "CVE-2008-1319",
        "Phase": null,
        "Title": "Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1319"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-472",
    "Title": " External Control of Assumed-Immutable Web Parameter",
    "Description": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields. ",
    "ExtendedDescription": "If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input. For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-146",
        "Phase": null,
        "Title": null,
        "Description": "XML Schema Poisoning",
        "Url": "http://capec.mitre.org/data/definitions/146.html"
      },
      {
        "Id": "CAPEC-226",
        "Phase": null,
        "Title": null,
        "Description": "Session Credential Falsification through Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/226.html"
      },
      {
        "Id": "CAPEC-31",
        "Phase": null,
        "Title": null,
        "Description": "Accessing/Intercepting/Modifying HTTP Cookies",
        "Url": "http://capec.mitre.org/data/definitions/31.html"
      },
      {
        "Id": "CAPEC-39",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Opaque Client-based Data Tokens",
        "Url": "http://capec.mitre.org/data/definitions/39.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0108",
        "Phase": null,
        "Title": "Forum product allows spoofed messages of other users via hidden form fields for name and e-mail address. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0108"
      },
      {
        "Id": "CVE-2000-0253",
        "Phase": null,
        "Title": "Shopping cart allows price modification via hidden form field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0253"
      },
      {
        "Id": "CVE-2000-0254",
        "Phase": null,
        "Title": "Shopping cart allows price modification via hidden form field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0254"
      },
      {
        "Id": "CVE-2000-0926",
        "Phase": null,
        "Title": "Shopping cart allows price modification via hidden form field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0926"
      },
      {
        "Id": "CVE-2000-0101",
        "Phase": null,
        "Title": "Shopping cart allows price modification via hidden form field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0101"
      },
      {
        "Id": "CVE-2000-0102",
        "Phase": null,
        "Title": "Shopping cart allows price modification via hidden form field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0102"
      },
      {
        "Id": "CVE-2000-0758",
        "Phase": null,
        "Title": "Allows admin access by modifying value of form field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0758"
      },
      {
        "Id": "CVE-2002-1880",
        "Phase": null,
        "Title": "Read messages by modifying message ID parameter. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1880"
      },
      {
        "Id": "CVE-2000-1234",
        "Phase": null,
        "Title": "Send email to arbitrary users by modifying email parameter. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1234"
      },
      {
        "Id": "CVE-2005-1652",
        "Phase": null,
        "Title": "Authentication bypass by setting a parameter. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1652"
      },
      {
        "Id": "CVE-2005-1784",
        "Phase": null,
        "Title": "Product does not check authorization for configuration change admin script, leading to password theft via modified e-mail address field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1784"
      },
      {
        "Id": "CVE-2005-2314",
        "Phase": null,
        "Title": "Logic error leads to password disclosure. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2314"
      },
      {
        "Id": "CVE-2005-1682",
        "Phase": null,
        "Title": "Modification of message number parameter allows attackers to read other people's messages. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1682"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-565",
    "Title": " Reliance on Cookies without Validation and Integrity Checking",
    "Description": "The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user. ",
    "ExtendedDescription": "Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Avoid using cookie data for a security-related decision",
        "Description": "Avoid using cookie data for a security-related decision. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Perform thorough input validation (i",
        "Description": "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Add integrity checks to detect tampering",
        "Description": "Add integrity checks to detect tampering. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks",
        "Description": "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-226",
        "Phase": null,
        "Title": null,
        "Description": "Session Credential Falsification through Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/226.html"
      },
      {
        "Id": "CAPEC-31",
        "Phase": null,
        "Title": null,
        "Description": "Accessing/Intercepting/Modifying HTTP Cookies",
        "Url": "http://capec.mitre.org/data/definitions/31.html"
      },
      {
        "Id": "CAPEC-39",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Opaque Client-based Data Tokens",
        "Url": "http://capec.mitre.org/data/definitions/39.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-784"
    ]
  },
  {
    "Id": "CWE-784",
    "Title": " Reliance on Cookies without Validation and Integrity Checking in a Security Decision",
    "Description": "The application uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user. ",
    "ExtendedDescription": "Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Avoid using cookie data for a security-related decision",
        "Description": "Avoid using cookie data for a security-related decision. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Perform thorough input validation (i",
        "Description": "Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Add integrity checks to detect tampering",
        "Description": "Add integrity checks to detect tampering. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks",
        "Description": "Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2009-1549",
        "Phase": null,
        "Title": "Attacker can bypass authentication by setting a cookie to a specific value. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1549"
      },
      {
        "Id": "CVE-2009-1619",
        "Phase": null,
        "Title": "Attacker can bypass authentication and gain admin privileges by setting an \"admin\" cookie to 1. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1619"
      },
      {
        "Id": "CVE-2009-0864",
        "Phase": null,
        "Title": "Content management system allows admin privileges by setting a \"login\" cookie to \"OK.\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0864"
      },
      {
        "Id": "CVE-2008-5784",
        "Phase": null,
        "Title": "e-dating application allows admin privileges by setting the admin cookie to 1. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5784"
      },
      {
        "Id": "CVE-2008-6291",
        "Phase": null,
        "Title": "Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to \"admin.\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6291"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-732",
    "Title": " Incorrect Permission Assignment for Critical Resource",
    "Description": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors. ",
    "ExtendedDescription": "When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party",
        "Description": "When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Divide the software into anonymous, normal, privileged, and administrative areas",
        "Description": "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207] \r\nEffectiveness: Moderate\r\nNote: This can be an effective strategy. However, in practice, it may be difficult or time consuming to define these areas when there are many different resources or user types, or if the applications features change rapidly.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Sandbox or Jail\r\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system",
        "Description": "Strategy:  Sandbox or Jail\r\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. \r\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. \r\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. \r\nBe careful to avoid CWE-243 and other weaknesses related to jails. \r\nEffectiveness: Limited\r\nNote: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Installation",
        "Title": "During program startup, explicitly set the default permissions or umask to the most restrictive setting possible",
        "Description": "During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program. \r\nEffectiveness: High",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator",
        "Description": "For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator. \r\nEffectiveness: High",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Documentation",
        "Title": "Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application",
        "Description": "Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Installation",
        "Title": "Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual",
        "Description": "Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Operation; System Configuration",
        "Title": "Strategy:  Environment Hardening\r\nEnsure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software",
        "Description": "Strategy:  Environment Hardening\r\nEnsure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      },
      {
        "Id": "CAPEC-122",
        "Phase": null,
        "Title": null,
        "Description": "Privilege Abuse",
        "Url": "http://capec.mitre.org/data/definitions/122.html"
      },
      {
        "Id": "CAPEC-127",
        "Phase": null,
        "Title": null,
        "Description": "Directory Indexing",
        "Url": "http://capec.mitre.org/data/definitions/127.html"
      },
      {
        "Id": "CAPEC-17",
        "Phase": null,
        "Title": null,
        "Description": "Using Malicious Files",
        "Url": "http://capec.mitre.org/data/definitions/17.html"
      },
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      },
      {
        "Id": "CAPEC-206",
        "Phase": null,
        "Title": null,
        "Description": "Signing Malicious Code",
        "Url": "http://capec.mitre.org/data/definitions/206.html"
      },
      {
        "Id": "CAPEC-234",
        "Phase": null,
        "Title": null,
        "Description": "Hijacking a privileged process",
        "Url": "http://capec.mitre.org/data/definitions/234.html"
      },
      {
        "Id": "CAPEC-60",
        "Phase": null,
        "Title": null,
        "Description": "Reusing Session IDs (aka Session Replay)",
        "Url": "http://capec.mitre.org/data/definitions/60.html"
      },
      {
        "Id": "CAPEC-61",
        "Phase": null,
        "Title": null,
        "Description": "Session Fixation",
        "Url": "http://capec.mitre.org/data/definitions/61.html"
      },
      {
        "Id": "CAPEC-62",
        "Phase": null,
        "Title": null,
        "Description": "Cross Site Request Forgery",
        "Url": "http://capec.mitre.org/data/definitions/62.html"
      },
      {
        "Id": "CAPEC-642",
        "Phase": null,
        "Title": null,
        "Description": "Replace Binaries",
        "Url": "http://capec.mitre.org/data/definitions/642.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-3482",
        "Phase": null,
        "Title": "Anti-virus product sets insecure \"Everyone: Full Control\" permissions for files under the \"Program Files\" folder, allowing attackers to replace executables with Trojan horses. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3482"
      },
      {
        "Id": "CVE-2009-3897",
        "Phase": null,
        "Title": "Product creates directories with 0777 permissions at installation, allowing users to gain privileges and access a socket used for authentication. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3897"
      },
      {
        "Id": "CVE-2009-3489",
        "Phase": null,
        "Title": "Photo editor installs a service with an insecure security descriptor, allowing users to stop or start the service, or execute commands as SYSTEM. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3489"
      },
      {
        "Id": "CVE-2009-3289",
        "Phase": null,
        "Title": "Library function copies a file to a new target and uses the source file's permissions for the target, which is incorrect when the source file is a symbolic link, which typically has 0777 permissions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3289"
      },
      {
        "Id": "CVE-2009-0115",
        "Phase": null,
        "Title": "Device driver uses world-writable permissions for a socket file, allowing attackers to inject arbitrary commands. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0115"
      },
      {
        "Id": "CVE-2009-1073",
        "Phase": null,
        "Title": "LDAP server stores a cleartext password in a world-readable file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1073"
      },
      {
        "Id": "CVE-2009-0141",
        "Phase": null,
        "Title": "Terminal emulator creates TTY devices with world-writable permissions, allowing an attacker to write to the terminals of other users. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0141"
      },
      {
        "Id": "CVE-2008-0662",
        "Phase": null,
        "Title": "VPN product stores user credentials in a registry key with \"Everyone: Full Control\" permissions, allowing attackers to steal the credentials. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0662"
      },
      {
        "Id": "CVE-2008-0322",
        "Phase": null,
        "Title": "Driver installs its device interface with \"Everyone: Write\" permissions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0322"
      },
      {
        "Id": "CVE-2009-3939",
        "Phase": null,
        "Title": "Driver installs a file with world-writable permissions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3939"
      },
      {
        "Id": "CVE-2009-3611",
        "Phase": null,
        "Title": "Product changes permissions to 0777 before deleting a backup; the permissions stay insecure for subsequent backups. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3611"
      },
      {
        "Id": "CVE-2007-6033",
        "Phase": null,
        "Title": "Product creates a share with \"Everyone: Full Control\" permissions, allowing arbitrary program execution. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6033"
      },
      {
        "Id": "CVE-2007-5544",
        "Phase": null,
        "Title": "Product uses \"Everyone: Full Control\" permissions for memory-mapped files (shared memory) in inter-process communication, allowing attackers to tamper with a session. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5544"
      },
      {
        "Id": "CVE-2005-4868",
        "Phase": null,
        "Title": "Database product uses read/write permissions for everyone for its shared memory, allowing theft of credentials. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4868"
      },
      {
        "Id": "CVE-2004-1714",
        "Phase": null,
        "Title": "Security product uses \"Everyone: Full Control\" permissions for its configuration files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1714"
      },
      {
        "Id": "CVE-2001-0006",
        "Phase": null,
        "Title": "\"Everyone: Full Control\" permissions assigned to a mutex allows users to disable network connectivity. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0006"
      },
      {
        "Id": "CVE-2002-0969",
        "Phase": null,
        "Title": "Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has \"Everyone: Full Control\" permissions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0969"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. The developer might make certain assumptions about the environment in which the product operates - e.g., that the software is running on a single-user system, or the software is only accessible to trusted administrators. When the software is running in a different environment, the permissions become a problem. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Installation",
        "Title": "The developer may set loose permissions in order to minimize problems when the user first runs the program, then create documentation stating that permissions should be tightened. Since system administrators and users do not always read the documentation, this can result in insecure permissions being left unchanged. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-276",
      "CWE-277",
      "CWE-278",
      "CWE-279",
      "CWE-281",
      "CWE-1004"
    ]
  },
  {
    "Id": "CWE-276",
    "Title": " Incorrect Default Permissions",
    "Description": "During installation, installed file permissions are set to allow anyone to modify those files. ",
    "ExtendedDescription": null,
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "The architecture needs to access and modification attributes for files to only those users who actually require those actions",
        "Description": "The architecture needs to access and modification attributes for files to only those users who actually require those actions. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      },
      {
        "Id": "CAPEC-127",
        "Phase": null,
        "Title": null,
        "Description": "Directory Indexing",
        "Url": "http://capec.mitre.org/data/definitions/127.html"
      },
      {
        "Id": "CAPEC-81",
        "Phase": null,
        "Title": null,
        "Description": "Web Logs Tampering",
        "Url": "http://capec.mitre.org/data/definitions/81.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2005-1941",
        "Phase": null,
        "Title": "Executables installed world-writable. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1941"
      },
      {
        "Id": "CVE-2002-1713",
        "Phase": null,
        "Title": "Home directories installed world-readable. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1713"
      },
      {
        "Id": "CVE-2001-1550",
        "Phase": null,
        "Title": "World-writable log files allow information loss; world-readable file has cleartext passwords. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1550"
      },
      {
        "Id": "CVE-2002-1711",
        "Phase": null,
        "Title": "World-readable directory. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1711"
      },
      {
        "Id": "CVE-2002-1844",
        "Phase": null,
        "Title": "Windows product uses insecure permissions when installing on Solaris (genesis: port error). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1844"
      },
      {
        "Id": "CVE-2001-0497",
        "Phase": null,
        "Title": "Insecure permissions for a shared secret key file. Overlaps cryptographic problem. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0497"
      },
      {
        "Id": "CVE-1999-0426",
        "Phase": null,
        "Title": "Default permissions of a device allow IP spoofing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0426"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Installation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-277",
    "Title": " Insecure Inherited Permissions",
    "Description": "A product defines a set of insecure permissions that are inherited by objects that are created by the program. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-1841",
        "Phase": null,
        "Title": "User's umask is used when creating temp files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1841"
      },
      {
        "Id": "CVE-2002-1786",
        "Phase": null,
        "Title": "Insecure umask for core dumps [is the umask preserved or assigned?]. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1786"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-278",
    "Title": " Insecure Preserved Inherited Permissions",
    "Description": "A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-1724",
        "Phase": null,
        "Title": "Does not obey specified permissions when exporting. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1724"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-279",
    "Title": " Incorrect Execution-Assigned Permissions",
    "Description": "While it is executing, the software sets the permissions of an object in a way that violates the intended permissions that have been specified by the user. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-81",
        "Phase": null,
        "Title": null,
        "Description": "Web Logs Tampering",
        "Url": "http://capec.mitre.org/data/definitions/81.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0265",
        "Phase": null,
        "Title": "Log files opened read/write. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0265"
      },
      {
        "Id": "CVE-2003-0876",
        "Phase": null,
        "Title": "Log files opened read/write. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0876"
      },
      {
        "Id": "CVE-2002-1694",
        "Phase": null,
        "Title": "Log files opened read/write. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1694"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-281",
    "Title": " Improper Preservation of Permissions",
    "Description": "The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-2323",
        "Phase": null,
        "Title": "Incorrect ACLs used when restoring backups from directories that use symbolic links. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2323"
      },
      {
        "Id": "CVE-2001-1515",
        "Phase": null,
        "Title": "Automatic modification of permissions inherited from another file system. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1515"
      },
      {
        "Id": "CVE-2005-1920",
        "Phase": null,
        "Title": "Permissions on backup file are created with defaults, possibly less secure than original file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1920"
      },
      {
        "Id": "CVE-2001-0195",
        "Phase": null,
        "Title": "File is made world-readable when being cloned. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0195"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1004",
    "Title": " Sensitive Cookie Without 'HttpOnly' Flag",
    "Description": "The software uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag. ",
    "ExtendedDescription": "The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Leverage the HttpOnly flag when setting a sensitive cookie in a response",
        "Description": "Leverage the HttpOnly flag when setting a sensitive cookie in a response. \r\nEffectiveness: High\r\nNote: While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie.",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2014-3852",
        "Phase": null,
        "Title": "CMS written in Python does not include the HTTPOnly flag in a Set-Cookie header, allowing remote attackers to obtain potentially sensitive information via script access to this cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3852"
      },
      {
        "Id": "CVE-2015-4138",
        "Phase": null,
        "Title": "Appliance for managing encrypted communications does not use HttpOnly flag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-4138"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-767",
    "Title": " Access to Critical Private Variable via Public Method",
    "Description": "The software defines a public method that reads or modifies a private variable. ",
    "ExtendedDescription": "If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use class accessor and mutator methods appropriately",
        "Description": "Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-927",
    "Title": " Use of Implicit Intent for Sensitive Communication",
    "Description": "The Android application uses an implicit intent for transmitting sensitive data to other applications. ",
    "ExtendedDescription": "Since an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent Filter for that intent. This can allow untrusted applications to obtain sensitive data. There are two variations on the standard broadcast intent, ordered and sticky. Ordered broadcast intents are delivered to a series of registered receivers in order of priority as declared by the Receivers. A malicious receiver can give itself a high priority and cause a denial of service by stopping the broadcast from propagating further down the chain. There is also the possibility of malicious data modification, as a receiver may also alter the data within the Intent before passing it on to the next receiver. The downstream components have no way of asserting that the data has not been altered earlier in the chain. Sticky broadcast intents remain accessible after the initial broadcast. An old sticky intent will be broadcast again to any new receivers that register for it in the future, greatly increasing the chances of information exposure over time. Also, sticky broadcasts cannot be protected by permissions that may apply to other kinds of intents. In addition, any broadcast intent may include a URI that references data that the receiving component does not normally have the privileges to access. The sender of the intent can include special privileges that grant the receiver read or write access to the specific URI included in the intent. A malicious receiver that intercepts this intent will also gain those privileges and be able to read or write the resource at the specified URI. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used",
        "Description": "If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1189",
    "Title": " Improper Isolation of Shared Resources on System-on-a-Chip (SoC)",
    "Description": "The product does not properly isolate shared resources between trusted and untrusted agents. ",
    "ExtendedDescription": "A System-On-a-Chip (SoC) has a lot of functionality, but may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nWhen sharing resources, avoid mixing agents of varying trust levels",
        "Description": "Strategy:  Separation of Privilege\r\nWhen sharing resources, avoid mixing agents of varying trust levels. \r\nUntrusted agents should not share resources with trusted agents. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-124",
        "Phase": null,
        "Title": null,
        "Description": "Shared Resource Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/124.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-1303"
    ]
  },
  {
    "Id": "CWE-1282",
    "Title": " Assumed-Immutable Data is Stored in Writable Memory",
    "Description": "Immutable data, such as a first-stage bootloader, device identifiers, and \"write-once\" configuration settings are stored in writable memory that can be re-programmed or updated in the field. ",
    "ExtendedDescription": "Security services such as secure boot, authentication of code and data, and device attestation all require assets such as the first stage bootloader, public keys, golden hash digests, etc. which are implicitly trusted. Storing these assets in read-only memory (ROM), fuses, or one-time programmable (OTP) memory provides strong integrity guarantees and provides a root of trust for securing the rest of the system. Security is lost if assets assumed to be immutable can be modified. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "All immutable code or data should be programmed into ROM or write-once memory",
        "Description": "All immutable code or data should be programmed into ROM or write-once memory. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Keys, code, configuration settings, and other data should be programmed in write-once or read-only memory instead of writable memory. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1255",
    "Title": " Comparison Logic is Vulnerable to Power Side-Channel Attacks",
    "Description": "A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token. ",
    "ExtendedDescription": "The power consumed by a device may be instrumented and monitored in real time. If the algorithm for evaluating security tokens is not sufficiently robust, the power consumption may vary by token entry comparison against the reference value. Further, if retries are unlimited, the power difference between a \"good\" entry and a \"bad\" entry may be observed and used to determine whether each entry itself is correct thereby allowing unauthorized parties to calculate the reference value. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "The design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token",
        "Description": "The design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token. The alternative is an all at once check where a retry counter is incremented PRIOR to the check. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If the architecture is unable prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements",
        "Description": "If the architecture is unable prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "The design of the algorithm itself may intrinsically allow the power side channel attack to be effective ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Even if the design is not robust, implementation may mitigate a design which would otherwise allow exploitation ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1300",
    "Title": " Improper Protection Against Physical Side Channels",
    "Description": "The product is missing protections or implements insufficient protections against information leakage through physical channels such as power consumption, electromagnetic emissions (EME), acoustic emissions, or other physical attributes. ",
    "ExtendedDescription": "Physical properties of the hardware implementation such as power consumption or EME can result in data disclosure even if it is not possible to extract the information in the digital domain. Physical side channels such as power consumption, electromagnetic emissions (EME), and acoustic emissions have been well-studied for decades in the context of breaking implementations of cryptographic algorithms. These side-channels may be easily observed by an attacker with physical access to the device. Power, EME, and acoustic measurements obtained during hardware operation are correlated to data processed by the hardware, enabling recovery of secret keys and data. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Apply blinding or masking techniques to implementations of cryptographic algorithms",
        "Description": "Apply blinding or masking techniques to implementations of cryptographic algorithms. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel",
        "Description": "Add shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1303",
    "Title": " Non-Transparent Sharing of Microarchitectural Resources",
    "Description": "Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts. ",
    "ExtendedDescription": "Modern processors use techniques such as out-of-order execution, speculation, prefetching, data forwarding, and caching to increase performance. Details about the implementation of these techniques are hidden from the programmer’s view. This is problematic when the hardware implementation of these techniques results in resources being shared across supposedly isolated contexts. Contention for shared resources between different contexts opens covert channels that allow malicious programs executing in one context to recover information from another context. Some examples of shared micro-architectural resources that have been used to leak information between contexts are caches, branch prediction logic, and load or store buffers. Speculative and out-of-order execution provides an attacker with increased control over which data is leaked through the covert channel. If the extent of resource sharing between contexts in the design microarchitecture is undocumented, it is extremely difficult to ensure system assets are protected against disclosure. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques",
        "Description": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques",
        "Description": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1258",
    "Title": " Exposure of Sensitive System Information Due to Uncleared Debug Information",
    "Description": "The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered. ",
    "ExtendedDescription": "Security sensitive values, keys, intermediate steps of cryptographic operations, etc. are stored in temporary registers in the hardware. If these values are not cleared when debug mode is entered they may be accessed by a debugger allowing sensitive information to be accessible by untrusted parties. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Whenever debug mode is enabled, all registers containing sensitive assets must be cleared",
        "Description": "Whenever debug mode is enabled, all registers containing sensitive assets must be cleared. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-150",
        "Phase": null,
        "Title": null,
        "Description": "Collect Data from Common Resource Locations",
        "Url": "http://capec.mitre.org/data/definitions/150.html"
      },
      {
        "Id": "CAPEC-204",
        "Phase": null,
        "Title": null,
        "Description": "Lifting Sensitive Data Embedded in Cache",
        "Url": "http://capec.mitre.org/data/definitions/204.html"
      },
      {
        "Id": "CAPEC-37",
        "Phase": null,
        "Title": null,
        "Description": "Retrieve Embedded Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/37.html"
      },
      {
        "Id": "CAPEC-545",
        "Phase": null,
        "Title": null,
        "Description": "Pull Data from System Resources",
        "Url": "http://capec.mitre.org/data/definitions/545.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1295",
    "Title": " Debug Messages Revealing Unnecessary Information",
    "Description": "The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages. ",
    "ExtendedDescription": "Debug messages are messages that help troubleshoot an issue by revealing the internal state of the system. For example, debug data in design can be exposed through internal memory array dumps or boot logs through interfaces like UART via TAP commands, scan chain, etc. Thus, the more information contained in a debug message, the easier it is to debug. However, there is also the risk of revealing information that could help an attacker either decipher a vulnerability, and/or gain a better understanding of the system. Thus, this extra information could lower the “security by obscurity” factor. While “security by obscurity” alone is insufficient, it can help as a part of “Defense-in-depth”. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response",
        "Description": "Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2017-18326",
        "Phase": null,
        "Title": "Cryptographic keys are printed in modem debug messages in snapdragon mobile and snapdragon wear in versions MDM9607, MDM9615, MDM9625, MDM9635M, MDM9640, MDM9645, MDM9650, MDM9655, MSM8909W, SD 210/SD 212/SD 205, SD 410/12, SD 425, SD 427, SD 430, SD 435, SD 450, SD 615/16/SD 415, SD 625, SD 636, SD 650/52, SD 800, SD 810, SD 820, SD 835, SDA660, SDM630, SDM660, and Snapdragon_High_Med_2016. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18326"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-306",
    "Title": " Missing Authentication for Critical Function",
    "Description": "The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources. ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Divide the software into anonymous, normal, privileged, and administrative areas",
        "Description": "Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability. \r\nIdentify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port. \r\nIn general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Where possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment",
        "Description": "Where possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These may make it easier to provide a clear separation between authentication tasks and authorization tasks. \r\nIn environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45]. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-12",
        "Phase": null,
        "Title": null,
        "Description": "Choosing Message Identifier",
        "Url": "http://capec.mitre.org/data/definitions/12.html"
      },
      {
        "Id": "CAPEC-166",
        "Phase": null,
        "Title": null,
        "Description": "Force the System to Reset Values",
        "Url": "http://capec.mitre.org/data/definitions/166.html"
      },
      {
        "Id": "CAPEC-36",
        "Phase": null,
        "Title": null,
        "Description": "Using Unpublished Interfaces",
        "Url": "http://capec.mitre.org/data/definitions/36.html"
      },
      {
        "Id": "CAPEC-62",
        "Phase": null,
        "Title": null,
        "Description": "Cross Site Request Forgery",
        "Url": "http://capec.mitre.org/data/definitions/62.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1810",
        "Phase": null,
        "Title": "MFV. Access TFTP server without authentication and obtain configuration file with sensitive plaintext information. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1810"
      },
      {
        "Id": "CVE-2008-6827",
        "Phase": null,
        "Title": "Agent software running at privileges does not authenticate incoming requests over an unprotected channel, allowing a Shatter\" attack. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6827"
      },
      {
        "Id": "CVE-2004-0213",
        "Phase": null,
        "Title": "Product enforces restrictions through a GUI but not through privileged APIs. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0213"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-620",
    "Title": " Unverified Password Change",
    "Description": "When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication. ",
    "ExtendedDescription": "This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "When prompting for a password change, force the user to provide the original password in addition to the new password",
        "Description": "When prompting for a password change, force the user to provide the original password in addition to the new password. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not use \"forgotten password\" functionality",
        "Description": "Do not use \"forgotten password\" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2007-0681",
        "Phase": null,
        "Title": "Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0681"
      },
      {
        "Id": "CVE-2000-0944",
        "Phase": null,
        "Title": "Web application password change utility doesn't check the original password. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0944"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-640",
    "Title": " Weak Password Recovery Mechanism for Forgotten Password",
    "Description": "The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak. ",
    "ExtendedDescription": "It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated",
        "Description": "Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not use standard weak security questions and use several security questions",
        "Description": "Do not use standard weak security questions and use several security questions. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Make sure that there is throttling on the number of incorrect answers to a security question",
        "Description": "Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record",
        "Description": "Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism",
        "Description": "Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Assign a new temporary password rather than revealing the original password",
        "Description": "Assign a new temporary password rather than revealing the original password. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-50",
        "Phase": null,
        "Title": null,
        "Description": "Password Recovery Exploitation",
        "Url": "http://capec.mitre.org/data/definitions/50.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-923",
    "Title": " Improper Restriction of Communication Channel to Intended Endpoints",
    "Description": "The software establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint. ",
    "ExtendedDescription": "Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint. While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-501",
        "Phase": null,
        "Title": null,
        "Description": "Activity Hijack",
        "Url": "http://capec.mitre.org/data/definitions/501.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-291",
      "CWE-297",
      "CWE-300",
      "CWE-322",
      "CWE-350",
      "CWE-419",
      "CWE-420",
      "CWE-925",
      "CWE-940",
      "CWE-941"
    ]
  },
  {
    "Id": "CWE-291",
    "Title": " Reliance on IP Address for Authentication",
    "Description": "The software uses an IP address for authentication. ",
    "ExtendedDescription": "IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use other means of identity verification that cannot be simply spoofed",
        "Description": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-4",
        "Phase": null,
        "Title": null,
        "Description": "Using Alternative IP Address Encodings",
        "Url": "http://capec.mitre.org/data/definitions/4.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-297",
    "Title": " Improper Validation of Certificate with Host Mismatch",
    "Description": "The software communicates with a host that provides a certificate, but the software does not properly ensure that the certificate is actually associated with that host. ",
    "ExtendedDescription": "Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the software is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed. Even if the software attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name. This weakness can occur even when the software uses Certificate Pinning, if the software does not verify the hostname at the time a certificate is pinned. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed",
        "Description": "Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname",
        "Description": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2012-5810",
        "Phase": null,
        "Title": "Mobile banking application does not verify hostname, leading to financial loss. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5810"
      },
      {
        "Id": "CVE-2012-5811",
        "Phase": null,
        "Title": "Mobile application for printing documents does not verify hostname, allowing attackers to read sensitive documents. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5811"
      },
      {
        "Id": "CVE-2012-5807",
        "Phase": null,
        "Title": "Software for electronic checking does not verify hostname, leading to financial loss. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5807"
      },
      {
        "Id": "CVE-2012-3446",
        "Phase": null,
        "Title": "Cloud-support library written in Python uses incorrect regular expression when matching hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-3446"
      },
      {
        "Id": "CVE-2009-2408",
        "Phase": null,
        "Title": "Web browser does not correctly handle '\\0' character (NUL) in Common Name, allowing spoofing of https sites. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2408"
      },
      {
        "Id": "CVE-2012-0867",
        "Phase": null,
        "Title": "Database program truncates the Common Name during hostname verification, allowing spoofing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0867"
      },
      {
        "Id": "CVE-2010-2074",
        "Phase": null,
        "Title": "Incorrect handling of '\\0' character (NUL) in hostname verification allows spoofing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2074"
      },
      {
        "Id": "CVE-2009-4565",
        "Phase": null,
        "Title": "Mail server's incorrect handling of '\\0' character (NUL) in hostname verification allows spoofing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4565"
      },
      {
        "Id": "CVE-2009-3767",
        "Phase": null,
        "Title": "LDAP server's incorrect handling of '\\0' character (NUL) in hostname verification allows spoofing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3767"
      },
      {
        "Id": "CVE-2012-5806",
        "Phase": null,
        "Title": "Payment processing module does not verify hostname when connecting to PayPal using PHP fsockopen function. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5806"
      },
      {
        "Id": "CVE-2012-2993",
        "Phase": null,
        "Title": "Smartphone device does not verify hostname, allowing spoofing of mail services. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2993"
      },
      {
        "Id": "CVE-2012-5804",
        "Phase": null,
        "Title": "E-commerce module does not verify hostname when connecting to payment site. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5804"
      },
      {
        "Id": "CVE-2012-5824",
        "Phase": null,
        "Title": "Chat application does not validate hostname, leading to loss of privacy. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5824"
      },
      {
        "Id": "CVE-2012-5822",
        "Phase": null,
        "Title": "Application uses third-party library that does not validate hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5822"
      },
      {
        "Id": "CVE-2012-5819",
        "Phase": null,
        "Title": "Cloud storage management application does not validate hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5819"
      },
      {
        "Id": "CVE-2012-5817",
        "Phase": null,
        "Title": "Java library uses JSSE SSLSocket and SSLEngine classes, which do not verify the hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5817"
      },
      {
        "Id": "CVE-2012-5784",
        "Phase": null,
        "Title": "SOAP platform does not verify the hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5784"
      },
      {
        "Id": "CVE-2012-5782",
        "Phase": null,
        "Title": "PHP library for payments does not verify the hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5782"
      },
      {
        "Id": "CVE-2012-5780",
        "Phase": null,
        "Title": "Merchant SDK for payments does not verify the hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5780"
      },
      {
        "Id": "CVE-2003-0355",
        "Phase": null,
        "Title": "Web browser does not validate Common Name, allowing spoofing of https sites. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0355"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-300",
    "Title": " Channel Accessible by Non-Endpoint",
    "Description": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint. ",
    "ExtendedDescription": "In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Always fully authenticate both ends of any communications channel",
        "Description": "Always fully authenticate both ends of any communications channel. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Adhere to the principle of complete mediation",
        "Description": "Adhere to the principle of complete mediation. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "A certificate binds an identity to a cryptographic key to authenticate a communicating party",
        "Description": "A certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-466",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Active Man in the Middle Attacks to Bypass Same Origin Policy",
        "Url": "http://capec.mitre.org/data/definitions/466.html"
      },
      {
        "Id": "CAPEC-57",
        "Phase": null,
        "Title": null,
        "Description": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/57.html"
      },
      {
        "Id": "CAPEC-589",
        "Phase": null,
        "Title": null,
        "Description": "DNS Blocking",
        "Url": "http://capec.mitre.org/data/definitions/589.html"
      },
      {
        "Id": "CAPEC-590",
        "Phase": null,
        "Title": null,
        "Description": "IP Address Blocking",
        "Url": "http://capec.mitre.org/data/definitions/590.html"
      },
      {
        "Id": "CAPEC-612",
        "Phase": null,
        "Title": null,
        "Description": "WiFi MAC Address Tracking",
        "Url": "http://capec.mitre.org/data/definitions/612.html"
      },
      {
        "Id": "CAPEC-613",
        "Phase": null,
        "Title": null,
        "Description": "WiFi SSID Tracking",
        "Url": "http://capec.mitre.org/data/definitions/613.html"
      },
      {
        "Id": "CAPEC-615",
        "Phase": null,
        "Title": null,
        "Description": "Evil Twin Wi-Fi Attack",
        "Url": "http://capec.mitre.org/data/definitions/615.html"
      },
      {
        "Id": "CAPEC-94",
        "Phase": null,
        "Title": null,
        "Description": "Man in the Middle Attack",
        "Url": "http://capec.mitre.org/data/definitions/94.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2014-1266",
        "Phase": null,
        "Title": "chain: incorrect \"goto\" in Apple SSL product bypasses certificate validation, allowing MITM attack (Apple \"goto fail\" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1266"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-322",
    "Title": " Key Exchange without Entity Authentication",
    "Description": "The software performs a key exchange with an actor without verifying the identity of that actor. ",
    "ExtendedDescription": "Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable an attacker to impersonate an actor by modifying traffic between the two entities. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that proper authentication is included in the system design",
        "Description": "Ensure that proper authentication is included in the system design. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications",
        "Description": "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-350",
    "Title": " Reliance on Reverse DNS Resolution for a Security-Critical Action",
    "Description": "The software performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname. ",
    "ExtendedDescription": "Since DNS names can be easily spoofed or misreported, and it may be difficult for the software to detect if a trusted DNS server has been compromised, DNS names do not constitute a valid authentication mechanism. When the software performs a reverse DNS resolution for an IP address, if an attacker controls the server for that IP address, then the attacker can cause the server to return an arbitrary hostname. As a result, the attacker may be able to bypass authentication, cause the wrong hostname to be recorded in log files to hide activities, or perform other attacks. Attackers can spoof DNS names by either (1) compromising a DNS server and modifying its records (sometimes called DNS cache poisoning), or (2) having legitimate control over a DNS server associated with their IP address. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use other means of identity verification that cannot be simply spoofed",
        "Description": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Perform proper forward and reverse DNS lookups to detect DNS spoofing",
        "Description": "Perform proper forward and reverse DNS lookups to detect DNS spoofing. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-142",
        "Phase": null,
        "Title": null,
        "Description": "DNS Cache Poisoning",
        "Url": "http://capec.mitre.org/data/definitions/142.html"
      },
      {
        "Id": "CAPEC-275",
        "Phase": null,
        "Title": null,
        "Description": "DNS Rebinding",
        "Url": "http://capec.mitre.org/data/definitions/275.html"
      },
      {
        "Id": "CAPEC-73",
        "Phase": null,
        "Title": null,
        "Description": "User-Controlled Filename",
        "Url": "http://capec.mitre.org/data/definitions/73.html"
      },
      {
        "Id": "CAPEC-89",
        "Phase": null,
        "Title": null,
        "Description": "Pharming",
        "Url": "http://capec.mitre.org/data/definitions/89.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2001-1488",
        "Phase": null,
        "Title": "Does not do double-reverse lookup to prevent DNS spoofing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1488"
      },
      {
        "Id": "CVE-2001-1500",
        "Phase": null,
        "Title": "Does not verify reverse-resolved hostnames in DNS. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1500"
      },
      {
        "Id": "CVE-2000-1221",
        "Phase": null,
        "Title": "Authentication bypass using spoofed reverse-resolved DNS hostnames. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1221"
      },
      {
        "Id": "CVE-2002-0804",
        "Phase": null,
        "Title": "Authentication bypass using spoofed reverse-resolved DNS hostnames. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0804"
      },
      {
        "Id": "CVE-2001-1155",
        "Phase": null,
        "Title": "Filter does not properly check the result of a reverse DNS lookup, which could allow remote attackers to bypass intended access restrictions via DNS spoofing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1155"
      },
      {
        "Id": "CVE-2004-0892",
        "Phase": null,
        "Title": "Reverse DNS lookup used to spoof trusted content in intermediary. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0892"
      },
      {
        "Id": "CVE-2003-0981",
        "Phase": null,
        "Title": "Product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0981"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-419",
    "Title": " Unprotected Primary Channel",
    "Description": "The software uses a primary channel for administration or restricted functionality, but it does not properly protect the channel. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not expose administrative functionnality on the user UI",
        "Description": "Do not expose administrative functionnality on the user UI. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Protect the administrative/restricted functionality with a strong authentication mechanism",
        "Description": "Protect the administrative/restricted functionality with a strong authentication mechanism. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-383",
        "Phase": null,
        "Title": null,
        "Description": "Harvesting Information via API Event Monitoring",
        "Url": "http://capec.mitre.org/data/definitions/383.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-420",
    "Title": " Unprotected Alternate Channel",
    "Description": "The software protects a primary channel, but it does not use the same level of protection for an alternate channel. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Identify all alternate channels and use the same protection mechanisms that are used for the primary channels",
        "Description": "Identify all alternate channels and use the same protection mechanisms that are used for the primary channels. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0567",
        "Phase": null,
        "Title": "DB server assumes that local clients have performed authentication, allowing attacker to directly connect to a process to load libraries and execute commands; a socket interface also exists (another alternate channel), so attack can be remote. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0567"
      },
      {
        "Id": "CVE-2002-1578",
        "Phase": null,
        "Title": "Product does not restrict access to underlying database, so attacker can bypass restrictions by directly querying the database. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1578"
      },
      {
        "Id": "CVE-2003-1035",
        "Phase": null,
        "Title": "User can avoid lockouts by using an API instead of the GUI to conduct brute force password guessing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1035"
      },
      {
        "Id": "CVE-2002-1863",
        "Phase": null,
        "Title": "FTP service can not be disabled even when other access controls would require it. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1863"
      },
      {
        "Id": "CVE-2002-0066",
        "Phase": null,
        "Title": "Windows named pipe created without authentication/access control, allowing configuration modification. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0066"
      },
      {
        "Id": "CVE-2004-1461",
        "Phase": null,
        "Title": "Router management interface spawns a separate TCP connection after authentication, allowing hijacking by attacker coming from the same IP address. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1461"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-421",
      "CWE-422",
      "CWE-1299"
    ]
  },
  {
    "Id": "CWE-421",
    "Title": " Race Condition During Access to Alternate Channel",
    "Description": "The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors. ",
    "ExtendedDescription": "This creates a race condition that allows an attacker to access the channel before the authorized user does. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-1999-0351",
        "Phase": null,
        "Title": "FTP \"Pizza Thief\" vulnerability. Attacker can connect to a port that was intended for use by another client. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0351"
      },
      {
        "Id": "CVE-2003-0230",
        "Phase": null,
        "Title": "Product creates Windows named pipe during authentication that another attacker can hijack by connecting to it. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0230"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-422",
    "Title": " Unprotected Windows Messaging Channel ('Shatter')",
    "Description": "The software does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Always verify and authenticate the source of the message",
        "Description": "Always verify and authenticate the source of the message. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0971",
        "Phase": null,
        "Title": "Bypass GUI and access restricted dialog box. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0971"
      },
      {
        "Id": "CVE-2002-1230",
        "Phase": null,
        "Title": "Gain privileges via Windows message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1230"
      },
      {
        "Id": "CVE-2003-0350",
        "Phase": null,
        "Title": "A control allows a change to a pointer for a callback function using Windows message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0350"
      },
      {
        "Id": "CVE-2003-0908",
        "Phase": null,
        "Title": "Product launches Help functionality while running with raised privileges, allowing command execution using Windows message to access \"open file\" dialog. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0908"
      },
      {
        "Id": "CVE-2004-0213",
        "Phase": null,
        "Title": "Attacker uses Shatter attack to bypass GUI-enforced protection for CVE-2003-0908. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0213"
      },
      {
        "Id": "CVE-2004-0207",
        "Phase": null,
        "Title": "User can call certain API functions to modify certain properties of privileged programs. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0207"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1299",
    "Title": " Missing Protection Mechanism for Alternate Hardware Interface",
    "Description": "The lack of protections on alternate paths to access control-protected assets (such as unprotected shadow registers and other external facing unguarded interfaces) allows an attacker to bypass existing protections to the asset that are only performed against the primary path. ",
    "ExtendedDescription": "An asset inside a chip might have access-control protections through one interface. However, if all paths to the asset are not protected, an attacker might compromise the asset through alternate paths. These alternate paths could be through shadow or mirror registers inside the IP core, or could be paths from other external-facing interfaces to the IP core or SoC. Consider an SoC with various interfaces such as UART, SMBUS, PCIe, USB, etc. If access control is implemented for SoC internal registers only over the PCIe interface, then an attacker could still modify the SoC internal registers through alternate paths by coming through interfaces such as UART, SMBUS, USB, etc. Alternatively, attackers might be able to bypass existing protections by exploiting unprotected, shadow registers. Shadow registers and mirror registers typically refer to registers that can be accessed from multiple addresses. Writing to or reading from the aliased/mirrored address has the same effect as writing to the address of the main register. They are typically implemented within an IP core or SoC to temporarily hold certain data. These data will later be updated to the main register, and both registers will be in synch. If the shadow registers are not access-protected, attackers could simply initiate transactions to the shadow registers and compromise system security. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Protect assets from accesses against all potential interfaces and alternate paths",
        "Description": "Protect assets from accesses against all potential interfaces and alternate paths. \r\nEffectiveness: Defense in Depth",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Protect assets from accesses against all potential interfaces and alternate paths",
        "Description": "Protect assets from accesses against all potential interfaces and alternate paths. \r\nEffectiveness: Defense in Depth",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Protect assets from accesses against all potential interfaces and alternate paths",
        "Description": "Protect assets from accesses against all potential interfaces and alternate paths. \r\nEffectiveness: Defense in Depth",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2017-18293",
        "Phase": null,
        "Title": "When GPIO is protected by blocking access to corresponding GPIO resource registers, protection can be bypassed by writing to the corresponding banked GPIO registers instead. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18293"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-925",
    "Title": " Improper Verification of Intent by Broadcast Receiver",
    "Description": "The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source. ",
    "ExtendedDescription": "Certain types of Intents, identified by action string, can only be broadcast by the operating system itself, not by third-party applications. However, when an application registers to receive these implicit system intents, it is also registered to receive any explicit intents. While a malicious application cannot send an implicit system intent, it can send an explicit intent to the target application, which may assume that any received intent is a valid implicit system intent and not an explicit intent from another application. This may lead to unintended behavior. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Before acting on the Intent, check the Intent Action to make sure it matches the expected System action",
        "Description": "Before acting on the Intent, check the Intent Action to make sure it matches the expected System action. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-499",
        "Phase": null,
        "Title": null,
        "Description": "Intent Intercept",
        "Url": "http://capec.mitre.org/data/definitions/499.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-940",
    "Title": " Improper Verification of Source of a Communication Channel",
    "Description": "The software establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin. ",
    "ExtendedDescription": "When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using a MITM attack",
        "Description": "Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using a MITM attack. \r\nWhen designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-594",
        "Phase": null,
        "Title": null,
        "Description": "Traffic Injection",
        "Url": "http://capec.mitre.org/data/definitions/594.html"
      },
      {
        "Id": "CAPEC-595",
        "Phase": null,
        "Title": null,
        "Description": "Connection Reset",
        "Url": "http://capec.mitre.org/data/definitions/595.html"
      },
      {
        "Id": "CAPEC-596",
        "Phase": null,
        "Title": null,
        "Description": "TCP RST Injection",
        "Url": "http://capec.mitre.org/data/definitions/596.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2000-1218",
        "Phase": null,
        "Title": "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1218"
      },
      {
        "Id": "CVE-2005-0877",
        "Phase": null,
        "Title": "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0877"
      },
      {
        "Id": "CVE-2001-1452",
        "Phase": null,
        "Title": "DNS server caches glue records received from non-delegated name servers ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1452"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-941",
    "Title": " Incorrectly Specified Destination in a Communication Channel",
    "Description": "The software creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor. ",
    "ExtendedDescription": "Attackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service. There are at least two distinct weaknesses that can cause the software to communicate with an unintended destination: If the software allows an attacker to control which destination is specified, then the attacker can cause it to connect to an untrusted or malicious destination. For example, because UDP is a connectionless protocol, UDP packets can be spoofed by specifying a false source address in the packet; when the server receives the packet and sends a reply, it will specify a destination by using the source of the incoming packet - i.e., the false source. The server can then be tricked into sending traffic to the wrong host, which is effective for hiding the real source of an attack and for conducting a distributed denial of service (DDoS). As another example, server-side request forgery (SSRF) and XML External Entity (XXE) can be used to trick a server into making outgoing requests to hosts that cannot be directly accessed by the attacker due to firewall restrictions. If the software incorrectly specifies the destination, then an attacker who can control this destination might be able to spoof trusted servers. While the most common occurrence is likely due to misconfiguration by an administrator, this can be resultant from other weaknesses. For example, the software might incorrectly parse an e-mail or IP address and send sensitive data to an unintended destination. As another example, an Android application may use a \"sticky broadcast\" to communicate with a receiver for a particular application, but since sticky broadcasts can be processed by *any* receiver, this can allow a malicious application to access restricted data that was only intended for a different application. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2013-5211",
        "Phase": null,
        "Title": "composite: NTP feature generates large responses (high amplification factor) with spoofed UDP source addresses. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5211"
      },
      {
        "Id": "CVE-1999-0513",
        "Phase": null,
        "Title": "Classic \"Smurf\" attack, using spoofed ICMP packets to broadcast addresses. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0513"
      },
      {
        "Id": "CVE-1999-1379",
        "Phase": null,
        "Title": "DNS query with spoofed source address causes more traffic to be returned to spoofed address than was sent by the attacker. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1379"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1188",
    "Title": " Insecure Default Initialization of Resource",
    "Description": "The software initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure. ",
    "ExtendedDescription": "Developers often choose default values that leave the software as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value. However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
      "CWE-453"
    ]
  },
  {
    "Id": "CWE-453",
    "Title": " Insecure Default Variable Initialization",
    "Description": "The software, by default, initializes an internal variable with an insecure or less secure value than is possible. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "Disable or change default settings when they can be used to abuse the system",
        "Description": "Disable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-288",
    "Title": " Authentication Bypass Using an Alternate Path or Channel",
    "Description": "A product requires authentication, but the product has an alternate path or channel that does not require authentication. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Funnel all access through a single choke point to simplify how users can access a resource",
        "Description": "Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-127",
        "Phase": null,
        "Title": null,
        "Description": "Directory Indexing",
        "Url": "http://capec.mitre.org/data/definitions/127.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2000-1179",
        "Phase": null,
        "Title": "Router allows remote attackers to read system logs without authentication by directly connecting to the login screen and typing certain control characters. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1179"
      },
      {
        "Id": "CVE-1999-1454",
        "Phase": null,
        "Title": "Attackers with physical access to the machine may bypass the password prompt by pressing the ESC (Escape) key. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1454"
      },
      {
        "Id": "CVE-1999-1077",
        "Phase": null,
        "Title": "OS allows local attackers to bypass the password protection of idled sessions via the programmer's switch or CMD-PWR keyboard sequence, which brings up a debugger that the attacker can use to disable the lock. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1077"
      },
      {
        "Id": "CVE-2003-0304",
        "Phase": null,
        "Title": "Direct request of installation file allows attacker to create administrator accounts. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0304"
      },
      {
        "Id": "CVE-2002-0870",
        "Phase": null,
        "Title": "Attackers may gain additional privileges by directly requesting the web management URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0870"
      },
      {
        "Id": "CVE-2002-0066",
        "Phase": null,
        "Title": "Bypass authentication via direct request to named pipe. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0066"
      },
      {
        "Id": "CVE-2003-1035",
        "Phase": null,
        "Title": "User can avoid lockouts by using an API instead of the GUI to conduct brute force password guessing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1035"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This is often seen in web applications that assume that access to a particular CGI program can only be obtained through a \"front\" screen, when the supporting programs are directly accessible. But this problem is not just in web apps. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-425",
      "CWE-1299"
    ]
  },
  {
    "Id": "CWE-425",
    "Title": " Direct Request ('Forced Browsing')",
    "Description": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files. ",
    "ExtendedDescription": "Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files",
        "Description": "Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Consider using MVC based frameworks such as Struts",
        "Description": "Consider using MVC based frameworks such as Struts. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-127",
        "Phase": null,
        "Title": null,
        "Description": "Directory Indexing",
        "Url": "http://capec.mitre.org/data/definitions/127.html"
      },
      {
        "Id": "CAPEC-87",
        "Phase": null,
        "Title": null,
        "Description": "Forceful Browsing",
        "Url": "http://capec.mitre.org/data/definitions/87.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2004-2144",
        "Phase": null,
        "Title": "Bypass authentication via direct request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2144"
      },
      {
        "Id": "CVE-2005-1892",
        "Phase": null,
        "Title": "Infinite loop or infoleak triggered by direct requests. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1892"
      },
      {
        "Id": "CVE-2004-2257",
        "Phase": null,
        "Title": "Bypass auth/auth via direct request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2257"
      },
      {
        "Id": "CVE-2005-1688",
        "Phase": null,
        "Title": "Direct request leads to infoleak by error. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1688"
      },
      {
        "Id": "CVE-2005-1697",
        "Phase": null,
        "Title": "Direct request leads to infoleak by error. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1697"
      },
      {
        "Id": "CVE-2005-1698",
        "Phase": null,
        "Title": "Direct request leads to infoleak by error. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1698"
      },
      {
        "Id": "CVE-2005-1685",
        "Phase": null,
        "Title": "Authentication bypass via direct request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1685"
      },
      {
        "Id": "CVE-2005-1827",
        "Phase": null,
        "Title": "Authentication bypass via direct request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1827"
      },
      {
        "Id": "CVE-2005-1654",
        "Phase": null,
        "Title": "Authorization bypass using direct request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1654"
      },
      {
        "Id": "CVE-2005-1668",
        "Phase": null,
        "Title": "Access privileged functionality using direct request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1668"
      },
      {
        "Id": "CVE-2002-1798",
        "Phase": null,
        "Title": "Upload arbitrary files via direct request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1798"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-757",
    "Title": " Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')",
    "Description": "A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties. ",
    "ExtendedDescription": "When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the software by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-220",
        "Phase": null,
        "Title": null,
        "Description": "Client-Server Protocol Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/220.html"
      },
      {
        "Id": "CAPEC-606",
        "Phase": null,
        "Title": null,
        "Description": "Weakening of Cellular Encryption",
        "Url": "http://capec.mitre.org/data/definitions/606.html"
      },
      {
        "Id": "CAPEC-620",
        "Phase": null,
        "Title": null,
        "Description": "Drop Encryption Level",
        "Url": "http://capec.mitre.org/data/definitions/620.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2006-4302",
        "Phase": null,
        "Title": "Attacker can select an older version of the software to exploit its vulnerabilities. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4302"
      },
      {
        "Id": "CVE-2006-4407",
        "Phase": null,
        "Title": "Improper prioritization of encryption ciphers during negotiation leads to use of a weaker cipher. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4407"
      },
      {
        "Id": "CVE-2005-2969",
        "Phase": null,
        "Title": "chain: SSL/TLS implementation disables a verification step (CWE-325) that enables a downgrade attack to a weaker protocol. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2969"
      },
      {
        "Id": "CVE-2001-1444",
        "Phase": null,
        "Title": "Telnet protocol implementation allows downgrade to weaker authentication and encryption using a MITM attack. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1444"
      },
      {
        "Id": "CVE-2002-1646",
        "Phase": null,
        "Title": "SSH server implementation allows override of configuration setting to use weaker authentication schemes. This may be a composite with CWE-642. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1646"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-287",
    "Title": " Improper Authentication",
    "Description": "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct. ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse an authentication framework or library such as the OWASP ESAPI Authentication feature",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse an authentication framework or library such as the OWASP ESAPI Authentication feature. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-114",
        "Phase": null,
        "Title": null,
        "Description": "Authentication Abuse",
        "Url": "http://capec.mitre.org/data/definitions/114.html"
      },
      {
        "Id": "CAPEC-115",
        "Phase": null,
        "Title": null,
        "Description": "Authentication Bypass",
        "Url": "http://capec.mitre.org/data/definitions/115.html"
      },
      {
        "Id": "CAPEC-151",
        "Phase": null,
        "Title": null,
        "Description": "Identity Spoofing",
        "Url": "http://capec.mitre.org/data/definitions/151.html"
      },
      {
        "Id": "CAPEC-194",
        "Phase": null,
        "Title": null,
        "Description": "Fake the Source of Data",
        "Url": "http://capec.mitre.org/data/definitions/194.html"
      },
      {
        "Id": "CAPEC-22",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Trust in Client",
        "Url": "http://capec.mitre.org/data/definitions/22.html"
      },
      {
        "Id": "CAPEC-57",
        "Phase": null,
        "Title": null,
        "Description": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/57.html"
      },
      {
        "Id": "CAPEC-593",
        "Phase": null,
        "Title": null,
        "Description": "Session Hijacking",
        "Url": "http://capec.mitre.org/data/definitions/593.html"
      },
      {
        "Id": "CAPEC-633",
        "Phase": null,
        "Title": null,
        "Description": "Token Impersonation",
        "Url": "http://capec.mitre.org/data/definitions/633.html"
      },
      {
        "Id": "CAPEC-650",
        "Phase": null,
        "Title": null,
        "Description": "Upload a Web Shell to a Web Server",
        "Url": "http://capec.mitre.org/data/definitions/650.html"
      },
      {
        "Id": "CAPEC-94",
        "Phase": null,
        "Title": null,
        "Description": "Man in the Middle Attack",
        "Url": "http://capec.mitre.org/data/definitions/94.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-3421",
        "Phase": null,
        "Title": "login script for guestbook allows bypassing authentication by setting a \"login_ok\" parameter to 1. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3421"
      },
      {
        "Id": "CVE-2009-2382",
        "Phase": null,
        "Title": "admin script allows authentication bypass by setting a cookie value to \"LOGGEDIN\". ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2382"
      },
      {
        "Id": "CVE-2009-1048",
        "Phase": null,
        "Title": "VOIP product allows authentication bypass using 127.0.0.1 in the Host header. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1048"
      },
      {
        "Id": "CVE-2009-2213",
        "Phase": null,
        "Title": "product uses default \"Allow\" action, instead of default deny, leading to authentication bypass. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2213"
      },
      {
        "Id": "CVE-2009-2168",
        "Phase": null,
        "Title": "chain: redirect without exit (CWE-698) leads to resultant authentication bypass. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2168"
      },
      {
        "Id": "CVE-2009-3107",
        "Phase": null,
        "Title": "product does not restrict access to a listening port for a critical service, allowing authentication to be bypassed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3107"
      },
      {
        "Id": "CVE-2009-1596",
        "Phase": null,
        "Title": "product does not properly implement a security-related configuration setting, allowing authentication bypass. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1596"
      },
      {
        "Id": "CVE-2009-2422",
        "Phase": null,
        "Title": "authentication routine returns \"nil\" instead of \"false\" in some situations, allowing authentication bypass using an invalid username. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2422"
      },
      {
        "Id": "CVE-2009-3232",
        "Phase": null,
        "Title": "authentication update script does not properly handle when admin does not select any authentication modules, allowing authentication bypass. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3232"
      },
      {
        "Id": "CVE-2009-3231",
        "Phase": null,
        "Title": "use of LDAP authentication with anonymous binds causes empty password to result in successful authentication ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3231"
      },
      {
        "Id": "CVE-2005-3435",
        "Phase": null,
        "Title": "product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435"
      },
      {
        "Id": "CVE-2005-0408",
        "Phase": null,
        "Title": "chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0408"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-261",
      "CWE-262",
      "CWE-263",
      "CWE-288",
      "CWE-289",
      "CWE-290",
      "CWE-294",
      "CWE-295",
      "CWE-301",
      "CWE-302",
      "CWE-303",
      "CWE-304",
      "CWE-305",
      "CWE-306",
      "CWE-307",
      "CWE-308",
      "CWE-309",
      "CWE-521",
      "CWE-522",
      "CWE-593",
      "CWE-603",
      "CWE-620",
      "CWE-640",
      "CWE-645",
      "CWE-798",
      "CWE-804",
      "CWE-836"
    ]
  },
  {
    "Id": "CWE-261",
    "Title": " Weak Encoding for Password",
    "Description": "Obscuring a password with a trivial encoding does not protect the password. ",
    "ExtendedDescription": "Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security",
        "Description": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-55",
        "Phase": null,
        "Title": null,
        "Description": "Rainbow Table Password Cracking",
        "Url": "http://capec.mitre.org/data/definitions/55.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-262",
    "Title": " Not Using Password Aging",
    "Description": "If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner. ",
    "ExtendedDescription": "Security experts have often recommended that users change their passwords regularly and avoid reusing passwords. Although this can be an effective mitigation, if the expiration window is too short, it can cause users to generate poor or predictable passwords. As such, it is important to discourage creating similar passwords. It is also useful to have a password aging mechanism that notifies users when passwords are considered old and requests that they replace them with new, strong passwords. Companion documentation which stresses how important this practice is can help users understand and better support this approach. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "As part of a product's design, require users to change their passwords regularly and avoid reusing previous passwords",
        "Description": "As part of a product's design, require users to change their passwords regularly and avoid reusing previous passwords. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-16",
        "Phase": null,
        "Title": null,
        "Description": "Dictionary-based Password Attack",
        "Url": "http://capec.mitre.org/data/definitions/16.html"
      },
      {
        "Id": "CAPEC-49",
        "Phase": null,
        "Title": null,
        "Description": "Password Brute Forcing",
        "Url": "http://capec.mitre.org/data/definitions/49.html"
      },
      {
        "Id": "CAPEC-509",
        "Phase": null,
        "Title": null,
        "Description": "Kerberoasting",
        "Url": "http://capec.mitre.org/data/definitions/509.html"
      },
      {
        "Id": "CAPEC-55",
        "Phase": null,
        "Title": null,
        "Description": "Rainbow Table Password Cracking",
        "Url": "http://capec.mitre.org/data/definitions/55.html"
      },
      {
        "Id": "CAPEC-555",
        "Phase": null,
        "Title": null,
        "Description": "Remote Services with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/555.html"
      },
      {
        "Id": "CAPEC-560",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Domain Credentials",
        "Url": "http://capec.mitre.org/data/definitions/560.html"
      },
      {
        "Id": "CAPEC-561",
        "Phase": null,
        "Title": null,
        "Description": "Windows Admin Shares with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/561.html"
      },
      {
        "Id": "CAPEC-565",
        "Phase": null,
        "Title": null,
        "Description": "Password Spraying",
        "Url": "http://capec.mitre.org/data/definitions/565.html"
      },
      {
        "Id": "CAPEC-600",
        "Phase": null,
        "Title": null,
        "Description": "Credential Stuffing",
        "Url": "http://capec.mitre.org/data/definitions/600.html"
      },
      {
        "Id": "CAPEC-652",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Kerberos Credentials",
        "Url": "http://capec.mitre.org/data/definitions/652.html"
      },
      {
        "Id": "CAPEC-653",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Windows Credentials",
        "Url": "http://capec.mitre.org/data/definitions/653.html"
      },
      {
        "Id": "CAPEC-70",
        "Phase": null,
        "Title": null,
        "Description": "Try Common or Default Usernames and Passwords",
        "Url": "http://capec.mitre.org/data/definitions/70.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-263",
    "Title": " Password Aging with Long Expiration",
    "Description": "Allowing password aging to occur unchecked can result in the possibility of diminished password integrity. ",
    "ExtendedDescription": "Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that password aging is limited so that there is a defined maximum age for passwords and so that the user is notified several times leading up to the password expiration",
        "Description": "Ensure that password aging is limited so that there is a defined maximum age for passwords and so that the user is notified several times leading up to the password expiration. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-16",
        "Phase": null,
        "Title": null,
        "Description": "Dictionary-based Password Attack",
        "Url": "http://capec.mitre.org/data/definitions/16.html"
      },
      {
        "Id": "CAPEC-49",
        "Phase": null,
        "Title": null,
        "Description": "Password Brute Forcing",
        "Url": "http://capec.mitre.org/data/definitions/49.html"
      },
      {
        "Id": "CAPEC-509",
        "Phase": null,
        "Title": null,
        "Description": "Kerberoasting",
        "Url": "http://capec.mitre.org/data/definitions/509.html"
      },
      {
        "Id": "CAPEC-55",
        "Phase": null,
        "Title": null,
        "Description": "Rainbow Table Password Cracking",
        "Url": "http://capec.mitre.org/data/definitions/55.html"
      },
      {
        "Id": "CAPEC-555",
        "Phase": null,
        "Title": null,
        "Description": "Remote Services with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/555.html"
      },
      {
        "Id": "CAPEC-560",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Domain Credentials",
        "Url": "http://capec.mitre.org/data/definitions/560.html"
      },
      {
        "Id": "CAPEC-561",
        "Phase": null,
        "Title": null,
        "Description": "Windows Admin Shares with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/561.html"
      },
      {
        "Id": "CAPEC-565",
        "Phase": null,
        "Title": null,
        "Description": "Password Spraying",
        "Url": "http://capec.mitre.org/data/definitions/565.html"
      },
      {
        "Id": "CAPEC-600",
        "Phase": null,
        "Title": null,
        "Description": "Credential Stuffing",
        "Url": "http://capec.mitre.org/data/definitions/600.html"
      },
      {
        "Id": "CAPEC-652",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Kerberos Credentials",
        "Url": "http://capec.mitre.org/data/definitions/652.html"
      },
      {
        "Id": "CAPEC-653",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Windows Credentials",
        "Url": "http://capec.mitre.org/data/definitions/653.html"
      },
      {
        "Id": "CAPEC-70",
        "Phase": null,
        "Title": null,
        "Description": "Try Common or Default Usernames and Passwords",
        "Url": "http://capec.mitre.org/data/definitions/70.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-289",
    "Title": " Authentication Bypass by Alternate Name",
    "Description": "The software performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e",
        "Description": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2003-0317",
        "Phase": null,
        "Title": "Protection mechanism that restricts URL access can be bypassed using URL encoding. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0317"
      },
      {
        "Id": "CVE-2004-0847",
        "Phase": null,
        "Title": "Bypass of authentication for files using \"\\\" (backslash) or \"%5C\" (encoded backslash). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0847"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-290",
    "Title": " Authentication Bypass by Spoofing",
    "Description": "This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-21",
        "Phase": null,
        "Title": null,
        "Description": "Exploitation of Trusted Identifiers",
        "Url": "http://capec.mitre.org/data/definitions/21.html"
      },
      {
        "Id": "CAPEC-22",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Trust in Client",
        "Url": "http://capec.mitre.org/data/definitions/22.html"
      },
      {
        "Id": "CAPEC-459",
        "Phase": null,
        "Title": null,
        "Description": "Creating a Rogue Certification Authority Certificate",
        "Url": "http://capec.mitre.org/data/definitions/459.html"
      },
      {
        "Id": "CAPEC-461",
        "Phase": null,
        "Title": null,
        "Description": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness",
        "Url": "http://capec.mitre.org/data/definitions/461.html"
      },
      {
        "Id": "CAPEC-473",
        "Phase": null,
        "Title": null,
        "Description": "Signature Spoof",
        "Url": "http://capec.mitre.org/data/definitions/473.html"
      },
      {
        "Id": "CAPEC-476",
        "Phase": null,
        "Title": null,
        "Description": "Signature Spoofing by Misrepresentation",
        "Url": "http://capec.mitre.org/data/definitions/476.html"
      },
      {
        "Id": "CAPEC-59",
        "Phase": null,
        "Title": null,
        "Description": "Session Credential Falsification through Prediction",
        "Url": "http://capec.mitre.org/data/definitions/59.html"
      },
      {
        "Id": "CAPEC-60",
        "Phase": null,
        "Title": null,
        "Description": "Reusing Session IDs (aka Session Replay)",
        "Url": "http://capec.mitre.org/data/definitions/60.html"
      },
      {
        "Id": "CAPEC-94",
        "Phase": null,
        "Title": null,
        "Description": "Man in the Middle Attack",
        "Url": "http://capec.mitre.org/data/definitions/94.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-1048",
        "Phase": null,
        "Title": "VOIP product allows authentication bypass using 127.0.0.1 in the Host header. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1048"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-291",
      "CWE-293",
      "CWE-350"
    ]
  },
  {
    "Id": "CWE-293",
    "Title": " Using Referer Field for Authentication",
    "Description": "The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking. ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used",
        "Description": "In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-294",
    "Title": " Authentication Bypass by Capture-replay",
    "Description": "A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes). ",
    "ExtendedDescription": "Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once",
        "Description": "Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content",
        "Description": "Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-102",
        "Phase": null,
        "Title": null,
        "Description": "Session Sidejacking",
        "Url": "http://capec.mitre.org/data/definitions/102.html"
      },
      {
        "Id": "CAPEC-509",
        "Phase": null,
        "Title": null,
        "Description": "Kerberoasting",
        "Url": "http://capec.mitre.org/data/definitions/509.html"
      },
      {
        "Id": "CAPEC-555",
        "Phase": null,
        "Title": null,
        "Description": "Remote Services with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/555.html"
      },
      {
        "Id": "CAPEC-561",
        "Phase": null,
        "Title": null,
        "Description": "Windows Admin Shares with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/561.html"
      },
      {
        "Id": "CAPEC-60",
        "Phase": null,
        "Title": null,
        "Description": "Reusing Session IDs (aka Session Replay)",
        "Url": "http://capec.mitre.org/data/definitions/60.html"
      },
      {
        "Id": "CAPEC-644",
        "Phase": null,
        "Title": null,
        "Description": "Use of Captured Hashes (Pass The Hash)",
        "Url": "http://capec.mitre.org/data/definitions/644.html"
      },
      {
        "Id": "CAPEC-645",
        "Phase": null,
        "Title": null,
        "Description": "Use of Captured Tickets (Pass The Ticket)",
        "Url": "http://capec.mitre.org/data/definitions/645.html"
      },
      {
        "Id": "CAPEC-652",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Kerberos Credentials",
        "Url": "http://capec.mitre.org/data/definitions/652.html"
      },
      {
        "Id": "CAPEC-94",
        "Phase": null,
        "Title": null,
        "Description": "Man in the Middle Attack",
        "Url": "http://capec.mitre.org/data/definitions/94.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2005-3435",
        "Phase": null,
        "Title": "product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435"
      },
      {
        "Id": "CVE-2007-4961",
        "Phase": null,
        "Title": "Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4961"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-295",
    "Title": " Improper Certificate Validation",
    "Description": "The software does not validate, or incorrectly validates, a certificate. ",
    "ExtendedDescription": "When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key",
        "Description": "Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname",
        "Description": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-459",
        "Phase": null,
        "Title": null,
        "Description": "Creating a Rogue Certification Authority Certificate",
        "Url": "http://capec.mitre.org/data/definitions/459.html"
      },
      {
        "Id": "CAPEC-475",
        "Phase": null,
        "Title": null,
        "Description": "Signature Spoofing by Improper Validation",
        "Url": "http://capec.mitre.org/data/definitions/475.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2014-1266",
        "Phase": null,
        "Title": "chain: incorrect \"goto\" in Apple SSL product bypasses certificate validation, allowing MITM attack (Apple \"goto fail\" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1266"
      },
      {
        "Id": "CVE-2008-4989",
        "Phase": null,
        "Title": "Verification function trusts certificate chains in which the last certificate is self-signed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4989"
      },
      {
        "Id": "CVE-2012-5821",
        "Phase": null,
        "Title": "Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5821"
      },
      {
        "Id": "CVE-2009-3046",
        "Phase": null,
        "Title": "Web browser does not check if any intermediate certificates are revoked. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3046"
      },
      {
        "Id": "CVE-2011-0199",
        "Phase": null,
        "Title": "Operating system does not check Certificate Revocation List (CRL) in some cases, allowing spoofing using a revoked certificate. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0199"
      },
      {
        "Id": "CVE-2012-5810",
        "Phase": null,
        "Title": "Mobile banking application does not verify hostname, leading to financial loss. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5810"
      },
      {
        "Id": "CVE-2012-3446",
        "Phase": null,
        "Title": "Cloud-support library written in Python uses incorrect regular expression when matching hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-3446"
      },
      {
        "Id": "CVE-2009-2408",
        "Phase": null,
        "Title": "Web browser does not correctly handle '\\0' character (NUL) in Common Name, allowing spoofing of https sites. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2408"
      },
      {
        "Id": "CVE-2012-2993",
        "Phase": null,
        "Title": "Smartphone device does not verify hostname, allowing spoofing of mail services. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2993"
      },
      {
        "Id": "CVE-2012-5822",
        "Phase": null,
        "Title": "Application uses third-party library that does not validate hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5822"
      },
      {
        "Id": "CVE-2012-5819",
        "Phase": null,
        "Title": "Cloud storage management application does not validate hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5819"
      },
      {
        "Id": "CVE-2012-5817",
        "Phase": null,
        "Title": "Java library uses JSSE SSLSocket and SSLEngine classes, which do not verify the hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5817"
      },
      {
        "Id": "CVE-2010-1378",
        "Phase": null,
        "Title": "chain: incorrect calculation allows attackers to bypass certificate checks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1378"
      },
      {
        "Id": "CVE-2005-3170",
        "Phase": null,
        "Title": "LDAP client accepts certificates even if they are not from a trusted CA. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3170"
      },
      {
        "Id": "CVE-2009-0265",
        "Phase": null,
        "Title": "chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0265"
      },
      {
        "Id": "CVE-2003-1229",
        "Phase": null,
        "Title": "chain: product checks if client is trusted when it intended to check if the server is trusted, allowing validation of signed code. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1229"
      },
      {
        "Id": "CVE-2002-0862",
        "Phase": null,
        "Title": "Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0862"
      },
      {
        "Id": "CVE-2009-1358",
        "Phase": null,
        "Title": "chain: OS package manager does not check properly check the return value, allowing bypass using a revoked certificate. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1358"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-296",
      "CWE-297",
      "CWE-298",
      "CWE-299",
      "CWE-599"
    ]
  },
  {
    "Id": "CWE-296",
    "Title": " Improper Following of a Certificate's Chain of Trust",
    "Description": "The software does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate. ",
    "ExtendedDescription": "If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate. In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate. There are several ways in which the chain of trust might be broken, including but not limited to: Any certificate in the chain is self-signed, unless it the root. Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate. An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions. The root certificate has been compromised or authorized to the wrong party. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that proper certificate checking is included in the system design",
        "Description": "Ensure that proper certificate checking is included in the system design. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity",
        "Description": "Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust",
        "Description": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2016-2402",
        "Phase": null,
        "Title": "Server allows bypass of certificate pinning by sending a chain of trust that includes a trusted CA that is not pinned. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2402"
      },
      {
        "Id": "CVE-2008-4989",
        "Phase": null,
        "Title": "Verification function trusts certificate chains in which the last certificate is self-signed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4989"
      },
      {
        "Id": "CVE-2012-5821",
        "Phase": null,
        "Title": "Chain: Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5821"
      },
      {
        "Id": "CVE-2009-3046",
        "Phase": null,
        "Title": "Web browser does not check if any intermediate certificates are revoked. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3046"
      },
      {
        "Id": "CVE-2009-0265",
        "Phase": null,
        "Title": "chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0265"
      },
      {
        "Id": "CVE-2009-0124",
        "Phase": null,
        "Title": "chain: incorrect check of return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0124"
      },
      {
        "Id": "CVE-2002-0970",
        "Phase": null,
        "Title": "File-transfer software does not validate Basic Constraints of an intermediate CA-signed certificate. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0970"
      },
      {
        "Id": "CVE-2002-0862",
        "Phase": null,
        "Title": "Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0862"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-298",
    "Title": " Improper Validation of Certificate Expiration",
    "Description": "A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age. ",
    "ExtendedDescription": "When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed",
        "Description": "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration",
        "Description": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-299",
    "Title": " Improper Check for Certificate Revocation",
    "Description": "The software does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised. ",
    "ExtendedDescription": "An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that certificates are checked for revoked status",
        "Description": "Ensure that certificates are checked for revoked status. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status",
        "Description": "If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2011-2014",
        "Phase": null,
        "Title": "LDAP-over-SSL implementation does not check Certificate Revocation List (CRL), allowing spoofing using a revoked certificate. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2014"
      },
      {
        "Id": "CVE-2011-0199",
        "Phase": null,
        "Title": "Operating system does not check Certificate Revocation List (CRL) in some cases, allowing spoofing using a revoked certificate. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0199"
      },
      {
        "Id": "CVE-2010-5185",
        "Phase": null,
        "Title": "Antivirus product does not check whether certificates from signed executables have been revoked. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-5185"
      },
      {
        "Id": "CVE-2009-3046",
        "Phase": null,
        "Title": "Web browser does not check if any intermediate certificates are revoked. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3046"
      },
      {
        "Id": "CVE-2009-0161",
        "Phase": null,
        "Title": "chain: Ruby module for OCSP misinterprets a response, preventing detection of a revoked certificate. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0161"
      },
      {
        "Id": "CVE-2011-2701",
        "Phase": null,
        "Title": "chain: incorrect parsing of replies from OCSP responders allows bypass using a revoked certificate. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2701"
      },
      {
        "Id": "CVE-2011-0935",
        "Phase": null,
        "Title": "Router can permanently cache certain public keys, which would allow bypass if the certificate is later revoked. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0935"
      },
      {
        "Id": "CVE-2009-1358",
        "Phase": null,
        "Title": "chain: OS package manager does not properly check the return value, allowing bypass using a revoked certificate. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1358"
      },
      {
        "Id": "CVE-2009-0642",
        "Phase": null,
        "Title": "chain: language interpreter does not properly check the return value from an OSCP function, allowing bypass using a revoked certificate. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0642"
      },
      {
        "Id": "CVE-2008-4679",
        "Phase": null,
        "Title": "chain: web service component does not call the expected method, which prevents a check for revoked certificates. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4679"
      },
      {
        "Id": "CVE-2006-4410",
        "Phase": null,
        "Title": "Certificate revocation list not searched for certain certificates. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4410"
      },
      {
        "Id": "CVE-2006-4409",
        "Phase": null,
        "Title": "Product cannot access certificate revocation list when an HTTP proxy is being used. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4409"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-370"
    ]
  },
  {
    "Id": "CWE-370",
    "Title": " Missing Check for Certificate Revocation after Initial Check",
    "Description": "The software does not check the revocation status of a certificate after its initial revocation check, which can cause the software to perform privileged actions even after the certificate is revoked at a later time. ",
    "ExtendedDescription": "If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that certificates are checked for revoked status before each use of a protected resource",
        "Description": "Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-26",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/26.html"
      },
      {
        "Id": "CAPEC-29",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/29.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-599",
    "Title": " Missing Validation of OpenSSL Certificate",
    "Description": "The software uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements. ",
    "ExtendedDescription": "This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that proper authentication is included in the system design",
        "Description": "Ensure that proper authentication is included in the system design. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications",
        "Description": "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-301",
    "Title": " Reflection Attack in an Authentication Protocol",
    "Description": "Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user. ",
    "ExtendedDescription": "A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder",
        "Description": "Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Let the initiator prove its identity before proceeding",
        "Description": "Let the initiator prove its identity before proceeding. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-90",
        "Phase": null,
        "Title": null,
        "Description": "Reflection Attack in Authentication Protocol",
        "Url": "http://capec.mitre.org/data/definitions/90.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2005-3435",
        "Phase": null,
        "Title": "product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-302",
    "Title": " Authentication Bypass by Assumed-Immutable Data",
    "Description": "The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation; Implementation",
        "Title": "Implement proper protection for immutable data (e",
        "Description": "Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.) ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-10",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow via Environment Variables",
        "Url": "http://capec.mitre.org/data/definitions/10.html"
      },
      {
        "Id": "CAPEC-13",
        "Phase": null,
        "Title": null,
        "Description": "Subverting Environment Variable Values",
        "Url": "http://capec.mitre.org/data/definitions/13.html"
      },
      {
        "Id": "CAPEC-21",
        "Phase": null,
        "Title": null,
        "Description": "Exploitation of Trusted Identifiers",
        "Url": "http://capec.mitre.org/data/definitions/21.html"
      },
      {
        "Id": "CAPEC-274",
        "Phase": null,
        "Title": null,
        "Description": "HTTP Verb Tampering",
        "Url": "http://capec.mitre.org/data/definitions/274.html"
      },
      {
        "Id": "CAPEC-31",
        "Phase": null,
        "Title": null,
        "Description": "Accessing/Intercepting/Modifying HTTP Cookies",
        "Url": "http://capec.mitre.org/data/definitions/31.html"
      },
      {
        "Id": "CAPEC-39",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Opaque Client-based Data Tokens",
        "Url": "http://capec.mitre.org/data/definitions/39.html"
      },
      {
        "Id": "CAPEC-45",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow via Symbolic Links",
        "Url": "http://capec.mitre.org/data/definitions/45.html"
      },
      {
        "Id": "CAPEC-77",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating User-Controlled Variables",
        "Url": "http://capec.mitre.org/data/definitions/77.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0367",
        "Phase": null,
        "Title": "DebPloit ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0367"
      },
      {
        "Id": "CVE-2004-0261",
        "Phase": null,
        "Title": "Web auth ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0261"
      },
      {
        "Id": "CVE-2002-1730",
        "Phase": null,
        "Title": "Authentication bypass by setting certain cookies to \"true\". ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1730"
      },
      {
        "Id": "CVE-2002-1734",
        "Phase": null,
        "Title": "Authentication bypass by setting certain cookies to \"true\". ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1734"
      },
      {
        "Id": "CVE-2002-2064",
        "Phase": null,
        "Title": "Admin access by setting a cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2064"
      },
      {
        "Id": "CVE-2002-2054",
        "Phase": null,
        "Title": "Gain privileges by setting cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2054"
      },
      {
        "Id": "CVE-2004-1611",
        "Phase": null,
        "Title": "Product trusts authentication information in cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1611"
      },
      {
        "Id": "CVE-2005-1708",
        "Phase": null,
        "Title": "Authentication bypass by setting admin-testing variable to true. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1708"
      },
      {
        "Id": "CVE-2005-1787",
        "Phase": null,
        "Title": "Bypass auth and gain privileges by setting a variable. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1787"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-303",
    "Title": " Incorrect Implementation of Authentication Algorithm",
    "Description": "The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect. ",
    "ExtendedDescription": "This incorrect implementation may allow authentication to be bypassed. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-90",
        "Phase": null,
        "Title": null,
        "Description": "Reflection Attack in Authentication Protocol",
        "Url": "http://capec.mitre.org/data/definitions/90.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2003-0750",
        "Phase": null,
        "Title": "Conditional should have been an 'or' not an 'and'. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0750"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-304",
    "Title": " Missing Critical Step in Authentication",
    "Description": "The software implements an authentication technique, but it skips a step that weakens the technique. ",
    "ExtendedDescription": "Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-2163",
        "Phase": null,
        "Title": "Shared secret not verified in a RADIUS response packet, allowing authentication bypass by spoofing server replies. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2163"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-305",
    "Title": " Authentication Bypass by Primary Weakness",
    "Description": "The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1374",
        "Phase": null,
        "Title": "The provided password is only compared against the first character of the real password. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1374"
      },
      {
        "Id": "CVE-2000-0979",
        "Phase": null,
        "Title": "The password is not properly checked, which allows remote attackers to bypass access controls by sending a 1-byte password that matches the first character of the real password. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0979"
      },
      {
        "Id": "CVE-2001-0088",
        "Phase": null,
        "Title": "Chain: Forum software does not properly initialize an array, which inadvertently sets the password to a single character, allowing remote attackers to easily guess the password and gain administrative privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0088"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-307",
    "Title": " Improper Restriction of Excessive Authentication Attempts",
    "Description": "The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Common protection mechanisms include: \r\n  Disconnecting the user after a small number of failed attempts  Implementing a timeout  Locking out a targeted account  Requiring a computational task on the user's part",
        "Description": "Common protection mechanisms include: \r\n  Disconnecting the user after a small number of failed attempts  Implementing a timeout  Locking out a targeted account  Requiring a computational task on the user's part.   ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nConsider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45] ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-16",
        "Phase": null,
        "Title": null,
        "Description": "Dictionary-based Password Attack",
        "Url": "http://capec.mitre.org/data/definitions/16.html"
      },
      {
        "Id": "CAPEC-49",
        "Phase": null,
        "Title": null,
        "Description": "Password Brute Forcing",
        "Url": "http://capec.mitre.org/data/definitions/49.html"
      },
      {
        "Id": "CAPEC-560",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Domain Credentials",
        "Url": "http://capec.mitre.org/data/definitions/560.html"
      },
      {
        "Id": "CAPEC-565",
        "Phase": null,
        "Title": null,
        "Description": "Password Spraying",
        "Url": "http://capec.mitre.org/data/definitions/565.html"
      },
      {
        "Id": "CAPEC-600",
        "Phase": null,
        "Title": null,
        "Description": "Credential Stuffing",
        "Url": "http://capec.mitre.org/data/definitions/600.html"
      },
      {
        "Id": "CAPEC-652",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Kerberos Credentials",
        "Url": "http://capec.mitre.org/data/definitions/652.html"
      },
      {
        "Id": "CAPEC-653",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Windows Credentials",
        "Url": "http://capec.mitre.org/data/definitions/653.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-1999-1152",
        "Phase": null,
        "Title": "Product does not disconnect or timeout after multiple failed logins. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1152"
      },
      {
        "Id": "CVE-2001-1291",
        "Phase": null,
        "Title": "Product does not disconnect or timeout after multiple failed logins. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1291"
      },
      {
        "Id": "CVE-2001-0395",
        "Phase": null,
        "Title": "Product does not disconnect or timeout after multiple failed logins. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0395"
      },
      {
        "Id": "CVE-2001-1339",
        "Phase": null,
        "Title": "Product does not disconnect or timeout after multiple failed logins. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1339"
      },
      {
        "Id": "CVE-2002-0628",
        "Phase": null,
        "Title": "Product does not disconnect or timeout after multiple failed logins. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0628"
      },
      {
        "Id": "CVE-1999-1324",
        "Phase": null,
        "Title": "User accounts not disabled when they exceed a threshold; possibly a resultant problem. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1324"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-308",
    "Title": " Use of Single-factor Authentication",
    "Description": "The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme. ",
    "ExtendedDescription": "While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise",
        "Description": "Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-16",
        "Phase": null,
        "Title": null,
        "Description": "Dictionary-based Password Attack",
        "Url": "http://capec.mitre.org/data/definitions/16.html"
      },
      {
        "Id": "CAPEC-49",
        "Phase": null,
        "Title": null,
        "Description": "Password Brute Forcing",
        "Url": "http://capec.mitre.org/data/definitions/49.html"
      },
      {
        "Id": "CAPEC-509",
        "Phase": null,
        "Title": null,
        "Description": "Kerberoasting",
        "Url": "http://capec.mitre.org/data/definitions/509.html"
      },
      {
        "Id": "CAPEC-55",
        "Phase": null,
        "Title": null,
        "Description": "Rainbow Table Password Cracking",
        "Url": "http://capec.mitre.org/data/definitions/55.html"
      },
      {
        "Id": "CAPEC-555",
        "Phase": null,
        "Title": null,
        "Description": "Remote Services with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/555.html"
      },
      {
        "Id": "CAPEC-560",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Domain Credentials",
        "Url": "http://capec.mitre.org/data/definitions/560.html"
      },
      {
        "Id": "CAPEC-561",
        "Phase": null,
        "Title": null,
        "Description": "Windows Admin Shares with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/561.html"
      },
      {
        "Id": "CAPEC-565",
        "Phase": null,
        "Title": null,
        "Description": "Password Spraying",
        "Url": "http://capec.mitre.org/data/definitions/565.html"
      },
      {
        "Id": "CAPEC-600",
        "Phase": null,
        "Title": null,
        "Description": "Credential Stuffing",
        "Url": "http://capec.mitre.org/data/definitions/600.html"
      },
      {
        "Id": "CAPEC-644",
        "Phase": null,
        "Title": null,
        "Description": "Use of Captured Hashes (Pass The Hash)",
        "Url": "http://capec.mitre.org/data/definitions/644.html"
      },
      {
        "Id": "CAPEC-645",
        "Phase": null,
        "Title": null,
        "Description": "Use of Captured Tickets (Pass The Ticket)",
        "Url": "http://capec.mitre.org/data/definitions/645.html"
      },
      {
        "Id": "CAPEC-652",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Kerberos Credentials",
        "Url": "http://capec.mitre.org/data/definitions/652.html"
      },
      {
        "Id": "CAPEC-653",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Windows Credentials",
        "Url": "http://capec.mitre.org/data/definitions/653.html"
      },
      {
        "Id": "CAPEC-70",
        "Phase": null,
        "Title": null,
        "Description": "Try Common or Default Usernames and Passwords",
        "Url": "http://capec.mitre.org/data/definitions/70.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-309",
    "Title": " Use of Password System for Primary Authentication",
    "Description": "The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism. ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "In order to protect password systems from compromise, the following should be noted: \r\n  Passwords should be stored safely to prevent insider attack and to ensure that -- if a system is compromised -- the passwords are not retrievable",
        "Description": "In order to protect password systems from compromise, the following should be noted: \r\n  Passwords should be stored safely to prevent insider attack and to ensure that -- if a system is compromised -- the passwords are not retrievable. Due to password reuse, this information may be useful in the compromise of other systems these users work with. In order to protect these passwords, they should be stored encrypted, in a non-reversible state, such that the original text password cannot be extracted from the stored value.  Password aging should be strictly enforced to ensure that passwords do not remain unchanged for long periods of time. The longer a password remains in use, the higher the probability that it has been compromised. For this reason, passwords should require refreshing periodically, and users should be informed of the risk of passwords which remain in use for too long.  Password strength should be enforced intelligently. Rather than restrict passwords to specific content, or specific length, users should be encouraged to use upper and lower case letters, numbers, and symbols in their passwords. The system should also ensure that no passwords are derived from dictionary words.   ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use a zero-knowledge password protocol, such as SRP",
        "Description": "Use a zero-knowledge password protocol, such as SRP. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that passwords are stored safely and are not reversible",
        "Description": "Ensure that passwords are stored safely and are not reversible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Implement password aging functionality that requires passwords be changed after a certain point",
        "Description": "Implement password aging functionality that requires passwords be changed after a certain point. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use a mechanism for determining the strength of a password and notify the user of weak password use",
        "Description": "Use a mechanism for determining the strength of a password and notify the user of weak password use. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Inform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings",
        "Description": "Inform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-16",
        "Phase": null,
        "Title": null,
        "Description": "Dictionary-based Password Attack",
        "Url": "http://capec.mitre.org/data/definitions/16.html"
      },
      {
        "Id": "CAPEC-49",
        "Phase": null,
        "Title": null,
        "Description": "Password Brute Forcing",
        "Url": "http://capec.mitre.org/data/definitions/49.html"
      },
      {
        "Id": "CAPEC-509",
        "Phase": null,
        "Title": null,
        "Description": "Kerberoasting",
        "Url": "http://capec.mitre.org/data/definitions/509.html"
      },
      {
        "Id": "CAPEC-55",
        "Phase": null,
        "Title": null,
        "Description": "Rainbow Table Password Cracking",
        "Url": "http://capec.mitre.org/data/definitions/55.html"
      },
      {
        "Id": "CAPEC-555",
        "Phase": null,
        "Title": null,
        "Description": "Remote Services with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/555.html"
      },
      {
        "Id": "CAPEC-560",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Domain Credentials",
        "Url": "http://capec.mitre.org/data/definitions/560.html"
      },
      {
        "Id": "CAPEC-561",
        "Phase": null,
        "Title": null,
        "Description": "Windows Admin Shares with Stolen Credentials",
        "Url": "http://capec.mitre.org/data/definitions/561.html"
      },
      {
        "Id": "CAPEC-565",
        "Phase": null,
        "Title": null,
        "Description": "Password Spraying",
        "Url": "http://capec.mitre.org/data/definitions/565.html"
      },
      {
        "Id": "CAPEC-600",
        "Phase": null,
        "Title": null,
        "Description": "Credential Stuffing",
        "Url": "http://capec.mitre.org/data/definitions/600.html"
      },
      {
        "Id": "CAPEC-652",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Kerberos Credentials",
        "Url": "http://capec.mitre.org/data/definitions/652.html"
      },
      {
        "Id": "CAPEC-653",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Windows Credentials",
        "Url": "http://capec.mitre.org/data/definitions/653.html"
      },
      {
        "Id": "CAPEC-70",
        "Phase": null,
        "Title": null,
        "Description": "Try Common or Default Usernames and Passwords",
        "Url": "http://capec.mitre.org/data/definitions/70.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-593",
    "Title": " Authentication Bypass",
    "Description": "The software modifies the SSL context after connection creation has begun. ",
    "ExtendedDescription": "If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use a language or a library that provides a cryptography framework at a higher level of abstraction",
        "Description": "Use a language or a library that provides a cryptography framework at a higher level of abstraction. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Most SSL_CTX functions have SSL counterparts that act on SSL-type objects",
        "Description": "Most SSL_CTX functions have SSL counterparts that act on SSL-type objects. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Applications should set up an SSL_CTX completely, before creating SSL objects from it",
        "Description": "Applications should set up an SSL_CTX completely, before creating SSL objects from it. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-94",
        "Phase": null,
        "Title": null,
        "Description": "Man in the Middle Attack",
        "Url": "http://capec.mitre.org/data/definitions/94.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-603",
    "Title": " Use of Client-Side Authentication",
    "Description": "A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check. ",
    "ExtendedDescription": "Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not rely on client side data",
        "Description": "Do not rely on client side data. Always perform server side authentication. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2006-0230",
        "Phase": null,
        "Title": "Client-side check for a password allows access to a server using crafted XML requests from a modified client. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-0230"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-645",
    "Title": " Overly Restrictive Account Lockout Mechanism",
    "Description": "The software contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out. ",
    "ExtendedDescription": "Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name",
        "Description": "Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout",
        "Description": "Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation)",
        "Description": "Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-2",
        "Phase": null,
        "Title": null,
        "Description": "Inducing Account Lockout",
        "Url": "http://capec.mitre.org/data/definitions/2.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-798",
    "Title": " Use of Hard-coded Credentials",
    "Description": "The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data. ",
    "ExtendedDescription": "Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the software administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations: Inbound: the software contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. Outbound: the software connects to another system or component, and it contains hard-coded credentials for connecting to that component. In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place. The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system",
        "Description": "For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7]. \r\nIn Windows environments, the Encrypted File System (EFS) may provide some protection. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key",
        "Description": "For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials",
        "Description": "If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control",
        "Description": "For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash. \r\nUse randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For front-end to back-end connections: Three solutions are possible, although none are complete",
        "Description": "For front-end to back-end connections: Three solutions are possible, although none are complete. \r\n  The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.  Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.  Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.   ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-191",
        "Phase": null,
        "Title": null,
        "Description": "Read Sensitive Constants Within an Executable",
        "Url": "http://capec.mitre.org/data/definitions/191.html"
      },
      {
        "Id": "CAPEC-70",
        "Phase": null,
        "Title": null,
        "Description": "Try Common or Default Usernames and Passwords",
        "Url": "http://capec.mitre.org/data/definitions/70.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2010-2772",
        "Phase": null,
        "Title": "SCADA system uses a hard-coded password to protect back-end database containing authorization information, exploited by Stuxnet worm ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2772"
      },
      {
        "Id": "CVE-2010-2073",
        "Phase": null,
        "Title": "FTP server library uses hard-coded usernames and passwords for three default accounts ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2073"
      },
      {
        "Id": "CVE-2010-1573",
        "Phase": null,
        "Title": "Chain: Router firmware uses hard-coded username and password for access to debug functionality, which can be used to execute arbitrary code ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1573"
      },
      {
        "Id": "CVE-2008-2369",
        "Phase": null,
        "Title": "Server uses hard-coded authentication key ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2369"
      },
      {
        "Id": "CVE-2008-0961",
        "Phase": null,
        "Title": "Backup product uses hard-coded username and password, allowing attackers to bypass authentication via the RPC interface ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0961"
      },
      {
        "Id": "CVE-2008-1160",
        "Phase": null,
        "Title": "Security appliance uses hard-coded password allowing attackers to gain root access ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1160"
      },
      {
        "Id": "CVE-2006-7142",
        "Phase": null,
        "Title": "Drive encryption product stores hard-coded cryptographic keys for encrypted configuration files in executable programs ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7142"
      },
      {
        "Id": "CVE-2005-3716",
        "Phase": null,
        "Title": "VoIP product uses unchangeable hard-coded public credentials that cannot be changed, which allows attackers to obtain sensitive information ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3716"
      },
      {
        "Id": "CVE-2005-3803",
        "Phase": null,
        "Title": "VoIP product uses hard coded public and private SNMP community strings that cannot be changed, which allows remote attackers to obtain sensitive information ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3803"
      },
      {
        "Id": "CVE-2005-0496",
        "Phase": null,
        "Title": "Backup product contains hard-coded credentials that effectively serve as a back door, which allows remote attackers to access the file system ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0496"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-259",
      "CWE-321"
    ]
  },
  {
    "Id": "CWE-259",
    "Title": " Use of Hard-coded Password",
    "Description": "The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components. ",
    "ExtendedDescription": "A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations: Inbound: the software contains an authentication mechanism that checks for a hard-coded password. Outbound: the software connects to another system or component, and it contains hard-coded password for connecting to that component. In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place. The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system",
        "Description": "For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password",
        "Description": "For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Perform access control checks and limit which entities can access the feature that requires the hard-coded password",
        "Description": "Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control",
        "Description": "For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved. \r\nUse randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For front-end to back-end connections: Three solutions are possible, although none are complete",
        "Description": "For front-end to back-end connections: Three solutions are possible, although none are complete. \r\n The first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.  Next, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.  Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks.  ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-321",
    "Title": " Use of Hard-coded Cryptographic Key",
    "Description": "The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered. ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Prevention schemes mirror that of hard-coded password storage",
        "Description": "Prevention schemes mirror that of hard-coded password storage. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-804",
    "Title": " Guessable CAPTCHA",
    "Description": "The software uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor. ",
    "ExtendedDescription": "An automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks. There can be several different causes of a guessable CAPTCHA: An audio or visual image that does not have sufficient distortion from the unobfuscated source image. A question is generated that with a format that can be automatically recognized, such as a math question. A question for which the number of possible answers is limited, such as birth years or favorite sports teams. A general-knowledge or trivia question for which the answer can be accessed using a data base, such as country capitals or popular actors. Other data associated with the CAPTCHA may provide hints about its contents, such as an image whose filename contains the word that is used in the CAPTCHA. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-836",
    "Title": " Use of Password Hash Instead of Password for Authentication",
    "Description": "The software records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store. ",
    "ExtendedDescription": "Some authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password. As a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-644",
        "Phase": null,
        "Title": null,
        "Description": "Use of Captured Hashes (Pass The Hash)",
        "Url": "http://capec.mitre.org/data/definitions/644.html"
      },
      {
        "Id": "CAPEC-652",
        "Phase": null,
        "Title": null,
        "Description": "Use of Known Kerberos Credentials",
        "Url": "http://capec.mitre.org/data/definitions/652.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-1283",
        "Phase": null,
        "Title": "Product performs authentication with user-supplied password hashes that can be obtained from a separate SQL injection vulnerability (CVE-2009-1282). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1283"
      },
      {
        "Id": "CVE-2005-3435",
        "Phase": null,
        "Title": "Product allows attackers to bypass authentication by obtaining the password hash for another user and specifying the hash in the pwd argument. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-327",
    "Title": " Use of a Broken or Risky Cryptographic Algorithm",
    "Description": "The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information. ",
    "ExtendedDescription": "The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nWhen there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data",
        "Description": "Strategy:  Libraries or Frameworks\r\nWhen there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis. \r\nFor example, US government systems require FIPS 140-2 certification. \r\nDo not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak. \r\nPeriodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267] ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Design the software so that one cryptographic algorithm can be replaced with another",
        "Description": "Design the software so that one cryptographic algorithm can be replaced with another. This will make it easier to upgrade to stronger algorithms. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Carefully manage and protect cryptographic keys (see CWE-320)",
        "Description": "Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nIndustry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "When using industry-approved techniques, use them correctly",
        "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-20",
        "Phase": null,
        "Title": null,
        "Description": "Encryption Brute Forcing",
        "Url": "http://capec.mitre.org/data/definitions/20.html"
      },
      {
        "Id": "CAPEC-459",
        "Phase": null,
        "Title": null,
        "Description": "Creating a Rogue Certification Authority Certificate",
        "Url": "http://capec.mitre.org/data/definitions/459.html"
      },
      {
        "Id": "CAPEC-473",
        "Phase": null,
        "Title": null,
        "Description": "Signature Spoof",
        "Url": "http://capec.mitre.org/data/definitions/473.html"
      },
      {
        "Id": "CAPEC-475",
        "Phase": null,
        "Title": null,
        "Description": "Signature Spoofing by Improper Validation",
        "Url": "http://capec.mitre.org/data/definitions/475.html"
      },
      {
        "Id": "CAPEC-608",
        "Phase": null,
        "Title": null,
        "Description": "Cryptanalysis of Cellular Encryption",
        "Url": "http://capec.mitre.org/data/definitions/608.html"
      },
      {
        "Id": "CAPEC-614",
        "Phase": null,
        "Title": null,
        "Description": "Rooting SIM Cards",
        "Url": "http://capec.mitre.org/data/definitions/614.html"
      },
      {
        "Id": "CAPEC-97",
        "Phase": null,
        "Title": null,
        "Description": "Cryptanalysis",
        "Url": "http://capec.mitre.org/data/definitions/97.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-3775",
        "Phase": null,
        "Title": "Product uses \"ROT-25\" to obfuscate the password in the registry. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3775"
      },
      {
        "Id": "CVE-2007-4150",
        "Phase": null,
        "Title": "product only uses \"XOR\" to obfuscate sensitive data ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4150"
      },
      {
        "Id": "CVE-2007-5460",
        "Phase": null,
        "Title": "product only uses \"XOR\" and a fixed key to obfuscate sensitive data ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5460"
      },
      {
        "Id": "CVE-2005-4860",
        "Phase": null,
        "Title": "Product substitutes characters with other characters in a fixed way, and also leaves certain input characters unchanged. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4860"
      },
      {
        "Id": "CVE-2002-2058",
        "Phase": null,
        "Title": "Attackers can infer private IP addresses by dividing each octet by the MD5 hash of '20'. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2058"
      },
      {
        "Id": "CVE-2008-3188",
        "Phase": null,
        "Title": "Product uses DES when MD5 has been specified in the configuration, resulting in weaker-than-expected password hashes. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3188"
      },
      {
        "Id": "CVE-2005-2946",
        "Phase": null,
        "Title": "Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2946"
      },
      {
        "Id": "CVE-2007-6013",
        "Phase": null,
        "Title": "Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6013"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-328",
      "CWE-780",
      "CWE-916",
      "CWE-1240"
    ]
  },
  {
    "Id": "CWE-328",
    "Title": " Reversible One-Way Hash",
    "Description": "The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques. ",
    "ExtendedDescription": "This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required",
        "Description": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. \r\nSome hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. \r\nNote that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-461",
        "Phase": null,
        "Title": null,
        "Description": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness",
        "Url": "http://capec.mitre.org/data/definitions/461.html"
      },
      {
        "Id": "CAPEC-68",
        "Phase": null,
        "Title": null,
        "Description": "Subvert Code-signing Facilities",
        "Url": "http://capec.mitre.org/data/definitions/68.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2006-4068",
        "Phase": null,
        "Title": "Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4068"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-780",
    "Title": " Use of RSA Algorithm without OAEP",
    "Description": "The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption. ",
    "ExtendedDescription": "Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-916",
    "Title": " Use of Password Hash With Insufficient Computational Effort",
    "Description": "The software generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive. ",
    "ExtendedDescription": "Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash. Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker. There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack: The amount of CPU time required to compute the hash (\"stretching\") The amount of memory required to compute the hash (\"memory-hard\" operations) Including a random value, along with the password, as input to the hash computation (\"salting\") Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs (\"one-way\" hashing) Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs (\"collision resistance\") Note that the security requirements for the software may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required",
        "Description": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. \r\nSome hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. \r\nNote that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs. \r\nEffectiveness: High",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "When using industry-approved techniques, use them correctly",
        "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-55",
        "Phase": null,
        "Title": null,
        "Description": "Rainbow Table Password Cracking",
        "Url": "http://capec.mitre.org/data/definitions/55.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-1526",
        "Phase": null,
        "Title": "Router does not use a salt with a hash, making it easier to crack passwords. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1526"
      },
      {
        "Id": "CVE-2006-1058",
        "Phase": null,
        "Title": "Router does not use a salt with a hash, making it easier to crack passwords. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1058"
      },
      {
        "Id": "CVE-2008-4905",
        "Phase": null,
        "Title": "Blogging software uses a hard-coded salt when calculating a password hash. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4905"
      },
      {
        "Id": "CVE-2002-1657",
        "Phase": null,
        "Title": "Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1657"
      },
      {
        "Id": "CVE-2001-0967",
        "Phase": null,
        "Title": "Server uses a constant salt when encrypting passwords, simplifying brute force attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0967"
      },
      {
        "Id": "CVE-2005-0408",
        "Phase": null,
        "Title": "chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0408"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-759",
      "CWE-760"
    ]
  },
  {
    "Id": "CWE-759",
    "Title": " Use of a One-Way Hash without a Salt",
    "Description": "The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software does not also use a salt as part of the input. ",
    "ExtendedDescription": "This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables. It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required",
        "Description": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. \r\nSome hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. \r\nNote that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs. \r\nEffectiveness: High",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds",
        "Description": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password. \r\nEffectiveness: Limited\r\nNote: Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "When using industry-approved techniques, use them correctly",
        "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2008-1526",
        "Phase": null,
        "Title": "Router does not use a salt with a hash, making it easier to crack passwords. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1526"
      },
      {
        "Id": "CVE-2006-1058",
        "Phase": null,
        "Title": "Router does not use a salt with a hash, making it easier to crack passwords. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1058"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-760",
    "Title": " Use of a One-Way Hash with a Predictable Salt",
    "Description": "The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software uses a predictable salt as part of the input. ",
    "ExtendedDescription": "This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide. It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required",
        "Description": "Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use. \r\nSome hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead. \r\nNote that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs. \r\nEffectiveness: High",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds",
        "Description": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password. \r\nEffectiveness: Limited\r\nNote: Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2008-4905",
        "Phase": null,
        "Title": "Blogging software uses a hard-coded salt when calculating a password hash. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4905"
      },
      {
        "Id": "CVE-2002-1657",
        "Phase": null,
        "Title": "Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1657"
      },
      {
        "Id": "CVE-2001-0967",
        "Phase": null,
        "Title": "Server uses a constant salt when encrypting passwords, simplifying brute force attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0967"
      },
      {
        "Id": "CVE-2005-0408",
        "Phase": null,
        "Title": "chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0408"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1240",
    "Title": " Use of a Risky Cryptographic Primitive",
    "Description": "This device implements a cryptographic algorithm using a non-standard or unproven cryptographic primitive. ",
    "ExtendedDescription": "Cryptographic algorithms (or Cryptographic systems) depend on cryptographic primitives as their basic building blocks. As a result, cryptographic primitives are designed to do one very specific task in a precisely defined and highly reliable fashion. For example, one can declare that a specific crypto primitive (like an encryption routine) can only be broken after trying out N different inputs (the larger the value of N, the stronger the crypto). If a vulnerability is found that leads to breaking this primitive in significantly less than N attempts, then the specific cryptographic primitive is considered broken, and the entirety of the cryptographic algorithm (or the cryptographic system) is now considered insecure. Thus, even breaking a seemingly small cryptographic primitive is sufficient to render the whole system vulnerable. Cryptographic primitives are products of extensive reviews from cryptographers, industry, and government entities looking for any possible flaws. However, over time even well-known cryptographic primitives lose their compliance status with the discovery of novel attacks that might either defeat the algorithm or reduce its robustness significantly. If ad-hoc cryptographic primitives are implemented, it is almost certain that such implementations will be vulnerable to attacks resulting in the exposure of sensitive information and other consequences. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Follow these good cryptography practices: \r\n Do not create your own cryptographic algorithms",
        "Description": "Follow these good cryptography practices: \r\n Do not create your own cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.  Do not use outdated or not-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong.  Do not use LFSR as a substitute for an actual Random Number Generator.  Do not use a checksum as a substitute for a cryptographically generated hash.  Design the hardware at a replaceable block level so that one cryptographic algorithm can be replaced with another in the next generation. Use wrappers to make the interfaces uniform. This will make the upgrade path to stronger cryptographic algorithms easier.  Do not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant.  Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms.  When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.  \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-97",
        "Phase": null,
        "Title": null,
        "Description": "Cryptanalysis",
        "Url": "http://capec.mitre.org/data/definitions/97.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This weakness is primarily introduced during the architecture and design phase as risky primitives are included. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Even in cases where the Architectural phase properly specifies a cryptographically secure design, the design may be changed during implementation due to unforeseen constraints. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-353",
    "Title": " Missing Support for Integrity Check",
    "Description": "The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum. ",
    "ExtendedDescription": "If integrity check values or \"checksums\" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used",
        "Description": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent",
        "Description": "Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-13",
        "Phase": null,
        "Title": null,
        "Description": "Subverting Environment Variable Values",
        "Url": "http://capec.mitre.org/data/definitions/13.html"
      },
      {
        "Id": "CAPEC-14",
        "Phase": null,
        "Title": null,
        "Description": "Client-side Injection-induced Buffer Overflow",
        "Url": "http://capec.mitre.org/data/definitions/14.html"
      },
      {
        "Id": "CAPEC-389",
        "Phase": null,
        "Title": null,
        "Description": "Content Spoofing Via Application API Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/389.html"
      },
      {
        "Id": "CAPEC-39",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Opaque Client-based Data Tokens",
        "Url": "http://capec.mitre.org/data/definitions/39.html"
      },
      {
        "Id": "CAPEC-74",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating State",
        "Url": "http://capec.mitre.org/data/definitions/74.html"
      },
      {
        "Id": "CAPEC-75",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Writeable Configuration Files",
        "Url": "http://capec.mitre.org/data/definitions/75.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-354",
    "Title": " Improper Validation of Integrity Check Value",
    "Description": "The software does not validate or incorrectly validates the integrity check values or \"checksums\" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission. ",
    "ExtendedDescription": "Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used",
        "Description": "Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-145",
        "Phase": null,
        "Title": null,
        "Description": "Checksum Spoofing",
        "Url": "http://capec.mitre.org/data/definitions/145.html"
      },
      {
        "Id": "CAPEC-463",
        "Phase": null,
        "Title": null,
        "Description": "Padding Oracle Crypto Attack",
        "Url": "http://capec.mitre.org/data/definitions/463.html"
      },
      {
        "Id": "CAPEC-75",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Writeable Configuration Files",
        "Url": "http://capec.mitre.org/data/definitions/75.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-649",
    "Title": " Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking",
    "Description": "The software uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the software does not use integrity checks to detect if those inputs have been modified. ",
    "ExtendedDescription": "When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary blindly traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Protect important client controllable tokens/parameters for integrity using PKI methods (i",
        "Description": "Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout",
        "Description": "Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state",
        "Description": "Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Obfuscation should not be relied upon",
        "Description": "Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-463",
        "Phase": null,
        "Title": null,
        "Description": "Padding Oracle Crypto Attack",
        "Url": "http://capec.mitre.org/data/definitions/463.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2005-0039",
        "Phase": null,
        "Title": "An IPSec configuration does not perform integrity checking of the IPSec packet as the result of either not configuring ESP properly to support the integrity service or using AH improperly. In either case, the security gateway receiving the IPSec packet would not validate the integrity of the packet to ensure that it was not changed. Thus if the packets were intercepted the attacker could undetectably change some of the bits in the packets. The meaningful bit flipping was possible due to the known weaknesses in the CBC encryption mode. Since the attacker knew the structure of the packet, they were able (in one variation of the attack) to use bit flipping to change the destination IP of the packet to the destination machine controlled by the attacker. And so the destination security gateway would decrypt the packet and then forward the plaintext to the machine controlled by the attacker. The attacker could then read the original message. For instance if VPN was used with the vulnerable IPSec configuration the attacker could read the victim's e-mail. This vulnerability demonstrates the need to enforce the integrity service properly when critical data could be modified by an attacker. This problem might have also been mitigated by using an encryption mode that is not susceptible to bit flipping attacks, but the preferred mechanism to address this problem still remains message verification for integrity. While this attack focuses on the network layer and requires an entity that controls part of the communication path such as a router, the situation is not much different at the software level, where an attacker can modify tokens/parameters used by the application. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0039"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-707",
    "Title": " Improper Neutralization",
    "Description": "The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component. ",
    "ExtendedDescription": "If a message is malformed, it may cause the message to be incorrectly interpreted. Neutralization is an abstract term for any technique that ensures that input (and output) conforms with expectations and is \"safe.\" This can be done by: checking that the input/output is already \"safe\" (e.g. validation) transformation of the input/output to be \"safe\" using techniques such as filtering, encoding/decoding, escaping/unescaping, quoting/unquoting, or canonicalization preventing the input/output from being directly provided by an attacker (e.g. \"indirect selection\" that maps externally-provided values to internally-controlled values) preventing the input/output from being processed at all This weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-250",
        "Phase": null,
        "Title": null,
        "Description": "XML Injection",
        "Url": "http://capec.mitre.org/data/definitions/250.html"
      },
      {
        "Id": "CAPEC-276",
        "Phase": null,
        "Title": null,
        "Description": "Inter-component Protocol Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/276.html"
      },
      {
        "Id": "CAPEC-277",
        "Phase": null,
        "Title": null,
        "Description": "Data Interchange Protocol Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/277.html"
      },
      {
        "Id": "CAPEC-278",
        "Phase": null,
        "Title": null,
        "Description": "Web Services Protocol Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/278.html"
      },
      {
        "Id": "CAPEC-279",
        "Phase": null,
        "Title": null,
        "Description": "SOAP Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/279.html"
      },
      {
        "Id": "CAPEC-3",
        "Phase": null,
        "Title": null,
        "Description": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
        "Url": "http://capec.mitre.org/data/definitions/3.html"
      },
      {
        "Id": "CAPEC-33",
        "Phase": null,
        "Title": null,
        "Description": "HTTP Request Smuggling",
        "Url": "http://capec.mitre.org/data/definitions/33.html"
      },
      {
        "Id": "CAPEC-34",
        "Phase": null,
        "Title": null,
        "Description": "HTTP Response Splitting",
        "Url": "http://capec.mitre.org/data/definitions/34.html"
      },
      {
        "Id": "CAPEC-43",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Multiple Input Interpretation Layers",
        "Url": "http://capec.mitre.org/data/definitions/43.html"
      },
      {
        "Id": "CAPEC-468",
        "Phase": null,
        "Title": null,
        "Description": "Generic Cross-Browser Cross-Domain Theft",
        "Url": "http://capec.mitre.org/data/definitions/468.html"
      },
      {
        "Id": "CAPEC-52",
        "Phase": null,
        "Title": null,
        "Description": "Embedding NULL Bytes",
        "Url": "http://capec.mitre.org/data/definitions/52.html"
      },
      {
        "Id": "CAPEC-53",
        "Phase": null,
        "Title": null,
        "Description": "Postfix, Null Terminate, and Backslash",
        "Url": "http://capec.mitre.org/data/definitions/53.html"
      },
      {
        "Id": "CAPEC-64",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/64.html"
      },
      {
        "Id": "CAPEC-7",
        "Phase": null,
        "Title": null,
        "Description": "Blind SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/7.html"
      },
      {
        "Id": "CAPEC-78",
        "Phase": null,
        "Title": null,
        "Description": "Using Escaped Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/78.html"
      },
      {
        "Id": "CAPEC-79",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/79.html"
      },
      {
        "Id": "CAPEC-83",
        "Phase": null,
        "Title": null,
        "Description": "XPath Injection",
        "Url": "http://capec.mitre.org/data/definitions/83.html"
      },
      {
        "Id": "CAPEC-84",
        "Phase": null,
        "Title": null,
        "Description": "XQuery Injection",
        "Url": "http://capec.mitre.org/data/definitions/84.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-20",
      "CWE-74",
      "CWE-116",
      "CWE-138",
      "CWE-170",
      "CWE-172",
      "CWE-228",
      "CWE-240",
      "CWE-463"
    ]
  },
  {
    "Id": "CWE-20",
    "Title": " Improper Input Validation",
    "Description": "The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. ",
    "ExtendedDescription": "Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution. Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.) Input validation can be applied to: raw data - strings, numbers, parameters, file contents, etc. metadata - information about the raw data, such as headers or size Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Many properties of raw data or metadata may need to be validated upon entry into the code, such as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc. well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a token specified or derived type - the actual type of the input (or what the input appears to be) consistency - between individual data elements, between raw data and metadata, between references, etc. conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that \"input validation\" has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation. Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name \"O'Reilly\" would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Attack Surface Reduction\r\nConsider using language-theoretic security (LangSec) techniques that characterizes inputs using a formal language and builds \"recognizers\" for that language",
        "Description": "Strategy:  Attack Surface Reduction\r\nConsider using language-theoretic security (LangSec) techniques that characterizes inputs using a formal language and builds \"recognizers\" for that language. This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111] ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse an input validation framework such as Struts or the OWASP ESAPI Validation API",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application",
        "Description": "Strategy:  Attack Surface Reduction\r\nUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nEffectiveness: High",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. \r\nEven though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When your application combines data from multiple sources, perform the validation after the sources have been combined",
        "Description": "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code",
        "Description": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number",
        "Description": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181)",
        "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. \r\nConsider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When exchanging data between components, ensure that both components are using the same character encoding",
        "Description": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-10",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow via Environment Variables",
        "Url": "http://capec.mitre.org/data/definitions/10.html"
      },
      {
        "Id": "CAPEC-101",
        "Phase": null,
        "Title": null,
        "Description": "Server Side Include (SSI) Injection",
        "Url": "http://capec.mitre.org/data/definitions/101.html"
      },
      {
        "Id": "CAPEC-104",
        "Phase": null,
        "Title": null,
        "Description": "Cross Zone Scripting",
        "Url": "http://capec.mitre.org/data/definitions/104.html"
      },
      {
        "Id": "CAPEC-108",
        "Phase": null,
        "Title": null,
        "Description": "Command Line Execution through SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/108.html"
      },
      {
        "Id": "CAPEC-109",
        "Phase": null,
        "Title": null,
        "Description": "Object Relational Mapping Injection",
        "Url": "http://capec.mitre.org/data/definitions/109.html"
      },
      {
        "Id": "CAPEC-110",
        "Phase": null,
        "Title": null,
        "Description": "SQL Injection through SOAP Parameter Tampering",
        "Url": "http://capec.mitre.org/data/definitions/110.html"
      },
      {
        "Id": "CAPEC-120",
        "Phase": null,
        "Title": null,
        "Description": "Double Encoding",
        "Url": "http://capec.mitre.org/data/definitions/120.html"
      },
      {
        "Id": "CAPEC-13",
        "Phase": null,
        "Title": null,
        "Description": "Subverting Environment Variable Values",
        "Url": "http://capec.mitre.org/data/definitions/13.html"
      },
      {
        "Id": "CAPEC-135",
        "Phase": null,
        "Title": null,
        "Description": "Format String Injection",
        "Url": "http://capec.mitre.org/data/definitions/135.html"
      },
      {
        "Id": "CAPEC-136",
        "Phase": null,
        "Title": null,
        "Description": "LDAP Injection",
        "Url": "http://capec.mitre.org/data/definitions/136.html"
      },
      {
        "Id": "CAPEC-14",
        "Phase": null,
        "Title": null,
        "Description": "Client-side Injection-induced Buffer Overflow",
        "Url": "http://capec.mitre.org/data/definitions/14.html"
      },
      {
        "Id": "CAPEC-153",
        "Phase": null,
        "Title": null,
        "Description": "Input Data Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/153.html"
      },
      {
        "Id": "CAPEC-182",
        "Phase": null,
        "Title": null,
        "Description": "Flash Injection",
        "Url": "http://capec.mitre.org/data/definitions/182.html"
      },
      {
        "Id": "CAPEC-209",
        "Phase": null,
        "Title": null,
        "Description": "XSS Using MIME Type Mismatch",
        "Url": "http://capec.mitre.org/data/definitions/209.html"
      },
      {
        "Id": "CAPEC-22",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Trust in Client",
        "Url": "http://capec.mitre.org/data/definitions/22.html"
      },
      {
        "Id": "CAPEC-23",
        "Phase": null,
        "Title": null,
        "Description": "File Content Injection",
        "Url": "http://capec.mitre.org/data/definitions/23.html"
      },
      {
        "Id": "CAPEC-230",
        "Phase": null,
        "Title": null,
        "Description": "XML Nested Payloads",
        "Url": "http://capec.mitre.org/data/definitions/230.html"
      },
      {
        "Id": "CAPEC-231",
        "Phase": null,
        "Title": null,
        "Description": "Oversized Serialized Data Payloads",
        "Url": "http://capec.mitre.org/data/definitions/231.html"
      },
      {
        "Id": "CAPEC-24",
        "Phase": null,
        "Title": null,
        "Description": "Filter Failure through Buffer Overflow",
        "Url": "http://capec.mitre.org/data/definitions/24.html"
      },
      {
        "Id": "CAPEC-250",
        "Phase": null,
        "Title": null,
        "Description": "XML Injection",
        "Url": "http://capec.mitre.org/data/definitions/250.html"
      },
      {
        "Id": "CAPEC-261",
        "Phase": null,
        "Title": null,
        "Description": "Fuzzing for garnering other adjacent user/sensitive data",
        "Url": "http://capec.mitre.org/data/definitions/261.html"
      },
      {
        "Id": "CAPEC-267",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/267.html"
      },
      {
        "Id": "CAPEC-28",
        "Phase": null,
        "Title": null,
        "Description": "Fuzzing",
        "Url": "http://capec.mitre.org/data/definitions/28.html"
      },
      {
        "Id": "CAPEC-3",
        "Phase": null,
        "Title": null,
        "Description": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
        "Url": "http://capec.mitre.org/data/definitions/3.html"
      },
      {
        "Id": "CAPEC-31",
        "Phase": null,
        "Title": null,
        "Description": "Accessing/Intercepting/Modifying HTTP Cookies",
        "Url": "http://capec.mitre.org/data/definitions/31.html"
      },
      {
        "Id": "CAPEC-42",
        "Phase": null,
        "Title": null,
        "Description": "MIME Conversion",
        "Url": "http://capec.mitre.org/data/definitions/42.html"
      },
      {
        "Id": "CAPEC-43",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Multiple Input Interpretation Layers",
        "Url": "http://capec.mitre.org/data/definitions/43.html"
      },
      {
        "Id": "CAPEC-45",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow via Symbolic Links",
        "Url": "http://capec.mitre.org/data/definitions/45.html"
      },
      {
        "Id": "CAPEC-46",
        "Phase": null,
        "Title": null,
        "Description": "Overflow Variables and Tags",
        "Url": "http://capec.mitre.org/data/definitions/46.html"
      },
      {
        "Id": "CAPEC-47",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow via Parameter Expansion",
        "Url": "http://capec.mitre.org/data/definitions/47.html"
      },
      {
        "Id": "CAPEC-473",
        "Phase": null,
        "Title": null,
        "Description": "Signature Spoof",
        "Url": "http://capec.mitre.org/data/definitions/473.html"
      },
      {
        "Id": "CAPEC-52",
        "Phase": null,
        "Title": null,
        "Description": "Embedding NULL Bytes",
        "Url": "http://capec.mitre.org/data/definitions/52.html"
      },
      {
        "Id": "CAPEC-53",
        "Phase": null,
        "Title": null,
        "Description": "Postfix, Null Terminate, and Backslash",
        "Url": "http://capec.mitre.org/data/definitions/53.html"
      },
      {
        "Id": "CAPEC-588",
        "Phase": null,
        "Title": null,
        "Description": "DOM-Based XSS",
        "Url": "http://capec.mitre.org/data/definitions/588.html"
      },
      {
        "Id": "CAPEC-63",
        "Phase": null,
        "Title": null,
        "Description": "Cross-Site Scripting (XSS)",
        "Url": "http://capec.mitre.org/data/definitions/63.html"
      },
      {
        "Id": "CAPEC-64",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/64.html"
      },
      {
        "Id": "CAPEC-67",
        "Phase": null,
        "Title": null,
        "Description": "String Format Overflow in syslog()",
        "Url": "http://capec.mitre.org/data/definitions/67.html"
      },
      {
        "Id": "CAPEC-7",
        "Phase": null,
        "Title": null,
        "Description": "Blind SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/7.html"
      },
      {
        "Id": "CAPEC-71",
        "Phase": null,
        "Title": null,
        "Description": "Using Unicode Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/71.html"
      },
      {
        "Id": "CAPEC-72",
        "Phase": null,
        "Title": null,
        "Description": "URL Encoding",
        "Url": "http://capec.mitre.org/data/definitions/72.html"
      },
      {
        "Id": "CAPEC-73",
        "Phase": null,
        "Title": null,
        "Description": "User-Controlled Filename",
        "Url": "http://capec.mitre.org/data/definitions/73.html"
      },
      {
        "Id": "CAPEC-78",
        "Phase": null,
        "Title": null,
        "Description": "Using Escaped Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/78.html"
      },
      {
        "Id": "CAPEC-79",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/79.html"
      },
      {
        "Id": "CAPEC-8",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow in an API Call",
        "Url": "http://capec.mitre.org/data/definitions/8.html"
      },
      {
        "Id": "CAPEC-80",
        "Phase": null,
        "Title": null,
        "Description": "Using UTF-8 Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/80.html"
      },
      {
        "Id": "CAPEC-81",
        "Phase": null,
        "Title": null,
        "Description": "Web Logs Tampering",
        "Url": "http://capec.mitre.org/data/definitions/81.html"
      },
      {
        "Id": "CAPEC-83",
        "Phase": null,
        "Title": null,
        "Description": "XPath Injection",
        "Url": "http://capec.mitre.org/data/definitions/83.html"
      },
      {
        "Id": "CAPEC-85",
        "Phase": null,
        "Title": null,
        "Description": "AJAX Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/85.html"
      },
      {
        "Id": "CAPEC-88",
        "Phase": null,
        "Title": null,
        "Description": "OS Command Injection",
        "Url": "http://capec.mitre.org/data/definitions/88.html"
      },
      {
        "Id": "CAPEC-9",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow in Local Command-Line Utilities",
        "Url": "http://capec.mitre.org/data/definitions/9.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-5305",
        "Phase": null,
        "Title": "Eval injection in Perl program using an ID that should only contain hyphens and numbers. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5305"
      },
      {
        "Id": "CVE-2008-2223",
        "Phase": null,
        "Title": "SQL injection through an ID that was supposed to be numeric. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2223"
      },
      {
        "Id": "CVE-2008-3477",
        "Phase": null,
        "Title": "lack of input validation in spreadsheet program leads to buffer overflows, integer overflows, array index errors, and memory corruption. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3477"
      },
      {
        "Id": "CVE-2008-3843",
        "Phase": null,
        "Title": "insufficient validation enables XSS ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3843"
      },
      {
        "Id": "CVE-2008-3174",
        "Phase": null,
        "Title": "driver in security product allows code execution due to insufficient validation ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3174"
      },
      {
        "Id": "CVE-2007-3409",
        "Phase": null,
        "Title": "infinite loop from DNS packet with a label that points to itself ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3409"
      },
      {
        "Id": "CVE-2006-6870",
        "Phase": null,
        "Title": "infinite loop from DNS packet with a label that points to itself ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6870"
      },
      {
        "Id": "CVE-2008-1303",
        "Phase": null,
        "Title": "missing parameter leads to crash ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1303"
      },
      {
        "Id": "CVE-2007-5893",
        "Phase": null,
        "Title": "HTTP request with missing protocol version number leads to crash ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5893"
      },
      {
        "Id": "CVE-2006-6658",
        "Phase": null,
        "Title": "request with missing parameters leads to information exposure ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6658"
      },
      {
        "Id": "CVE-2008-4114",
        "Phase": null,
        "Title": "system crash with offset value that is inconsistent with packet size ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4114"
      },
      {
        "Id": "CVE-2006-3790",
        "Phase": null,
        "Title": "size field that is inconsistent with packet size leads to buffer over-read ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3790"
      },
      {
        "Id": "CVE-2008-2309",
        "Phase": null,
        "Title": "product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2309"
      },
      {
        "Id": "CVE-2008-3494",
        "Phase": null,
        "Title": "security bypass via an extra header ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3494"
      },
      {
        "Id": "CVE-2008-3571",
        "Phase": null,
        "Title": "empty packet triggers reboot ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3571"
      },
      {
        "Id": "CVE-2006-5525",
        "Phase": null,
        "Title": "incomplete denylist allows SQL injection ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5525"
      },
      {
        "Id": "CVE-2008-1284",
        "Phase": null,
        "Title": "NUL byte in theme name causes directory traversal impact to be worse ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1284"
      },
      {
        "Id": "CVE-2008-0600",
        "Phase": null,
        "Title": "kernel does not validate an incoming pointer before dereferencing it ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0600"
      },
      {
        "Id": "CVE-2008-1738",
        "Phase": null,
        "Title": "anti-virus product has insufficient input validation of hooked SSDT functions, allowing code execution ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1738"
      },
      {
        "Id": "CVE-2008-1737",
        "Phase": null,
        "Title": "anti-virus product allows DoS via zero-length field ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1737"
      },
      {
        "Id": "CVE-2008-3464",
        "Phase": null,
        "Title": "driver does not validate input from userland to the kernel ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3464"
      },
      {
        "Id": "CVE-2008-2252",
        "Phase": null,
        "Title": "kernel does not validate parameters sent in from userland, allowing code execution ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2252"
      },
      {
        "Id": "CVE-2008-2374",
        "Phase": null,
        "Title": "lack of validation of string length fields allows memory consumption or buffer over-read ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2374"
      },
      {
        "Id": "CVE-2008-1440",
        "Phase": null,
        "Title": "lack of validation of length field leads to infinite loop ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1440"
      },
      {
        "Id": "CVE-2008-1625",
        "Phase": null,
        "Title": "lack of validation of input to an IOCTL allows code execution ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1625"
      },
      {
        "Id": "CVE-2008-3177",
        "Phase": null,
        "Title": "zero-length attachment causes crash ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3177"
      },
      {
        "Id": "CVE-2007-2442",
        "Phase": null,
        "Title": "zero-length input causes free of uninitialized pointer ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2442"
      },
      {
        "Id": "CVE-2008-5563",
        "Phase": null,
        "Title": "crash via a malformed frame structure ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5563"
      },
      {
        "Id": "CVE-2008-5285",
        "Phase": null,
        "Title": "infinite loop from a long SMTP request ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5285"
      },
      {
        "Id": "CVE-2008-3812",
        "Phase": null,
        "Title": "router crashes with a malformed packet ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3812"
      },
      {
        "Id": "CVE-2008-3680",
        "Phase": null,
        "Title": "packet with invalid version number leads to NULL pointer dereference ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3680"
      },
      {
        "Id": "CVE-2008-3660",
        "Phase": null,
        "Title": "crash via multiple \".\" characters in file extension ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3660"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. If a programmer believes that an attacker cannot modify certain inputs, then the programmer might not perform any input validation at all. For example, in web applications, many programmers believe that cookies and hidden form fields can not be modified from a web browser (CWE-472), although they can be altered using a proxy or a custom program. In a client-server architecture, the programmer might assume that client-side security checks cannot be bypassed, even when a custom client could be written that skips those checks (CWE-602). ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-179",
      "CWE-622",
      "CWE-1173",
      "CWE-1284",
      "CWE-1285",
      "CWE-1286",
      "CWE-1287",
      "CWE-1288",
      "CWE-1289"
    ]
  },
  {
    "Id": "CWE-179",
    "Title": " Incorrect Behavior Order",
    "Description": "The software validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification. ",
    "ExtendedDescription": "Software needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-3",
        "Phase": null,
        "Title": null,
        "Description": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
        "Url": "http://capec.mitre.org/data/definitions/3.html"
      },
      {
        "Id": "CAPEC-43",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Multiple Input Interpretation Layers",
        "Url": "http://capec.mitre.org/data/definitions/43.html"
      },
      {
        "Id": "CAPEC-71",
        "Phase": null,
        "Title": null,
        "Description": "Using Unicode Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/71.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0433",
        "Phase": null,
        "Title": "Product allows remote attackers to view restricted files via an HTTP request containing a \"*\" (wildcard or asterisk) character. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0433"
      },
      {
        "Id": "CVE-2003-0332",
        "Phase": null,
        "Title": "Product modifies the first two letters of a filename extension after performing a security check, which allows remote attackers to bypass authentication via a filename with a .ats extension instead of a .hts extension. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0332"
      },
      {
        "Id": "CVE-2002-0802",
        "Phase": null,
        "Title": "Database consumes an extra character when processing a character that cannot be converted, which could remove an escape character from the query and make the application subject to SQL injection attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0802"
      },
      {
        "Id": "CVE-2000-0191",
        "Phase": null,
        "Title": "Overlaps \"fakechild/../realchild\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0191"
      },
      {
        "Id": "CVE-2004-2363",
        "Phase": null,
        "Title": "Product checks URI for \"&lt;\" and other literal characters, but does it before hex decoding the URI, so \"%3E\" and other sequences are allowed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2363"
      },
      {
        "Id": "CVE-2002-0934",
        "Phase": null,
        "Title": "Directory traversal vulnerability allows remote attackers to read or modify arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a \"..\" sequence. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0934"
      },
      {
        "Id": "CVE-2003-0282",
        "Phase": null,
        "Title": "Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a \"..\" sequence. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0282"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Since early validation errors usually arise from improperly implemented defensive mechanisms, it is likely that these will be introduced more frequently as secure programming becomes implemented more widely. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-180",
      "CWE-181"
    ]
  },
  {
    "Id": "CWE-180",
    "Title": " Incorrect Behavior Order",
    "Description": "The software validates input before it is canonicalized, which prevents the software from detecting data that becomes invalid after the canonicalization step. ",
    "ExtendedDescription": "This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-267",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/267.html"
      },
      {
        "Id": "CAPEC-3",
        "Phase": null,
        "Title": null,
        "Description": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
        "Url": "http://capec.mitre.org/data/definitions/3.html"
      },
      {
        "Id": "CAPEC-71",
        "Phase": null,
        "Title": null,
        "Description": "Using Unicode Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/71.html"
      },
      {
        "Id": "CAPEC-78",
        "Phase": null,
        "Title": null,
        "Description": "Using Escaped Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/78.html"
      },
      {
        "Id": "CAPEC-79",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/79.html"
      },
      {
        "Id": "CAPEC-80",
        "Phase": null,
        "Title": null,
        "Description": "Using UTF-8 Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/80.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0433",
        "Phase": null,
        "Title": "Product allows remote attackers to view restricted files via an HTTP request containing a \"*\" (wildcard or asterisk) character. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0433"
      },
      {
        "Id": "CVE-2003-0332",
        "Phase": null,
        "Title": "Product modifies the first two letters of a filename extension after performing a security check, which allows remote attackers to bypass authentication via a filename with a .ats extension instead of a .hts extension. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0332"
      },
      {
        "Id": "CVE-2002-0802",
        "Phase": null,
        "Title": "Database consumes an extra character when processing a character that cannot be converted, which could remove an escape character from the query and make the application subject to SQL injection attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0802"
      },
      {
        "Id": "CVE-2000-0191",
        "Phase": null,
        "Title": "Overlaps \"fakechild/../realchild\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0191"
      },
      {
        "Id": "CVE-2004-2363",
        "Phase": null,
        "Title": "Product checks URI for \"&lt;\" and other literal characters, but does it before hex decoding the URI, so \"%3E\" and other sequences are allowed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2363"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-181",
    "Title": " Incorrect Behavior Order",
    "Description": "The software validates data before it has been filtered, which prevents the software from detecting data that becomes invalid after the filtering step. ",
    "ExtendedDescription": "This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "Inputs should be decoded and canonicalized to the application's current internal representation before being filtered",
        "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being filtered. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-120",
        "Phase": null,
        "Title": null,
        "Description": "Double Encoding",
        "Url": "http://capec.mitre.org/data/definitions/120.html"
      },
      {
        "Id": "CAPEC-267",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/267.html"
      },
      {
        "Id": "CAPEC-3",
        "Phase": null,
        "Title": null,
        "Description": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
        "Url": "http://capec.mitre.org/data/definitions/3.html"
      },
      {
        "Id": "CAPEC-43",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Multiple Input Interpretation Layers",
        "Url": "http://capec.mitre.org/data/definitions/43.html"
      },
      {
        "Id": "CAPEC-78",
        "Phase": null,
        "Title": null,
        "Description": "Using Escaped Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/78.html"
      },
      {
        "Id": "CAPEC-79",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/79.html"
      },
      {
        "Id": "CAPEC-80",
        "Phase": null,
        "Title": null,
        "Description": "Using UTF-8 Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/80.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0934",
        "Phase": null,
        "Title": "Directory traversal vulnerability allows remote attackers to read or modify arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a \"..\" sequence. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0934"
      },
      {
        "Id": "CVE-2003-0282",
        "Phase": null,
        "Title": "Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a \"..\" sequence. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0282"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-622",
    "Title": " Improper Validation of Function Hook Arguments",
    "Description": "The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities. ",
    "ExtendedDescription": "Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that all arguments are verified, as defined by the API you are protecting",
        "Description": "Ensure that all arguments are verified, as defined by the API you are protecting. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Drop privileges before invoking such functions, if possible",
        "Description": "Drop privileges before invoking such functions, if possible. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2007-0708",
        "Phase": null,
        "Title": "DoS in firewall using standard Microsoft functions ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0708"
      },
      {
        "Id": "CVE-2006-7160",
        "Phase": null,
        "Title": "DoS in firewall using standard Microsoft functions ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7160"
      },
      {
        "Id": "CVE-2007-1376",
        "Phase": null,
        "Title": "function does not verify that its argument is the proper type, leading to arbitrary memory write ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1376"
      },
      {
        "Id": "CVE-2007-1220",
        "Phase": null,
        "Title": "invalid syscall arguments bypass code execution limits ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1220"
      },
      {
        "Id": "CVE-2006-4541",
        "Phase": null,
        "Title": "DoS in IDS via NULL argument ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4541"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1173",
    "Title": " Improper Use of Validation Framework",
    "Description": "The application does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library. ",
    "ExtendedDescription": "Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the application. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Properly use provided input validation frameworks",
        "Description": "Properly use provided input validation frameworks. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "This weakness may occur when developers do not correctly use a provided input validation framework. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-102",
      "CWE-105",
      "CWE-106",
      "CWE-108",
      "CWE-109",
      "CWE-554",
      "CWE-1174"
    ]
  },
  {
    "Id": "CWE-102",
    "Title": " Struts",
    "Description": "The application uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect. ",
    "ExtendedDescription": "If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "The DTD or schema validation will not catch the duplicate occurrence of the same form name",
        "Description": "The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-105",
    "Title": " Struts",
    "Description": "The application has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation. ",
    "ExtendedDescription": "Omitting validation for even a single input field may give attackers the leeway they need to compromise the application. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that you validate all form fields",
        "Description": "Ensure that you validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Some applications use the same ActionForm for more than one purpose. In situations like this, some fields may go unused under some action mappings. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-106",
    "Title": " Struts",
    "Description": "When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation. ",
    "ExtendedDescription": "Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Input Validation\r\nUse an input validation framework such as Struts",
        "Description": "Strategy:  Input Validation\r\nUse an input validation framework such as Struts. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse an input validation framework such as Struts",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse an input validation framework such as Struts. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nUse the Struts Validator to validate all program input before it is processed by the application",
        "Description": "Strategy:  Input Validation\r\nUse the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in your configuration of the Struts Validator. Example uses of the validator include checking to ensure that: \r\n  Phone number fields contain only valid characters in phone numbers  Boolean values are only \"T\" or \"F\"  Free-form strings are of a reasonable length and composition   ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse the Struts Validator to validate all program input before it is processed by the application",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in your configuration of the Struts Validator. Example uses of the validator include checking to ensure that: \r\n  Phone number fields contain only valid characters in phone numbers  Boolean values are only \"T\" or \"F\"  Free-form strings are of a reasonable length and composition   ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-108",
    "Title": " Struts",
    "Description": "Every Action Form must have a corresponding validation form. ",
    "ExtendedDescription": "If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nMap every Action Form to a corresponding validation form",
        "Description": "Strategy:  Input Validation\r\nMap every Action Form to a corresponding validation form. \r\nAn action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-109",
    "Title": " Struts",
    "Description": "Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that an action form mapping enables validation",
        "Description": "Ensure that an action form mapping enables validation. Set the validate field to true. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-554",
    "Title": " ASP.NET Misconfiguration",
    "Description": "The ASP.NET application does not use an input validation framework. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use the ASP",
        "Description": "Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that: \r\n  Phone number fields contain only valid characters in phone numbers  Boolean values are only \"T\" or \"F\"  Free-form strings are of a reasonable length and composition   ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1174",
    "Title": " ASP.NET Misconfiguration",
    "Description": "The ASP.NET application does not use, or incorrectly uses, the model validation framework. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1284",
    "Title": " Improper Validation of Specified Quantity in Input",
    "Description": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties. ",
    "ExtendedDescription": "Specified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2008-1440",
        "Phase": null,
        "Title": "lack of validation of length field leads to infinite loop ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1440"
      },
      {
        "Id": "CVE-2008-2374",
        "Phase": null,
        "Title": "lack of validation of string length fields allows memory consumption or buffer over-read ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2374"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-606",
      "CWE-789"
    ]
  },
  {
    "Id": "CWE-606",
    "Title": " Unchecked Input for Loop Condition",
    "Description": "The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Do not use user-controlled data for loop conditions",
        "Description": "Do not use user-controlled data for loop conditions. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Perform input validation",
        "Description": "Perform input validation. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-789",
    "Title": " Uncontrolled Memory Allocation",
    "Description": "The product allocates memory based on an untrusted size value, but it does not validate or incorrectly validates the size, allowing arbitrary amounts of memory to be allocated. ",
    "ExtendedDescription": null,
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "Perform adequate input validation against any value that influences the amount of memory that is allocated",
        "Description": "Perform adequate input validation against any value that influences the amount of memory that is allocated. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Run your program using system-provided resource limits for memory",
        "Description": "Run your program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2008-1708",
        "Phase": null,
        "Title": "memory consumption and daemon exit by specifying a large value in a length field ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1708"
      },
      {
        "Id": "CVE-2008-0977",
        "Phase": null,
        "Title": "large value in a length field leads to memory consumption and crash when no more memory is available ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0977"
      },
      {
        "Id": "CVE-2006-3791",
        "Phase": null,
        "Title": "large key size in game program triggers crash when a resizing function cannot allocate enough memory ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3791"
      },
      {
        "Id": "CVE-2004-2589",
        "Phase": null,
        "Title": "large Content-Length HTTP header value triggers application crash in instant messaging application due to failure in memory allocation ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2589"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1285",
    "Title": " Improper Validation of Specified Index, Position, or Offset in Input",
    "Description": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties. ",
    "ExtendedDescription": "Often, indexable resources such as memory buffers or files can be accessed using a specific position, index, or offset, such as an index for an array or a position for a file. When untrusted input is not properly validated before it is used as an index, attackers could access (or attempt to access) unauthorized portions of these resources. This could be used to cause buffer overflows, excessive resource allocation, or trigger unexpected failures. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-0369",
        "Phase": null,
        "Title": "large ID in packet used as array index ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0369"
      },
      {
        "Id": "CVE-2001-1009",
        "Phase": null,
        "Title": "negative array index as argument to POP LIST command ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1009"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-129",
      "CWE-781"
    ]
  },
  {
    "Id": "CWE-129",
    "Title": " Improper Validation of Array Index",
    "Description": "The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array. ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Input Validation\r\nUse an input validation framework such as Struts or the OWASP ESAPI Validation API",
        "Description": "Strategy:  Input Validation\r\nUse an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. \r\nEven though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Strategy:  Language Selection\r\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Language Selection\r\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, Ada allows the programmer to constrain the values of a variable and languages such as Java and Ruby will allow the programmer to handle exceptions when an out-of-bounds index is accessed. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory",
        "Description": "Strategy:  Environment Hardening\r\nRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. \r\nExamples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. \r\nEffectiveness: Defense in Depth\r\nNote: This is not a complete solution. However, it forces the attacker to guess an unknown value that changes every program execution. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Strategy:  Environment Hardening\r\nUse a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61]",
        "Description": "Strategy:  Environment Hardening\r\nUse a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61]. \r\nEffectiveness: Defense in Depth\r\nNote: This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen accessing a user-controlled array index, use a stringent range of values that are within the target array. Make sure that you do not allow negative values to be used. That is, verify the minimum as well as the maximum of the range of acceptable values. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code",
        "Description": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]",
        "Description": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Sandbox or Jail\r\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system",
        "Description": "Strategy:  Sandbox or Jail\r\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. \r\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. \r\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. \r\nBe careful to avoid CWE-243 and other weaknesses related to jails. \r\nEffectiveness: Limited\r\nNote: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-100",
        "Phase": null,
        "Title": null,
        "Description": "Overflow Buffers",
        "Url": "http://capec.mitre.org/data/definitions/100.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2005-0369",
        "Phase": null,
        "Title": "large ID in packet used as array index ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0369"
      },
      {
        "Id": "CVE-2001-1009",
        "Phase": null,
        "Title": "negative array index as argument to POP LIST command ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1009"
      },
      {
        "Id": "CVE-2003-0721",
        "Phase": null,
        "Title": "Integer signedness error leads to negative array index ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0721"
      },
      {
        "Id": "CVE-2004-1189",
        "Phase": null,
        "Title": "product does not properly track a count and a maximum number, which can lead to resultant array index overflow. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1189"
      },
      {
        "Id": "CVE-2007-5756",
        "Phase": null,
        "Title": "Chain: device driver for packet-capturing software allows access to an unintended IOCTL with resultant array index error. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5756"
      },
      {
        "Id": "CVE-2005-2456",
        "Phase": null,
        "Title": "Chain: array index error (CWE-129) leads to deadlock (CWE-833) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2456"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-781",
    "Title": " Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code",
    "Description": "The software defines an IOCTL that uses METHOD_NEITHER for I/O, but it does not validate or incorrectly validates the addresses that are provided. ",
    "ExtendedDescription": "When an IOCTL uses the METHOD_NEITHER option for I/O control, it is the responsibility of the IOCTL to validate the addresses that have been supplied to it. If validation is missing or incorrect, attackers can supply arbitrary memory addresses, leading to code execution or a denial of service. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If METHOD_NEITHER is required for the IOCTL, then ensure that all user-space addresses are properly validated before they are first accessed",
        "Description": "If METHOD_NEITHER is required for the IOCTL, then ensure that all user-space addresses are properly validated before they are first accessed. The ProbeForRead and ProbeForWrite routines are available for this task. Also properly protect and manage the user-supplied buffers, since the I/O Manager does not do this when METHOD_NEITHER is being used. See References. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT",
        "Description": "If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "If the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace",
        "Description": "If the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace. See References. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2006-2373",
        "Phase": null,
        "Title": "Driver for file-sharing and messaging protocol allows attackers to execute arbitrary code. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2373"
      },
      {
        "Id": "CVE-2009-0686",
        "Phase": null,
        "Title": "Anti-virus product does not validate addresses, allowing attackers to gain SYSTEM privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0686"
      },
      {
        "Id": "CVE-2009-0824",
        "Phase": null,
        "Title": "DVD software allows attackers to cause a crash. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0824"
      },
      {
        "Id": "CVE-2008-5724",
        "Phase": null,
        "Title": "Personal firewall allows attackers to gain SYSTEM privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5724"
      },
      {
        "Id": "CVE-2007-5756",
        "Phase": null,
        "Title": "chain: device driver for packet-capturing software allows access to an unintended IOCTL with resultant array index error. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5756"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1286",
    "Title": " Improper Validation of Syntactic Correctness of Input",
    "Description": "The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax. ",
    "ExtendedDescription": "Often, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages. When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-66",
        "Phase": null,
        "Title": null,
        "Description": "SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/66.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2007-5893",
        "Phase": null,
        "Title": "HTTP request with missing protocol version number leads to crash ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5893"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-112"
    ]
  },
  {
    "Id": "CWE-112",
    "Title": " Missing XML Validation",
    "Description": "The software accepts XML from an untrusted source but does not validate the XML against the proper schema. ",
    "ExtendedDescription": "Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Input Validation\r\nAlways validate XML input against a known XML Schema or DTD",
        "Description": "Strategy:  Input Validation\r\nAlways validate XML input against a known XML Schema or DTD. \r\nIt is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-230",
        "Phase": null,
        "Title": null,
        "Description": "XML Nested Payloads",
        "Url": "http://capec.mitre.org/data/definitions/230.html"
      },
      {
        "Id": "CAPEC-231",
        "Phase": null,
        "Title": null,
        "Description": "Oversized Serialized Data Payloads",
        "Url": "http://capec.mitre.org/data/definitions/231.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1287",
    "Title": " Improper Validation of Specified Type of Input",
    "Description": "The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type. ",
    "ExtendedDescription": "When input does not comply with the expected type, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities that would not be possible if the input conformed with the expected type. This weakness can appear in type-unsafe programming languages, or in programming languages that support casting or conversion of an input to another type. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2008-2223",
        "Phase": null,
        "Title": "SQL injection through an ID that was supposed to be numeric. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2223"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1288",
    "Title": " Improper Validation of Consistency within Input",
    "Description": "The product receives a complex input with multiple elements or fields that must be consistent with each other, but it does not validate or incorrectly validates that the input is actually consistent. ",
    "ExtendedDescription": "Some input data can be structured with multiple elements or fields that must be consistent with each other, e.g. a number-of-items field that is followed by the expected number of elements. When such complex inputs are inconsistent, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2018-16733",
        "Phase": null,
        "Title": "product does not validate that the start block appears before the end block ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16733"
      },
      {
        "Id": "CVE-2006-3790",
        "Phase": null,
        "Title": "size field that is inconsistent with packet size leads to buffer over-read ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3790"
      },
      {
        "Id": "CVE-2008-4114",
        "Phase": null,
        "Title": "system crash with offset value that is inconsistent with packet size ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4114"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1289",
    "Title": " Improper Validation of Unsafe Equivalence in Input",
    "Description": "The product receives an input value that is used as a resource identifier or other type of reference, but it does not validate or incorrectly validates that the input is equivalent to a potentially-unsafe value. ",
    "ExtendedDescription": "Attackers can sometimes bypass input validation schemes by finding inputs that appear to be safe, but will be dangerous when processed at a lower layer or by a downstream component. For example, a simple XSS protection mechanism might try to validate that an input has no \"&lt;script&gt;\" tags using case-sensitive matching, but since HTML is case-insensitive when processed by web browsers, an attacker could injest \"&lt;ScrIpT&gt;\" and trigger XSS. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-0269",
        "Phase": null,
        "Title": "File extension check in forum software only verifies extensions that contain all lowercase letters, which allows remote attackers to upload arbitrary files via file extensions that include uppercase letters. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0269"
      },
      {
        "Id": "CVE-2001-1238",
        "Phase": null,
        "Title": "Task Manager does not allow local users to end processes with uppercase letters named (1) winlogon.exe, (2) csrss.exe, (3) smss.exe and (4) services.exe via the Process tab which could allow local users to install Trojan horses that cannot be stopped. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1238"
      },
      {
        "Id": "CVE-2004-2214",
        "Phase": null,
        "Title": "HTTP server allows bypass of access restrictions using URIs with mixed case. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2214"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-74",
    "Title": " Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "Description": "The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component. ",
    "ExtendedDescription": "Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Programming languages and supporting technologies might be chosen which are not subject to these issues",
        "Description": "Programming languages and supporting technologies might be chosen which are not subject to these issues. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Utilize an appropriate mix of allowlist and denylist parsing to filter control-plane syntax from all input",
        "Description": "Utilize an appropriate mix of allowlist and denylist parsing to filter control-plane syntax from all input. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-10",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow via Environment Variables",
        "Url": "http://capec.mitre.org/data/definitions/10.html"
      },
      {
        "Id": "CAPEC-101",
        "Phase": null,
        "Title": null,
        "Description": "Server Side Include (SSI) Injection",
        "Url": "http://capec.mitre.org/data/definitions/101.html"
      },
      {
        "Id": "CAPEC-108",
        "Phase": null,
        "Title": null,
        "Description": "Command Line Execution through SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/108.html"
      },
      {
        "Id": "CAPEC-120",
        "Phase": null,
        "Title": null,
        "Description": "Double Encoding",
        "Url": "http://capec.mitre.org/data/definitions/120.html"
      },
      {
        "Id": "CAPEC-13",
        "Phase": null,
        "Title": null,
        "Description": "Subverting Environment Variable Values",
        "Url": "http://capec.mitre.org/data/definitions/13.html"
      },
      {
        "Id": "CAPEC-135",
        "Phase": null,
        "Title": null,
        "Description": "Format String Injection",
        "Url": "http://capec.mitre.org/data/definitions/135.html"
      },
      {
        "Id": "CAPEC-14",
        "Phase": null,
        "Title": null,
        "Description": "Client-side Injection-induced Buffer Overflow",
        "Url": "http://capec.mitre.org/data/definitions/14.html"
      },
      {
        "Id": "CAPEC-24",
        "Phase": null,
        "Title": null,
        "Description": "Filter Failure through Buffer Overflow",
        "Url": "http://capec.mitre.org/data/definitions/24.html"
      },
      {
        "Id": "CAPEC-250",
        "Phase": null,
        "Title": null,
        "Description": "XML Injection",
        "Url": "http://capec.mitre.org/data/definitions/250.html"
      },
      {
        "Id": "CAPEC-267",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/267.html"
      },
      {
        "Id": "CAPEC-273",
        "Phase": null,
        "Title": null,
        "Description": "HTTP Response Smuggling",
        "Url": "http://capec.mitre.org/data/definitions/273.html"
      },
      {
        "Id": "CAPEC-28",
        "Phase": null,
        "Title": null,
        "Description": "Fuzzing",
        "Url": "http://capec.mitre.org/data/definitions/28.html"
      },
      {
        "Id": "CAPEC-3",
        "Phase": null,
        "Title": null,
        "Description": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
        "Url": "http://capec.mitre.org/data/definitions/3.html"
      },
      {
        "Id": "CAPEC-34",
        "Phase": null,
        "Title": null,
        "Description": "HTTP Response Splitting",
        "Url": "http://capec.mitre.org/data/definitions/34.html"
      },
      {
        "Id": "CAPEC-42",
        "Phase": null,
        "Title": null,
        "Description": "MIME Conversion",
        "Url": "http://capec.mitre.org/data/definitions/42.html"
      },
      {
        "Id": "CAPEC-43",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Multiple Input Interpretation Layers",
        "Url": "http://capec.mitre.org/data/definitions/43.html"
      },
      {
        "Id": "CAPEC-45",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow via Symbolic Links",
        "Url": "http://capec.mitre.org/data/definitions/45.html"
      },
      {
        "Id": "CAPEC-46",
        "Phase": null,
        "Title": null,
        "Description": "Overflow Variables and Tags",
        "Url": "http://capec.mitre.org/data/definitions/46.html"
      },
      {
        "Id": "CAPEC-47",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow via Parameter Expansion",
        "Url": "http://capec.mitre.org/data/definitions/47.html"
      },
      {
        "Id": "CAPEC-51",
        "Phase": null,
        "Title": null,
        "Description": "Poison Web Service Registry",
        "Url": "http://capec.mitre.org/data/definitions/51.html"
      },
      {
        "Id": "CAPEC-52",
        "Phase": null,
        "Title": null,
        "Description": "Embedding NULL Bytes",
        "Url": "http://capec.mitre.org/data/definitions/52.html"
      },
      {
        "Id": "CAPEC-53",
        "Phase": null,
        "Title": null,
        "Description": "Postfix, Null Terminate, and Backslash",
        "Url": "http://capec.mitre.org/data/definitions/53.html"
      },
      {
        "Id": "CAPEC-6",
        "Phase": null,
        "Title": null,
        "Description": "Argument Injection",
        "Url": "http://capec.mitre.org/data/definitions/6.html"
      },
      {
        "Id": "CAPEC-64",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/64.html"
      },
      {
        "Id": "CAPEC-67",
        "Phase": null,
        "Title": null,
        "Description": "String Format Overflow in syslog()",
        "Url": "http://capec.mitre.org/data/definitions/67.html"
      },
      {
        "Id": "CAPEC-7",
        "Phase": null,
        "Title": null,
        "Description": "Blind SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/7.html"
      },
      {
        "Id": "CAPEC-71",
        "Phase": null,
        "Title": null,
        "Description": "Using Unicode Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/71.html"
      },
      {
        "Id": "CAPEC-72",
        "Phase": null,
        "Title": null,
        "Description": "URL Encoding",
        "Url": "http://capec.mitre.org/data/definitions/72.html"
      },
      {
        "Id": "CAPEC-76",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Web Input to File System Calls",
        "Url": "http://capec.mitre.org/data/definitions/76.html"
      },
      {
        "Id": "CAPEC-78",
        "Phase": null,
        "Title": null,
        "Description": "Using Escaped Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/78.html"
      },
      {
        "Id": "CAPEC-79",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/79.html"
      },
      {
        "Id": "CAPEC-8",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow in an API Call",
        "Url": "http://capec.mitre.org/data/definitions/8.html"
      },
      {
        "Id": "CAPEC-80",
        "Phase": null,
        "Title": null,
        "Description": "Using UTF-8 Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/80.html"
      },
      {
        "Id": "CAPEC-83",
        "Phase": null,
        "Title": null,
        "Description": "XPath Injection",
        "Url": "http://capec.mitre.org/data/definitions/83.html"
      },
      {
        "Id": "CAPEC-84",
        "Phase": null,
        "Title": null,
        "Description": "XQuery Injection",
        "Url": "http://capec.mitre.org/data/definitions/84.html"
      },
      {
        "Id": "CAPEC-9",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow in Local Command-Line Utilities",
        "Url": "http://capec.mitre.org/data/definitions/9.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-75",
      "CWE-77",
      "CWE-79",
      "CWE-91",
      "CWE-93",
      "CWE-94",
      "CWE-99",
      "CWE-943",
      "CWE-1236"
    ]
  },
  {
    "Id": "CWE-75",
    "Title": " Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
    "Description": "The software does not adequately filter user-controlled input for special elements with control implications. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Programming languages and supporting technologies might be chosen which are not subject to these issues",
        "Description": "Programming languages and supporting technologies might be chosen which are not subject to these issues. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input",
        "Description": "Utilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-81",
        "Phase": null,
        "Title": null,
        "Description": "Web Logs Tampering",
        "Url": "http://capec.mitre.org/data/definitions/81.html"
      },
      {
        "Id": "CAPEC-93",
        "Phase": null,
        "Title": null,
        "Description": "Log Injection-Tampering-Forging",
        "Url": "http://capec.mitre.org/data/definitions/93.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-76"
    ]
  },
  {
    "Id": "CWE-76",
    "Title": " Improper Neutralization of Equivalent Special Elements",
    "Description": "The software properly neutralizes certain special elements, but it improperly neutralizes equivalent special elements. ",
    "ExtendedDescription": "The software may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the software may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the software might filter a dangerous \"-e\" command-line switch when calling an external program, but it might not account for \"--exec\" or other switches that have the same semantics. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Programming languages and supporting technologies might be chosen which are not subject to these issues",
        "Description": "Programming languages and supporting technologies might be chosen which are not subject to these issues. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Utilize an appropriate mix of allowlist and denylist parsing to filter equivalent special element syntax from all input",
        "Description": "Utilize an appropriate mix of allowlist and denylist parsing to filter equivalent special element syntax from all input. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-77",
    "Title": " Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "Description": "The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component. ",
    "ExtendedDescription": "Command injection vulnerabilities typically occur when: 1. Data enters the application from an untrusted source. 2. The data is part of a string that is executed as a command by the application. 3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have. Command injection is a common problem with wrapper programs. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "If at all possible, use library calls rather than external processes to recreate the desired functionality",
        "Description": "If at all possible, use library calls rather than external processes to recreate the desired functionality. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If possible, ensure that all external commands called from the program are statically created",
        "Description": "If possible, ensure that all external commands called from the program are statically created. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands",
        "Description": "Run time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "Assign permissions to the software system that prevents the user from accessing/opening privileged files",
        "Description": "Assign permissions to the software system that prevents the user from accessing/opening privileged files. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-136",
        "Phase": null,
        "Title": null,
        "Description": "LDAP Injection",
        "Url": "http://capec.mitre.org/data/definitions/136.html"
      },
      {
        "Id": "CAPEC-15",
        "Phase": null,
        "Title": null,
        "Description": "Command Delimiters",
        "Url": "http://capec.mitre.org/data/definitions/15.html"
      },
      {
        "Id": "CAPEC-183",
        "Phase": null,
        "Title": null,
        "Description": "IMAP/SMTP Command Injection",
        "Url": "http://capec.mitre.org/data/definitions/183.html"
      },
      {
        "Id": "CAPEC-248",
        "Phase": null,
        "Title": null,
        "Description": "Command Injection",
        "Url": "http://capec.mitre.org/data/definitions/248.html"
      },
      {
        "Id": "CAPEC-40",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Writeable Terminal Devices",
        "Url": "http://capec.mitre.org/data/definitions/40.html"
      },
      {
        "Id": "CAPEC-43",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Multiple Input Interpretation Layers",
        "Url": "http://capec.mitre.org/data/definitions/43.html"
      },
      {
        "Id": "CAPEC-75",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Writeable Configuration Files",
        "Url": "http://capec.mitre.org/data/definitions/75.html"
      },
      {
        "Id": "CAPEC-76",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Web Input to File System Calls",
        "Url": "http://capec.mitre.org/data/definitions/76.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-78",
      "CWE-88",
      "CWE-624",
      "CWE-917"
    ]
  },
  {
    "Id": "CWE-78",
    "Title": " Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "Description": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. ",
    "ExtendedDescription": "This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(\"nslookup [HOSTNAME]\") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use \"exec([COMMAND])\" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "If at all possible, use library calls rather than external processes to recreate the desired functionality",
        "Description": "If at all possible, use library calls rather than external processes to recreate the desired functionality. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Sandbox or Jail\r\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system",
        "Description": "Strategy:  Sandbox or Jail\r\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. \r\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. \r\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. \r\nBe careful to avoid CWE-243 and other weaknesses related to jails. \r\nEffectiveness: Limited\r\nNote: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Attack Surface Reduction\r\nFor any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible",
        "Description": "Strategy:  Attack Surface Reduction\r\nFor any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line",
        "Description": "If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Parameterization\r\nIf available, use structured mechanisms that automatically enforce the separation between data and code",
        "Description": "Strategy:  Parameterization\r\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. \r\nSome languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping. \r\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like \";\" and \"&gt;\" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components. \r\nEven if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Enforcement by Conversion\r\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs",
        "Description": "Strategy:  Enforcement by Conversion\r\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Strategy:  Compilation or Build Hardening\r\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch",
        "Description": "Strategy:  Compilation or Build Hardening\r\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch",
        "Description": "Strategy:  Environment Hardening\r\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else",
        "Description": "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success. \r\nIf errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not. \r\nIn the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Strategy:  Sandbox or Jail\r\nUse runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist",
        "Description": "Strategy:  Sandbox or Jail\r\nUse runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Strategy:  Firewall\r\nUse an application firewall that can detect attacks against this weakness",
        "Description": "Strategy:  Firewall\r\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth. \r\nEffectiveness: Moderate\r\nNote: An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]",
        "Description": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Operation; Implementation",
        "Title": "Strategy:  Environment Hardening\r\nWhen using PHP, configure the application so that it does not use register_globals",
        "Description": "Strategy:  Environment Hardening\r\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-108",
        "Phase": null,
        "Title": null,
        "Description": "Command Line Execution through SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/108.html"
      },
      {
        "Id": "CAPEC-15",
        "Phase": null,
        "Title": null,
        "Description": "Command Delimiters",
        "Url": "http://capec.mitre.org/data/definitions/15.html"
      },
      {
        "Id": "CAPEC-43",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Multiple Input Interpretation Layers",
        "Url": "http://capec.mitre.org/data/definitions/43.html"
      },
      {
        "Id": "CAPEC-6",
        "Phase": null,
        "Title": null,
        "Description": "Argument Injection",
        "Url": "http://capec.mitre.org/data/definitions/6.html"
      },
      {
        "Id": "CAPEC-88",
        "Phase": null,
        "Title": null,
        "Description": "OS Command Injection",
        "Url": "http://capec.mitre.org/data/definitions/88.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-1999-0067",
        "Phase": null,
        "Title": "Canonical example. CGI program does not neutralize \"|\" metacharacter when invoking a phonebook program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0067"
      },
      {
        "Id": "CVE-2001-1246",
        "Phase": null,
        "Title": "Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1246"
      },
      {
        "Id": "CVE-2002-0061",
        "Phase": null,
        "Title": "Web server allows command execution using \"|\" (pipe) character. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0061"
      },
      {
        "Id": "CVE-2003-0041",
        "Phase": null,
        "Title": "FTP client does not filter \"|\" from filenames returned by the server, allowing for OS command injection. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0041"
      },
      {
        "Id": "CVE-2008-2575",
        "Phase": null,
        "Title": "Shell metacharacters in a filename in a ZIP archive ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2575"
      },
      {
        "Id": "CVE-2002-1898",
        "Phase": null,
        "Title": "Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1898"
      },
      {
        "Id": "CVE-2008-4304",
        "Phase": null,
        "Title": "OS command injection through environment variable. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4304"
      },
      {
        "Id": "CVE-2008-4796",
        "Phase": null,
        "Title": "OS command injection through https:// URLs ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4796"
      },
      {
        "Id": "CVE-2007-3572",
        "Phase": null,
        "Title": "Chain: incomplete denylist for OS command injection ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3572"
      },
      {
        "Id": "CVE-2012-1988",
        "Phase": null,
        "Title": "Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1988"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-88",
    "Title": " Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
    "Description": "The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string. ",
    "ExtendedDescription": "When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Parameterization\r\nWhere possible, avoid building a single string that contains the command and its arguments",
        "Description": "Strategy:  Parameterization\r\nWhere possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter. \r\nEffectiveness: High",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Input Validation\r\nUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application",
        "Description": "Strategy:  Input Validation\r\nUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number",
        "Description": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181)",
        "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. \r\nConsider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When exchanging data between components, ensure that both components are using the same character encoding",
        "Description": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When your application combines data from multiple sources, perform the validation after the sources have been combined",
        "Description": "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use automated static analysis tools that target this type of weakness",
        "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection",
        "Description": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-137",
        "Phase": null,
        "Title": null,
        "Description": "Parameter Injection",
        "Url": "http://capec.mitre.org/data/definitions/137.html"
      },
      {
        "Id": "CAPEC-174",
        "Phase": null,
        "Title": null,
        "Description": "Flash Parameter Injection",
        "Url": "http://capec.mitre.org/data/definitions/174.html"
      },
      {
        "Id": "CAPEC-41",
        "Phase": null,
        "Title": null,
        "Description": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
        "Url": "http://capec.mitre.org/data/definitions/41.html"
      },
      {
        "Id": "CAPEC-460",
        "Phase": null,
        "Title": null,
        "Description": "HTTP Parameter Pollution (HPP)",
        "Url": "http://capec.mitre.org/data/definitions/460.html"
      },
      {
        "Id": "CAPEC-88",
        "Phase": null,
        "Title": null,
        "Description": "OS Command Injection",
        "Url": "http://capec.mitre.org/data/definitions/88.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-1999-0113",
        "Phase": null,
        "Title": "Canonical Example ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0113"
      },
      {
        "Id": "CVE-2001-0150",
        "Phase": null,
        "Title": "Web browser executes Telnet sessions using command line arguments that are specified by the web site, which could allow remote attackers to execute arbitrary commands. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0150"
      },
      {
        "Id": "CVE-2001-0667",
        "Phase": null,
        "Title": "Web browser allows remote attackers to execute commands by spawning Telnet with a log file option on the command line and writing arbitrary code into an executable file which is later executed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0667"
      },
      {
        "Id": "CVE-2002-0985",
        "Phase": null,
        "Title": "Argument injection vulnerability in the mail function for PHP may allow attackers to bypass safe mode restrictions and modify command line arguments to the MTA (e.g. sendmail) possibly executing commands. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0985"
      },
      {
        "Id": "CVE-2003-0907",
        "Phase": null,
        "Title": "Help and Support center in windows does not properly validate HCP URLs, which allows remote attackers to execute arbitrary code via quotation marks in an \"hcp://\" URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0907"
      },
      {
        "Id": "CVE-2004-0121",
        "Phase": null,
        "Title": "Mail client does not sufficiently filter parameters of mailto: URLs when using them as arguments to mail executable, which allows remote attackers to execute arbitrary programs. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0121"
      },
      {
        "Id": "CVE-2004-0473",
        "Phase": null,
        "Title": "Web browser doesn't filter \"-\" when invoking various commands, allowing command-line switches to be specified. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0473"
      },
      {
        "Id": "CVE-2004-0480",
        "Phase": null,
        "Title": "Mail client allows remote attackers to execute arbitrary code via a URI that uses a UNC network share pathname to provide an alternate configuration file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0480"
      },
      {
        "Id": "CVE-2004-0489",
        "Phase": null,
        "Title": "SSH URI handler for web browser allows remote attackers to execute arbitrary code or conduct port forwarding via the a command line option. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0489"
      },
      {
        "Id": "CVE-2004-0411",
        "Phase": null,
        "Title": "Web browser doesn't filter \"-\" when invoking various commands, allowing command-line switches to be specified. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0411"
      },
      {
        "Id": "CVE-2005-4699",
        "Phase": null,
        "Title": "Argument injection vulnerability in TellMe 1.2 and earlier allows remote attackers to modify command line arguments for the Whois program and obtain sensitive information via \"--\" style options in the q_Host parameter. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4699"
      },
      {
        "Id": "CVE-2006-1865",
        "Phase": null,
        "Title": "Beagle before 0.2.5 can produce certain insecure command lines to launch external helper applications while indexing, which allows attackers to execute arbitrary commands. NOTE: it is not immediately clear whether this issue involves argument injection, shell metacharacters, or other issues. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1865"
      },
      {
        "Id": "CVE-2006-2056",
        "Phase": null,
        "Title": "Argument injection vulnerability in Internet Explorer 6 for Windows XP SP2 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2056"
      },
      {
        "Id": "CVE-2006-2057",
        "Phase": null,
        "Title": "Argument injection vulnerability in Mozilla Firefox 1.0.6 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2057"
      },
      {
        "Id": "CVE-2006-2058",
        "Phase": null,
        "Title": "Argument injection vulnerability in Avant Browser 10.1 Build 17 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2058"
      },
      {
        "Id": "CVE-2006-2312",
        "Phase": null,
        "Title": "Argument injection vulnerability in the URI handler in Skype 2.0.*.104 and 2.5.*.0 through 2.5.*.78 for Windows allows remote authorized attackers to download arbitrary files via a URL that contains certain command-line switches. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2312"
      },
      {
        "Id": "CVE-2006-3015",
        "Phase": null,
        "Title": "Argument injection vulnerability in WinSCP 3.8.1 build 328 allows remote attackers to upload or download arbitrary files via encoded spaces and double-quote characters in a scp or sftp URI. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3015"
      },
      {
        "Id": "CVE-2006-4692",
        "Phase": null,
        "Title": "Argument injection vulnerability in the Windows Object Packager (packager.exe) in Microsoft Windows XP SP1 and SP2 and Server 2003 SP1 and earlier allows remote user-assisted attackers to execute arbitrary commands via a crafted file with a \"/\" (slash) character in the filename of the Command Line property, followed by a valid file extension, which causes the command before the slash to be executed, aka \"Object Packager Dialogue Spoofing Vulnerability.\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4692"
      },
      {
        "Id": "CVE-2006-6597",
        "Phase": null,
        "Title": "Argument injection vulnerability in HyperAccess 8.4 allows user-assisted remote attackers to execute arbitrary vbscript and commands via the /r option in a telnet:// URI, which is configured to use hawin32.exe. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6597"
      },
      {
        "Id": "CVE-2007-0882",
        "Phase": null,
        "Title": "Argument injection vulnerability in the telnet daemon (in.telnetd) in Solaris 10 and 11 (SunOS 5.10 and 5.11) misinterprets certain client \"-f\" sequences as valid requests for the login program to skip authentication, which allows remote attackers to log into certain accounts, as demonstrated by the bin account. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0882"
      },
      {
        "Id": "CVE-2001-1246",
        "Phase": null,
        "Title": "Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1246"
      },
      {
        "Id": "CVE-2019-13475",
        "Phase": null,
        "Title": "Argument injection allows execution of arbitrary commands by injecting a \"-exec\" option, which is executed by the command. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13475"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-624",
    "Title": " Executable Regular Expression Error",
    "Description": "The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers. ",
    "ExtendedDescription": "Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl",
        "Description": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2006-2059",
        "Phase": null,
        "Title": "Executable regexp in PHP by inserting \"e\" modifier into first argument to preg_replace ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2059"
      },
      {
        "Id": "CVE-2005-3420",
        "Phase": null,
        "Title": "Executable regexp in PHP by inserting \"e\" modifier into first argument to preg_replace ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3420"
      },
      {
        "Id": "CVE-2006-2878",
        "Phase": null,
        "Title": "Complex curly syntax inserted into the replacement argument to PHP preg_replace(), which uses the \"/e\" modifier ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2878"
      },
      {
        "Id": "CVE-2006-2908",
        "Phase": null,
        "Title": "Function allows remote attackers to execute arbitrary PHP code via the username field, which is used in a preg_replace function call with a /e (executable) modifier. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2908"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-917",
    "Title": " Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
    "Description": "The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-79",
    "Title": " Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "Description": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. ",
    "ExtendedDescription": "Cross-site scripting (XSS) vulnerabilities occur when: 1. Untrusted data enters a web application, typically from a web request. 2. The web application dynamically generates a web page that contains this untrusted data. 3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. 4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. 5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. 6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as \"drive-by hacking.\" In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "Understand the context in which your data will be used and the encoding that will be expected",
        "Description": "Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. \r\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters. \r\nParts of the same output document may require different encodings, which will vary depending on whether the output is in the: \r\n  HTML body  Element attributes (such as src=\"XYZ\")  URIs  JavaScript sections  Cascading Style Sheets and style property   \r\netc. Note that HTML Entity Encoding is only appropriate for the HTML body. \r\nConsult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application",
        "Description": "Strategy:  Attack Surface Reduction\r\nUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls. \r\nEffectiveness: Limited\r\nNote: This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Parameterization\r\nIf available, use structured mechanisms that automatically enforce the separation between data and code",
        "Description": "Strategy:  Parameterization\r\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. \r\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "With Struts, write all data from form beans with the bean's filter attribute set to true",
        "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly",
        "Description": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set. \r\nEffectiveness: Defense in Depth",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen dynamically constructing web pages, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended. \r\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"&lt;3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"&lt;\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"&lt;\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities. \r\nEven if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address. \r\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Enforcement by Conversion\r\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs",
        "Description": "Strategy:  Enforcement by Conversion\r\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Strategy:  Firewall\r\nUse an application firewall that can detect attacks against this weakness",
        "Description": "Strategy:  Firewall\r\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth. \r\nEffectiveness: Moderate\r\nNote: An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Operation; Implementation",
        "Title": "Strategy:  Environment Hardening\r\nWhen using PHP, configure the application so that it does not use register_globals",
        "Description": "Strategy:  Environment Hardening\r\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-209",
        "Phase": null,
        "Title": null,
        "Description": "XSS Using MIME Type Mismatch",
        "Url": "http://capec.mitre.org/data/definitions/209.html"
      },
      {
        "Id": "CAPEC-588",
        "Phase": null,
        "Title": null,
        "Description": "DOM-Based XSS",
        "Url": "http://capec.mitre.org/data/definitions/588.html"
      },
      {
        "Id": "CAPEC-591",
        "Phase": null,
        "Title": null,
        "Description": "Reflected XSS",
        "Url": "http://capec.mitre.org/data/definitions/591.html"
      },
      {
        "Id": "CAPEC-592",
        "Phase": null,
        "Title": null,
        "Description": "Stored XSS",
        "Url": "http://capec.mitre.org/data/definitions/592.html"
      },
      {
        "Id": "CAPEC-63",
        "Phase": null,
        "Title": null,
        "Description": "Cross-Site Scripting (XSS)",
        "Url": "http://capec.mitre.org/data/definitions/63.html"
      },
      {
        "Id": "CAPEC-85",
        "Phase": null,
        "Title": null,
        "Description": "AJAX Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/85.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2014-8958",
        "Phase": null,
        "Title": "Admin GUI allows XSS through cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8958"
      },
      {
        "Id": "CVE-2017-9764",
        "Phase": null,
        "Title": "Web stats program allows XSS through crafted HTTP header. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9764"
      },
      {
        "Id": "CVE-2014-5198",
        "Phase": null,
        "Title": "Web log analysis product allows XSS through crafted HTTP Referer header. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-5198"
      },
      {
        "Id": "CVE-2008-5080",
        "Phase": null,
        "Title": "Chain: protection mechanism failure allows XSS ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5080"
      },
      {
        "Id": "CVE-2006-4308",
        "Phase": null,
        "Title": "Chain: incomplete denylist (CWE-184) only checks \"javascript:\" tag, allowing XSS (CWE-79) using other tags ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4308"
      },
      {
        "Id": "CVE-2007-5727",
        "Phase": null,
        "Title": "Chain: incomplete denylist (CWE-184) only removes SCRIPT tags, enabling XSS (CWE-79) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5727"
      },
      {
        "Id": "CVE-2008-5770",
        "Phase": null,
        "Title": "Reflected XSS using the PATH_INFO in a URL ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5770"
      },
      {
        "Id": "CVE-2008-4730",
        "Phase": null,
        "Title": "Reflected XSS not properly handled when generating an error message ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4730"
      },
      {
        "Id": "CVE-2008-5734",
        "Phase": null,
        "Title": "Reflected XSS sent through email message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5734"
      },
      {
        "Id": "CVE-2008-0971",
        "Phase": null,
        "Title": "Stored XSS in a security product. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0971"
      },
      {
        "Id": "CVE-2008-5249",
        "Phase": null,
        "Title": "Stored XSS using a wiki page. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5249"
      },
      {
        "Id": "CVE-2006-3568",
        "Phase": null,
        "Title": "Stored XSS in a guestbook application. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3568"
      },
      {
        "Id": "CVE-2006-3211",
        "Phase": null,
        "Title": "Stored XSS in a guestbook application using a javascript: URI in a bbcode img tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3211"
      },
      {
        "Id": "CVE-2006-3295",
        "Phase": null,
        "Title": "Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3295"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-80",
      "CWE-81",
      "CWE-83",
      "CWE-84",
      "CWE-85",
      "CWE-86",
      "CWE-87",
      "CWE-692"
    ]
  },
  {
    "Id": "CWE-80",
    "Title": " Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"&lt;\", \"&gt;\", and \"&amp;\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages. ",
    "ExtendedDescription": "This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed",
        "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. \r\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "With Struts, write all data from form beans with the bean's filter attribute set to true",
        "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly",
        "Description": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set. \r\nEffectiveness: Defense in Depth",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-18",
        "Phase": null,
        "Title": null,
        "Description": "XSS Targeting Non-Script Elements",
        "Url": "http://capec.mitre.org/data/definitions/18.html"
      },
      {
        "Id": "CAPEC-193",
        "Phase": null,
        "Title": null,
        "Description": "PHP Remote File Inclusion",
        "Url": "http://capec.mitre.org/data/definitions/193.html"
      },
      {
        "Id": "CAPEC-32",
        "Phase": null,
        "Title": null,
        "Description": "XSS Through HTTP Query Strings",
        "Url": "http://capec.mitre.org/data/definitions/32.html"
      },
      {
        "Id": "CAPEC-86",
        "Phase": null,
        "Title": null,
        "Description": "XSS Through HTTP Headers",
        "Url": "http://capec.mitre.org/data/definitions/86.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0938",
        "Phase": null,
        "Title": "XSS in parameter in a link. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0938"
      },
      {
        "Id": "CVE-2002-1495",
        "Phase": null,
        "Title": "XSS in web-based email product via attachment filenames. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1495"
      },
      {
        "Id": "CVE-2003-1136",
        "Phase": null,
        "Title": "HTML injection in posted message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1136"
      },
      {
        "Id": "CVE-2004-2171",
        "Phase": null,
        "Title": "XSS not quoted in error page. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2171"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-81",
    "Title": " Improper Neutralization of Script in an Error Message Web Page",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page. ",
    "ExtendedDescription": "Error pages may include customized 403 Forbidden or 404 Not Found pages. When an attacker can trigger an error that contains script syntax within the attacker's input, then cross-site scripting attacks may be possible. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Do not write user-controlled input to error pages",
        "Description": "Do not write user-controlled input to error pages. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed",
        "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. \r\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "With Struts, write all data from form beans with the bean's filter attribute set to true",
        "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly",
        "Description": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set. \r\nEffectiveness: Defense in Depth",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-198",
        "Phase": null,
        "Title": null,
        "Description": "XSS Targeting Error Pages",
        "Url": "http://capec.mitre.org/data/definitions/198.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0840",
        "Phase": null,
        "Title": "XSS in default error page from Host: header. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0840"
      },
      {
        "Id": "CVE-2002-1053",
        "Phase": null,
        "Title": "XSS in error message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1053"
      },
      {
        "Id": "CVE-2002-1700",
        "Phase": null,
        "Title": "XSS in error page from targeted parameter. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1700"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-83",
    "Title": " Improper Neutralization of Script in Attributes in a Web Page",
    "Description": "The software does not neutralize or incorrectly neutralizes \"javascript:\" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed",
        "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. \r\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "With Struts, write all data from form beans with the bean's filter attribute set to true",
        "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly",
        "Description": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set. \r\nEffectiveness: Defense in Depth",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-243",
        "Phase": null,
        "Title": null,
        "Description": "XSS Targeting HTML Attributes",
        "Url": "http://capec.mitre.org/data/definitions/243.html"
      },
      {
        "Id": "CAPEC-244",
        "Phase": null,
        "Title": null,
        "Description": "XSS Targeting URI Placeholders",
        "Url": "http://capec.mitre.org/data/definitions/244.html"
      },
      {
        "Id": "CAPEC-588",
        "Phase": null,
        "Title": null,
        "Description": "DOM-Based XSS",
        "Url": "http://capec.mitre.org/data/definitions/588.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2001-0520",
        "Phase": null,
        "Title": "Bypass filtering of SCRIPT tags using onload in BODY, href in A, BUTTON, INPUT, and others. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0520"
      },
      {
        "Id": "CVE-2002-1493",
        "Phase": null,
        "Title": "guestbook XSS in STYLE or IMG SRC attributes. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1493"
      },
      {
        "Id": "CVE-2002-1965",
        "Phase": null,
        "Title": "Javascript in onerror attribute of IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1965"
      },
      {
        "Id": "CVE-2002-1495",
        "Phase": null,
        "Title": "XSS in web-based email product via onmouseover event. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1495"
      },
      {
        "Id": "CVE-2002-1681",
        "Phase": null,
        "Title": "XSS via script in &lt;P&gt; tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1681"
      },
      {
        "Id": "CVE-2004-1935",
        "Phase": null,
        "Title": "Onload, onmouseover, and other events in an e-mail attachment. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1935"
      },
      {
        "Id": "CVE-2005-0945",
        "Phase": null,
        "Title": "Onmouseover and onload events in img, link, and mail tags. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0945"
      },
      {
        "Id": "CVE-2003-1136",
        "Phase": null,
        "Title": "Javascript in onmouseover attribute in e-mail address or URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1136"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-82"
    ]
  },
  {
    "Id": "CWE-82",
    "Title": " Improper Neutralization of Script in Attributes of IMG Tags in a Web Page",
    "Description": "The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute. ",
    "ExtendedDescription": "Attackers can embed XSS exploits into the values for IMG attributes (e.g. SRC) that is streamed and then executed in a victim's browser. Note that when the page is loaded into a user's browsers, the exploit will automatically execute. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. \r\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly",
        "Description": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set. \r\nEffectiveness: Defense in Depth",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2006-3211",
        "Phase": null,
        "Title": "Stored XSS in a guestbook application using a javascript: URI in a bbcode img tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3211"
      },
      {
        "Id": "CVE-2002-1649",
        "Phase": null,
        "Title": "javascript URI scheme in IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1649"
      },
      {
        "Id": "CVE-2002-1803",
        "Phase": null,
        "Title": "javascript URI scheme in IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1803"
      },
      {
        "Id": "CVE-2002-1804",
        "Phase": null,
        "Title": "javascript URI scheme in IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1804"
      },
      {
        "Id": "CVE-2002-1805",
        "Phase": null,
        "Title": "javascript URI scheme in IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1805"
      },
      {
        "Id": "CVE-2002-1806",
        "Phase": null,
        "Title": "javascript URI scheme in IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1806"
      },
      {
        "Id": "CVE-2002-1807",
        "Phase": null,
        "Title": "javascript URI scheme in IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1807"
      },
      {
        "Id": "CVE-2002-1808",
        "Phase": null,
        "Title": "javascript URI scheme in IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1808"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-84",
    "Title": " Improper Neutralization of Encoded URI Schemes in a Web Page",
    "Description": "The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nResolve all URIs to absolute or canonical representations before processing",
        "Description": "Strategy:  Input Validation\r\nResolve all URIs to absolute or canonical representations before processing. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed",
        "Description": "Strategy:  Input Validation\r\nCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. \r\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "With Struts, write all data from form beans with the bean's filter attribute set to true",
        "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly",
        "Description": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set. \r\nEffectiveness: Defense in Depth",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-0563",
        "Phase": null,
        "Title": "Cross-site scripting (XSS) vulnerability in Microsoft Outlook Web Access (OWA) component in Exchange Server 5.5 allows remote attackers to inject arbitrary web script or HTML via an email message with an encoded javascript: URL (\"jav&amp;#X41sc&amp;#0010;ript:\") in an IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0563"
      },
      {
        "Id": "CVE-2005-2276",
        "Phase": null,
        "Title": "Cross-site scripting (XSS) vulnerability in Novell Groupwise WebAccess 6.5 before July 11, 2005 allows remote attackers to inject arbitrary web script or HTML via an e-mail message with an encoded javascript URI (e.g. \"j&amp;#X41vascript\" in an IMG tag). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2276"
      },
      {
        "Id": "CVE-2005-0692",
        "Phase": null,
        "Title": "Encoded script within BBcode IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0692"
      },
      {
        "Id": "CVE-2002-0117",
        "Phase": null,
        "Title": "Encoded \"javascript\" in IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0117"
      },
      {
        "Id": "CVE-2002-0118",
        "Phase": null,
        "Title": "Encoded \"javascript\" in IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0118"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-85",
    "Title": " Doubled Character XSS Manipulations",
    "Description": "The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Resolve all filtered input to absolute or canonical representations before processing",
        "Description": "Resolve all filtered input to absolute or canonical representations before processing. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed",
        "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. \r\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "With Struts, write all data from form beans with the bean's filter attribute set to true",
        "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly",
        "Description": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set. \r\nEffectiveness: Defense in Depth",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-245",
        "Phase": null,
        "Title": null,
        "Description": "XSS Using Doubled Characters",
        "Url": "http://capec.mitre.org/data/definitions/245.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-2086",
        "Phase": null,
        "Title": "XSS using \"&lt;script\". ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2086"
      },
      {
        "Id": "CVE-2000-0116",
        "Phase": null,
        "Title": "Encoded \"javascript\" in IMG tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0116"
      },
      {
        "Id": "CVE-2001-1157",
        "Phase": null,
        "Title": "Extra \"&lt;\" in front of SCRIPT tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1157"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-86",
    "Title": " Improper Neutralization of Invalid Characters in Identifiers in Web Pages",
    "Description": "The software does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers. ",
    "ExtendedDescription": "Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the software may attempt to remove a \"javascript:\" URI scheme, but a \"java%00script:\" URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. \r\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly",
        "Description": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set. \r\nEffectiveness: Defense in Depth",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-247",
        "Phase": null,
        "Title": null,
        "Description": "XSS Using Invalid Characters",
        "Url": "http://capec.mitre.org/data/definitions/247.html"
      },
      {
        "Id": "CAPEC-73",
        "Phase": null,
        "Title": null,
        "Description": "User-Controlled Filename",
        "Url": "http://capec.mitre.org/data/definitions/73.html"
      },
      {
        "Id": "CAPEC-85",
        "Phase": null,
        "Title": null,
        "Description": "AJAX Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/85.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2004-0595",
        "Phase": null,
        "Title": "XSS filter doesn't filter null characters before looking for dangerous tags, which are ignored by web browsers. Multiple Interpretation Error (MIE) and validate-before-cleanse. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0595"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-87",
    "Title": " Improper Neutralization of Alternate XSS Syntax",
    "Description": "The software does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Resolve all input to absolute or canonical representations before processing",
        "Description": "Resolve all input to absolute or canonical representations before processing. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed",
        "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. \r\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "With Struts, write all data from form beans with the bean's filter attribute set to true",
        "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly",
        "Description": "Strategy:  Attack Surface Reduction\r\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set. \r\nEffectiveness: Defense in Depth",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-199",
        "Phase": null,
        "Title": null,
        "Description": "XSS Using Alternate Syntax",
        "Url": "http://capec.mitre.org/data/definitions/199.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0738",
        "Phase": null,
        "Title": "XSS using \"&amp;={script}\". ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0738"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-692",
    "Title": " Incomplete Denylist to Cross-Site Scripting",
    "Description": "The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed. ",
    "ExtendedDescription": "While XSS might seem simple to prevent, web browsers vary so widely in how they parse web pages, that a denylist cannot keep track of all the variations. The \"XSS Cheat Sheet\" [REF-714] contains a large number of attacks that are intended to bypass incomplete denylists. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-120",
        "Phase": null,
        "Title": null,
        "Description": "Double Encoding",
        "Url": "http://capec.mitre.org/data/definitions/120.html"
      },
      {
        "Id": "CAPEC-267",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/267.html"
      },
      {
        "Id": "CAPEC-71",
        "Phase": null,
        "Title": null,
        "Description": "Using Unicode Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/71.html"
      },
      {
        "Id": "CAPEC-80",
        "Phase": null,
        "Title": null,
        "Description": "Using UTF-8 Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/80.html"
      },
      {
        "Id": "CAPEC-85",
        "Phase": null,
        "Title": null,
        "Description": "AJAX Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/85.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2007-5727",
        "Phase": null,
        "Title": "Denylist only removes &lt;SCRIPT&gt; tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5727"
      },
      {
        "Id": "CVE-2006-3617",
        "Phase": null,
        "Title": "Denylist only removes &lt;SCRIPT&gt; tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3617"
      },
      {
        "Id": "CVE-2006-4308",
        "Phase": null,
        "Title": "Denylist only checks \"javascript:\" tag ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4308"
      }
    ],
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-91",
    "Title": " XML Injection (aka Blind XPath Injection)",
    "Description": "The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system. ",
    "ExtendedDescription": "Within XML, special elements could include reserved words or characters such as \"&lt;\", \"&gt;\", \"\"\", and \"&amp;\", which could then be used to add new data or modify XML syntax. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-250",
        "Phase": null,
        "Title": null,
        "Description": "XML Injection",
        "Url": "http://capec.mitre.org/data/definitions/250.html"
      },
      {
        "Id": "CAPEC-83",
        "Phase": null,
        "Title": null,
        "Description": "XPath Injection",
        "Url": "http://capec.mitre.org/data/definitions/83.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-643",
      "CWE-652"
    ]
  },
  {
    "Id": "CWE-643",
    "Title": " Improper Neutralization of Data within XPath Expressions ('XPath Injection')",
    "Description": "The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query. ",
    "ExtendedDescription": "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication). ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use parameterized XPath queries (e",
        "Description": "Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Properly validate user input",
        "Description": "Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-652",
    "Title": " Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')",
    "Description": "The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query. ",
    "ExtendedDescription": "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication). ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use parameterized queries",
        "Description": "Use parameterized queries. This will help ensure separation between data plane and control plane. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Properly validate user input",
        "Description": "Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-93",
    "Title": " Improper Neutralization of CRLF Sequences ('CRLF Injection')",
    "Description": "The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Avoid using CRLF as a special sequence",
        "Description": "Avoid using CRLF as a special sequence. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Appropriately filter or quote CRLF sequences in user-controlled input",
        "Description": "Appropriately filter or quote CRLF sequences in user-controlled input. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-15",
        "Phase": null,
        "Title": null,
        "Description": "Command Delimiters",
        "Url": "http://capec.mitre.org/data/definitions/15.html"
      },
      {
        "Id": "CAPEC-81",
        "Phase": null,
        "Title": null,
        "Description": "Web Logs Tampering",
        "Url": "http://capec.mitre.org/data/definitions/81.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1771",
        "Phase": null,
        "Title": "CRLF injection enables spam proxy (add mail headers) using email address or name. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1771"
      },
      {
        "Id": "CVE-2002-1783",
        "Phase": null,
        "Title": "CRLF injection in API function arguments modify headers for outgoing requests. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1783"
      },
      {
        "Id": "CVE-2004-1513",
        "Phase": null,
        "Title": "Spoofed entries in web server log file via carriage returns ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1513"
      },
      {
        "Id": "CVE-2006-4624",
        "Phase": null,
        "Title": "Chain: inject fake log entries with fake timestamps using CRLF injection ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4624"
      },
      {
        "Id": "CVE-2005-1951",
        "Phase": null,
        "Title": "Chain: Application accepts CRLF in an object ID, allowing HTTP response splitting. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1951"
      },
      {
        "Id": "CVE-2004-1687",
        "Phase": null,
        "Title": "Chain: HTTP response splitting via CRLF in parameter related to URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1687"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-113"
    ]
  },
  {
    "Id": "CWE-113",
    "Title": " Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')",
    "Description": "The software receives data from an upstream component, but does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers. ",
    "ExtendedDescription": "Including unvalidated data in an HTTP header allows an attacker to specify the entirety of the HTTP response rendered by the browser. When an HTTP request contains unexpected CR (carriage return, also given by %0d or \\r) and LF (line feed, also given by %0a or \\n) characters the server may respond with an output stream that is interpreted as two different HTTP responses (instead of one). An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks. HTTP response splitting weaknesses may be present when: Data enters a web application through an untrusted source, most frequently an HTTP request. The data is included in an HTTP response header sent to a web user without being validated for malicious characters. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nConstruct HTTP headers very carefully, avoiding the use of non-validated input data",
        "Description": "Strategy:  Input Validation\r\nConstruct HTTP headers very carefully, avoiding the use of non-validated input data. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-31",
        "Phase": null,
        "Title": null,
        "Description": "Accessing/Intercepting/Modifying HTTP Cookies",
        "Url": "http://capec.mitre.org/data/definitions/31.html"
      },
      {
        "Id": "CAPEC-34",
        "Phase": null,
        "Title": null,
        "Description": "HTTP Response Splitting",
        "Url": "http://capec.mitre.org/data/definitions/34.html"
      },
      {
        "Id": "CAPEC-85",
        "Phase": null,
        "Title": null,
        "Description": "AJAX Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/85.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2004-2146",
        "Phase": null,
        "Title": "Application accepts CRLF in an object ID, allowing HTTP response splitting. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2146"
      },
      {
        "Id": "CVE-2004-1620",
        "Phase": null,
        "Title": "HTTP response splitting via CRLF in parameter related to URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1620"
      },
      {
        "Id": "CVE-2004-1656",
        "Phase": null,
        "Title": "HTTP response splitting via CRLF in parameter related to URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1656"
      },
      {
        "Id": "CVE-2005-2060",
        "Phase": null,
        "Title": "Bulletin board allows response splitting via CRLF in parameter. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2060"
      },
      {
        "Id": "CVE-2005-2065",
        "Phase": null,
        "Title": "Bulletin board allows response splitting via CRLF in parameter. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2065"
      },
      {
        "Id": "CVE-2004-2512",
        "Phase": null,
        "Title": "Response splitting via CRLF in PHPSESSID. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2512"
      },
      {
        "Id": "CVE-2005-1951",
        "Phase": null,
        "Title": "Chain: Application accepts CRLF in an object ID, allowing HTTP response splitting. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1951"
      },
      {
        "Id": "CVE-2004-1687",
        "Phase": null,
        "Title": "Chain: HTTP response splitting via CRLF in parameter related to URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1687"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-94",
    "Title": " Improper Control of Generation of Code ('Code Injection')",
    "Description": "The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment. ",
    "ExtendedDescription": "When software allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution. Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Refactor your program so that you do not have to dynamically generate code",
        "Description": "Refactor your program so that you do not have to dynamically generate code. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system",
        "Description": "Run your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your software. \r\nExamples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection. \r\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. \r\nBe careful to avoid CWE-243 and other weaknesses related to jails. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nTo reduce the likelihood of code injection, use stringent allowlists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit(). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use automated static analysis tools that target this type of weakness",
        "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection",
        "Description": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Strategy:  Compilation or Build Hardening\r\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch",
        "Description": "Strategy:  Compilation or Build Hardening\r\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch",
        "Description": "Strategy:  Environment Hardening\r\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-242",
        "Phase": null,
        "Title": null,
        "Description": "Code Injection",
        "Url": "http://capec.mitre.org/data/definitions/242.html"
      },
      {
        "Id": "CAPEC-35",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Executable Code in Non-Executable Files",
        "Url": "http://capec.mitre.org/data/definitions/35.html"
      },
      {
        "Id": "CAPEC-77",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating User-Controlled Variables",
        "Url": "http://capec.mitre.org/data/definitions/77.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-5071",
        "Phase": null,
        "Title": "Eval injection in PHP program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5071"
      },
      {
        "Id": "CVE-2002-1750",
        "Phase": null,
        "Title": "Eval injection in Perl program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1750"
      },
      {
        "Id": "CVE-2008-5305",
        "Phase": null,
        "Title": "Eval injection in Perl program using an ID that should only contain hyphens and numbers. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5305"
      },
      {
        "Id": "CVE-2002-1752",
        "Phase": null,
        "Title": "Direct code injection into Perl eval function. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1752"
      },
      {
        "Id": "CVE-2002-1753",
        "Phase": null,
        "Title": "Eval injection in Perl program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1753"
      },
      {
        "Id": "CVE-2005-1527",
        "Phase": null,
        "Title": "Direct code injection into Perl eval function. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1527"
      },
      {
        "Id": "CVE-2005-2837",
        "Phase": null,
        "Title": "Direct code injection into Perl eval function. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2837"
      },
      {
        "Id": "CVE-2005-1921",
        "Phase": null,
        "Title": "MFV. code injection into PHP eval statement using nested constructs that should not be nested. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1921"
      },
      {
        "Id": "CVE-2005-2498",
        "Phase": null,
        "Title": "MFV. code injection into PHP eval statement using nested constructs that should not be nested. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2498"
      },
      {
        "Id": "CVE-2005-3302",
        "Phase": null,
        "Title": "Code injection into Python eval statement from a field in a formatted file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3302"
      },
      {
        "Id": "CVE-2007-1253",
        "Phase": null,
        "Title": "Eval injection in Python program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1253"
      },
      {
        "Id": "CVE-2001-1471",
        "Phase": null,
        "Title": "chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1471"
      },
      {
        "Id": "CVE-2002-0495",
        "Phase": null,
        "Title": "Perl code directly injected into CGI library file from parameters to another CGI program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0495"
      },
      {
        "Id": "CVE-2005-1876",
        "Phase": null,
        "Title": "Direct PHP code injection into supporting template file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1876"
      },
      {
        "Id": "CVE-2005-1894",
        "Phase": null,
        "Title": "Direct code injection into PHP script that can be accessed by attacker. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1894"
      },
      {
        "Id": "CVE-2003-0395",
        "Phase": null,
        "Title": "PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0395"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-95",
      "CWE-96"
    ]
  },
  {
    "Id": "CWE-95",
    "Title": " Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\"). ",
    "ExtendedDescription": "This may allow an attacker to execute arbitrary code, or at least modify what code can be executed. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "If possible, refactor your code so that it does not need to use eval() at all",
        "Description": "If possible, refactor your code so that it does not need to use eval() at all. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181)",
        "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control. \r\nConsider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-35",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Executable Code in Non-Executable Files",
        "Url": "http://capec.mitre.org/data/definitions/35.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-5071",
        "Phase": null,
        "Title": "Eval injection in PHP program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5071"
      },
      {
        "Id": "CVE-2002-1750",
        "Phase": null,
        "Title": "Eval injection in Perl program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1750"
      },
      {
        "Id": "CVE-2008-5305",
        "Phase": null,
        "Title": "Eval injection in Perl program using an ID that should only contain hyphens and numbers. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5305"
      },
      {
        "Id": "CVE-2002-1752",
        "Phase": null,
        "Title": "Direct code injection into Perl eval function. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1752"
      },
      {
        "Id": "CVE-2002-1753",
        "Phase": null,
        "Title": "Eval injection in Perl program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1753"
      },
      {
        "Id": "CVE-2005-1527",
        "Phase": null,
        "Title": "Direct code injection into Perl eval function. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1527"
      },
      {
        "Id": "CVE-2005-2837",
        "Phase": null,
        "Title": "Direct code injection into Perl eval function. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2837"
      },
      {
        "Id": "CVE-2005-1921",
        "Phase": null,
        "Title": "MFV. code injection into PHP eval statement using nested constructs that should not be nested. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1921"
      },
      {
        "Id": "CVE-2005-2498",
        "Phase": null,
        "Title": "MFV. code injection into PHP eval statement using nested constructs that should not be nested. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2498"
      },
      {
        "Id": "CVE-2005-3302",
        "Phase": null,
        "Title": "Code injection into Python eval statement from a field in a formatted file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3302"
      },
      {
        "Id": "CVE-2007-1253",
        "Phase": null,
        "Title": "Eval injection in Python program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1253"
      },
      {
        "Id": "CVE-2001-1471",
        "Phase": null,
        "Title": "chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1471"
      },
      {
        "Id": "CVE-2007-2713",
        "Phase": null,
        "Title": "Chain: Execution after redirect triggers eval injection. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2713"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This weakness is prevalent in handler/dispatch procedures that might want to invoke a large number of functions, or set a large number of variables. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-96",
    "Title": " Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nPerform proper output validation and escaping to neutralize all code syntax from data written to code files",
        "Description": "Strategy:  Output Encoding\r\nPerform proper output validation and escaping to neutralize all code syntax from data written to code files. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-35",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Executable Code in Non-Executable Files",
        "Url": "http://capec.mitre.org/data/definitions/35.html"
      },
      {
        "Id": "CAPEC-73",
        "Phase": null,
        "Title": null,
        "Description": "User-Controlled Filename",
        "Url": "http://capec.mitre.org/data/definitions/73.html"
      },
      {
        "Id": "CAPEC-77",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating User-Controlled Variables",
        "Url": "http://capec.mitre.org/data/definitions/77.html"
      },
      {
        "Id": "CAPEC-81",
        "Phase": null,
        "Title": null,
        "Description": "Web Logs Tampering",
        "Url": "http://capec.mitre.org/data/definitions/81.html"
      },
      {
        "Id": "CAPEC-85",
        "Phase": null,
        "Title": null,
        "Description": "AJAX Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/85.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0495",
        "Phase": null,
        "Title": "Perl code directly injected into CGI library file from parameters to another CGI program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0495"
      },
      {
        "Id": "CVE-2005-1876",
        "Phase": null,
        "Title": "Direct PHP code injection into supporting template file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1876"
      },
      {
        "Id": "CVE-2005-1894",
        "Phase": null,
        "Title": "Direct code injection into PHP script that can be accessed by attacker. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1894"
      },
      {
        "Id": "CVE-2003-0395",
        "Phase": null,
        "Title": "PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0395"
      },
      {
        "Id": "CVE-2007-6652",
        "Phase": null,
        "Title": "chain: execution after redirect allows non-administrator to perform static code injection. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6652"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This issue is most frequently found in PHP applications that allow users to set configuration variables that are stored within executable PHP files. Technically, this could also be performed in some compiled code (e.g. by byte-patching an executable), although it is highly unlikely. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-97"
    ]
  },
  {
    "Id": "CWE-97",
    "Title": " Improper Neutralization of Server-Side Includes (SSI) Within a Web Page",
    "Description": "The software generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-101",
        "Phase": null,
        "Title": null,
        "Description": "Server Side Include (SSI) Injection",
        "Url": "http://capec.mitre.org/data/definitions/101.html"
      },
      {
        "Id": "CAPEC-35",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Executable Code in Non-Executable Files",
        "Url": "http://capec.mitre.org/data/definitions/35.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-99",
    "Title": " Improper Control of Resource Identifiers ('Resource Injection')",
    "Description": "The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control. ",
    "ExtendedDescription": "A resource injection issue occurs when the following two conditions are met: An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server. This may enable an attacker to access or modify otherwise protected system resources. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-10",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow via Environment Variables",
        "Url": "http://capec.mitre.org/data/definitions/10.html"
      },
      {
        "Id": "CAPEC-240",
        "Phase": null,
        "Title": null,
        "Description": "Resource Injection",
        "Url": "http://capec.mitre.org/data/definitions/240.html"
      },
      {
        "Id": "CAPEC-75",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Writeable Configuration Files",
        "Url": "http://capec.mitre.org/data/definitions/75.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-641",
      "CWE-694",
      "CWE-914"
    ]
  },
  {
    "Id": "CWE-641",
    "Title": " Improper Restriction of Names for Files and Other Resources",
    "Description": "The application constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name. ",
    "ExtendedDescription": "This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not allow users to control names of resources used on the server side",
        "Description": "Do not allow users to control names of resources used on the server side. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Perform allowlist input validation at entry points and also before consuming the resources",
        "Description": "Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Make sure that technologies consuming the resources are not vulnerable (e",
        "Description": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-694",
    "Title": " Use of Multiple Resources with Duplicate Identifier",
    "Description": "The software uses multiple resources that can have the same identifier, in a context in which unique identifiers are required. ",
    "ExtendedDescription": "If the software assumes that each resource has a unique identifier, the software could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Where possible, use unique identifiers",
        "Description": "Where possible, use unique identifiers. If non-unique identifiers are detected, then do not operate any resource with a non-unique identifier and report the error appropriately. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2013-4787",
        "Phase": null,
        "Title": "chain: mobile OS verifies cryptographic signature of file in an archive, but then installs a different file with the same name that is also listed in the archive. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4787"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-102",
      "CWE-462"
    ]
  },
  {
    "Id": "CWE-462",
    "Title": " Duplicate Key in Associative List (Alist)",
    "Description": "Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error. ",
    "ExtendedDescription": "A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use a hash table instead of an alist",
        "Description": "Use a hash table instead of an alist. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry",
        "Description": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-914",
    "Title": " Improper Control of Dynamically-Identified Variables",
    "Description": "The software does not properly restrict reading from or writing to dynamically-identified variables. ",
    "ExtendedDescription": "Many languages offer powerful features that allow the programmer to access arbitrary variables that are specified by an input string. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can modify unintended variables that have security implications. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nFor any externally-influenced input, check the input against an allowlist of internal program variables that are allowed to be modified",
        "Description": "Strategy:  Input Validation\r\nFor any externally-influenced input, check the input against an allowlist of internal program variables that are allowed to be modified. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "Strategy:  Refactoring\r\nRefactor the code so that internal program variables do not need to be dynamically identified",
        "Description": "Strategy:  Refactoring\r\nRefactor the code so that internal program variables do not need to be dynamically identified. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2006-7135",
        "Phase": null,
        "Title": "extract issue enables file inclusion ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7135"
      },
      {
        "Id": "CVE-2006-7079",
        "Phase": null,
        "Title": "extract used for register_globals compatibility layer, enables path traversal ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7079"
      },
      {
        "Id": "CVE-2007-0649",
        "Phase": null,
        "Title": "extract() buried in include files makes post-disclosure analysis confusing; original report had seemed incorrect. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0649"
      },
      {
        "Id": "CVE-2006-6661",
        "Phase": null,
        "Title": "extract() enables static code injection ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6661"
      },
      {
        "Id": "CVE-2006-2828",
        "Phase": null,
        "Title": "import_request_variables() buried in include files makes post-disclosure analysis confusing ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2828"
      },
      {
        "Id": "CVE-2009-0422",
        "Phase": null,
        "Title": "Chain: Dynamic variable evaluation allows resultant remote file inclusion and path traversal. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0422"
      },
      {
        "Id": "CVE-2007-2431",
        "Phase": null,
        "Title": "Chain: dynamic variable evaluation in PHP program used to modify critical, unexpected $_SERVER variable for resultant XSS. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2431"
      },
      {
        "Id": "CVE-2006-4904",
        "Phase": null,
        "Title": "Chain: dynamic variable evaluation in PHP program used to conduct remote file inclusion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4904"
      },
      {
        "Id": "CVE-2006-4019",
        "Phase": null,
        "Title": "Dynamic variable evaluation in mail program allows reading and modifying attachments and preferences of other users. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4019"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-621",
      "CWE-627"
    ]
  },
  {
    "Id": "CWE-621",
    "Title": " Variable Extraction Error",
    "Description": "The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables. ",
    "ExtendedDescription": "For example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals. Similar functionality is possible in other interpreted languages, including custom languages. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nUse allowlists of variable names that can be extracted",
        "Description": "Strategy:  Input Validation\r\nUse allowlists of variable names that can be extracted. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Consider refactoring your code to avoid extraction routines altogether",
        "Description": "Consider refactoring your code to avoid extraction routines altogether. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument",
        "Description": "In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2006-7135",
        "Phase": null,
        "Title": "extract issue enables file inclusion ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7135"
      },
      {
        "Id": "CVE-2006-7079",
        "Phase": null,
        "Title": "extract used for register_globals compatibility layer, enables path traversal ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7079"
      },
      {
        "Id": "CVE-2007-0649",
        "Phase": null,
        "Title": "extract() buried in include files makes post-disclosure analysis confusing; original report had seemed incorrect. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0649"
      },
      {
        "Id": "CVE-2006-6661",
        "Phase": null,
        "Title": "extract() enables static code injection ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6661"
      },
      {
        "Id": "CVE-2006-2828",
        "Phase": null,
        "Title": "import_request_variables() buried in include files makes post-disclosure analysis confusing ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2828"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-627",
    "Title": " Dynamic Variable Evaluation",
    "Description": "In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions. ",
    "ExtendedDescription": "The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control/data flow that is reachable by the related variables or functions. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Refactoring\r\nRefactor the code to avoid dynamic variable evaluation whenever possible",
        "Description": "Strategy:  Refactoring\r\nRefactor the code to avoid dynamic variable evaluation whenever possible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nUse only allowlists of acceptable variable or function names",
        "Description": "Strategy:  Input Validation\r\nUse only allowlists of acceptable variable or function names. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "For function names, ensure that you are only calling functions that accept the proper number of arguments, to avoid unexpected null arguments",
        "Description": "For function names, ensure that you are only calling functions that accept the proper number of arguments, to avoid unexpected null arguments. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2009-0422",
        "Phase": null,
        "Title": "Chain: Dynamic variable evaluation allows resultant remote file inclusion and path traversal. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0422"
      },
      {
        "Id": "CVE-2007-2431",
        "Phase": null,
        "Title": "Chain: dynamic variable evaluation in PHP program used to modify critical, unexpected $_SERVER variable for resultant XSS. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2431"
      },
      {
        "Id": "CVE-2006-4904",
        "Phase": null,
        "Title": "Chain: dynamic variable evaluation in PHP program used to conduct remote file inclusion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4904"
      },
      {
        "Id": "CVE-2006-4019",
        "Phase": null,
        "Title": "Dynamic variable evaluation in mail program allows reading and modifying attachments and preferences of other users. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4019"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-943",
    "Title": " Improper Neutralization of Special Elements in Data Query Logic",
    "Description": "The application generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query. ",
    "ExtendedDescription": "Depending on the capabilities of the query language, an attacker could inject additional logic into the query to: Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated Append additional commands to the query Return more entities than intended Return fewer entities than intended Cause entities to be sorted in an unexpected way The ability to execute additional commands or change which entities are returned has obvious risks. But when the application logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the application query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges. While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and \"NoSQL\" languages. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2014-2503",
        "Phase": null,
        "Title": "Injection using Documentum Query Language (DQL) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2503"
      },
      {
        "Id": "CVE-2014-2508",
        "Phase": null,
        "Title": "Injection using Documentum Query Language (DQL) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2508"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-89",
      "CWE-90",
      "CWE-643",
      "CWE-652"
    ]
  },
  {
    "Id": "CWE-89",
    "Title": " Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "Description": "The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. ",
    "ExtendedDescription": "Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Parameterization\r\nIf available, use structured mechanisms that automatically enforce the separation between data and code",
        "Description": "Strategy:  Parameterization\r\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. \r\nProcess SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867] ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]",
        "Description": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. \r\nSpecifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). \r\nInstead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nWhen constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping. \r\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name \"O'Reilly\" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded. \r\nWhen feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Enforcement by Conversion\r\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs",
        "Description": "Strategy:  Enforcement by Conversion\r\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else",
        "Description": "Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success. \r\nIf errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not. \r\nIn the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Strategy:  Firewall\r\nUse an application firewall that can detect attacks against this weakness",
        "Description": "Strategy:  Firewall\r\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth. \r\nEffectiveness: Moderate\r\nNote: An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Operation; Implementation",
        "Title": "Strategy:  Environment Hardening\r\nWhen using PHP, configure the application so that it does not use register_globals",
        "Description": "Strategy:  Environment Hardening\r\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-108",
        "Phase": null,
        "Title": null,
        "Description": "Command Line Execution through SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/108.html"
      },
      {
        "Id": "CAPEC-109",
        "Phase": null,
        "Title": null,
        "Description": "Object Relational Mapping Injection",
        "Url": "http://capec.mitre.org/data/definitions/109.html"
      },
      {
        "Id": "CAPEC-110",
        "Phase": null,
        "Title": null,
        "Description": "SQL Injection through SOAP Parameter Tampering",
        "Url": "http://capec.mitre.org/data/definitions/110.html"
      },
      {
        "Id": "CAPEC-470",
        "Phase": null,
        "Title": null,
        "Description": "Expanding Control over the Operating System from the Database",
        "Url": "http://capec.mitre.org/data/definitions/470.html"
      },
      {
        "Id": "CAPEC-66",
        "Phase": null,
        "Title": null,
        "Description": "SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/66.html"
      },
      {
        "Id": "CAPEC-7",
        "Phase": null,
        "Title": null,
        "Description": "Blind SQL Injection",
        "Url": "http://capec.mitre.org/data/definitions/7.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2004-0366",
        "Phase": null,
        "Title": "chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0366"
      },
      {
        "Id": "CVE-2008-2790",
        "Phase": null,
        "Title": "SQL injection through an ID that was supposed to be numeric. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2790"
      },
      {
        "Id": "CVE-2008-2223",
        "Phase": null,
        "Title": "SQL injection through an ID that was supposed to be numeric. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2223"
      },
      {
        "Id": "CVE-2007-6602",
        "Phase": null,
        "Title": "SQL injection via user name. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6602"
      },
      {
        "Id": "CVE-2008-5817",
        "Phase": null,
        "Title": "SQL injection via user name or password fields. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5817"
      },
      {
        "Id": "CVE-2003-0377",
        "Phase": null,
        "Title": "SQL injection in security product, using a crafted group name. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0377"
      },
      {
        "Id": "CVE-2008-2380",
        "Phase": null,
        "Title": "SQL injection in authentication library. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2380"
      },
      {
        "Id": "CVE-2017-11508",
        "Phase": null,
        "Title": "SQL injection in vulnerability management and reporting tool, using a crafted password. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11508"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This weakness typically appears in data-rich applications that save user inputs in a database. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-564"
    ]
  },
  {
    "Id": "CWE-564",
    "Title": " SQL Injection",
    "Description": "Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "A non-SQL style database which is not subject to this flaw may be chosen",
        "Description": "A non-SQL style database which is not subject to this flaw may be chosen. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Follow the principle of least privilege when creating user accounts to a SQL database",
        "Description": "Follow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Implement SQL strings using prepared statements that bind variables",
        "Description": "Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use vigorous allowlist style checking on any user input that may be used in a SQL command",
        "Description": "Use vigorous allowlist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-109",
        "Phase": null,
        "Title": null,
        "Description": "Object Relational Mapping Injection",
        "Url": "http://capec.mitre.org/data/definitions/109.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-90",
    "Title": " Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
    "Description": "The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-136",
        "Phase": null,
        "Title": null,
        "Description": "LDAP Injection",
        "Url": "http://capec.mitre.org/data/definitions/136.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2005-2301",
        "Phase": null,
        "Title": "Server does not properly escape LDAP queries, which allows remote attackers to cause a DoS and possibly conduct an LDAP injection attack. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2301"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1236",
    "Title": " Improper Neutralization of Formula Elements in a CSV File",
    "Description": "The software saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by spreadsheet software. ",
    "ExtendedDescription": "User-provided data is often saved to traditional databases. This data can be exported to a CSV file, which allows users to read the data using spreadsheet software such as Excel, Numbers, or Calc. This software interprets entries beginning with '=' as formulae, which are then executed by the spreadsheet software. The software's formula language often allows methods to access hyperlinks or the local command line, and frequently allows enough characters to invoke an entire script. Attackers can populate data fields which, when saved to a CSV file, may attempt information exfiltration or other malicious activity when automatically executed by the spreadsheet software. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV",
        "Description": "When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at). \r\nEffectiveness: Moderate\r\nNote: Unfortunately, there is no perfect solution, since different spreadsheet products act differently.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula",
        "Description": "If a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula. \r\nEffectiveness: Moderate\r\nNote: It is not clear how effective this mitigation is with other spreadsheet software.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Certain implementations of spreadsheet software might disallow formulae from executing if the file is untrusted, or if the file is not authored by the current user",
        "Description": "Certain implementations of spreadsheet software might disallow formulae from executing if the file is untrusted, or if the file is not authored by the current user. \r\nEffectiveness: Limited\r\nNote: This mitigation has limited effectiveness because it often depends on end users opening spreadsheet software safely.",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2019-12134",
        "Phase": null,
        "Title": "Low privileged user can trigger CSV injection through a contact form field value ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12134"
      },
      {
        "Id": "CVE-2019-4521",
        "Phase": null,
        "Title": "Cloud management product allows arbitrary command execution via CSV injection ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-4521"
      },
      {
        "Id": "CVE-2019-17661",
        "Phase": null,
        "Title": "CSV injection in content management system via formula code in a first or last name ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-17661"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "The weakness is in the implementation of a software's CSV export feature, in particular how it formats formula entries as the output gets flattened into a text file. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-116",
    "Title": " Improper Encoding or Escaping of Output",
    "Description": "The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved. ",
    "ExtendedDescription": "Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead. Most software follows a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, \"GET /index.html HTTP/1.1\" is a structured message containing a command (\"GET\") with a single argument (\"/index.html\") and metadata about which protocol version is being used (\"HTTP/1.1\"). If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. \r\nAlternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Parameterization\r\nIf available, use structured mechanisms that automatically enforce the separation between data and code",
        "Description": "Strategy:  Parameterization\r\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. \r\nFor example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Understand the context in which your data will be used and the encoding that will be expected",
        "Description": "Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "In some cases, input validation may be an important strategy when output encoding is not a complete solution",
        "Description": "In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20)",
        "Description": "Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Fully specify which encodings are required by components that will be communicating with each other",
        "Description": "Fully specify which encodings are required by components that will be communicating with each other. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When exchanging data between components, ensure that both components are using the same character encoding",
        "Description": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-104",
        "Phase": null,
        "Title": null,
        "Description": "Cross Zone Scripting",
        "Url": "http://capec.mitre.org/data/definitions/104.html"
      },
      {
        "Id": "CAPEC-73",
        "Phase": null,
        "Title": null,
        "Description": "User-Controlled Filename",
        "Url": "http://capec.mitre.org/data/definitions/73.html"
      },
      {
        "Id": "CAPEC-81",
        "Phase": null,
        "Title": null,
        "Description": "Web Logs Tampering",
        "Url": "http://capec.mitre.org/data/definitions/81.html"
      },
      {
        "Id": "CAPEC-85",
        "Phase": null,
        "Title": null,
        "Description": "AJAX Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/85.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-4636",
        "Phase": null,
        "Title": "OS command injection in backup software using shell metacharacters in a filename; correct behavior would require that this filename could not be changed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4636"
      },
      {
        "Id": "CVE-2008-0769",
        "Phase": null,
        "Title": "Web application does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected encoding. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0769"
      },
      {
        "Id": "CVE-2008-0005",
        "Phase": null,
        "Title": "Program does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected encoding. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0005"
      },
      {
        "Id": "CVE-2008-5573",
        "Phase": null,
        "Title": "SQL injection via password parameter; a strong password might contain \"&amp;\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5573"
      },
      {
        "Id": "CVE-2008-3773",
        "Phase": null,
        "Title": "Cross-site scripting in chat application via a message subject, which normally might contain \"&amp;\" and other XSS-related characters. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3773"
      },
      {
        "Id": "CVE-2008-0757",
        "Phase": null,
        "Title": "Cross-site scripting in chat application via a message, which normally might be allowed to contain arbitrary content. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0757"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-117",
      "CWE-644",
      "CWE-838"
    ]
  },
  {
    "Id": "CWE-117",
    "Title": " Improper Output Neutralization for Logs",
    "Description": "The software does not neutralize or incorrectly neutralizes output that is written to logs. ",
    "ExtendedDescription": "This can allow an attacker to forge log entries or inject malicious content into logs. Log forging vulnerabilities occur when: Data enters an application from an untrusted source. The data is written to an application or system log file. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-268",
        "Phase": null,
        "Title": null,
        "Description": "Audit Log Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/268.html"
      },
      {
        "Id": "CAPEC-81",
        "Phase": null,
        "Title": null,
        "Description": "Web Logs Tampering",
        "Url": "http://capec.mitre.org/data/definitions/81.html"
      },
      {
        "Id": "CAPEC-93",
        "Phase": null,
        "Title": null,
        "Description": "Log Injection-Tampering-Forging",
        "Url": "http://capec.mitre.org/data/definitions/93.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2006-4624",
        "Phase": null,
        "Title": "Chain: inject fake log entries with fake timestamps using CRLF injection ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4624"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-644",
    "Title": " Improper Neutralization of HTTP Headers for Scripting Syntax",
    "Description": "The application does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash. ",
    "ExtendedDescription": "An attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled. If an application does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header",
        "Description": "Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Disable script execution functionality in the clients' browser",
        "Description": "Disable script execution functionality in the clients' browser. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2006-3918",
        "Phase": null,
        "Title": "Web server does not remove the Expect header from an HTTP request when it is reflected back in an error message, allowing a Flash SWF file to perform XSS attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3918"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-838",
    "Title": " Inappropriate Encoding for Output Context",
    "Description": "The software uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component. ",
    "ExtendedDescription": "This weakness can cause the downstream component to use a decoding method that produces different data than what the software intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the software. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks. While using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output. For example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding. While web applications have received the most attention for this problem, this weakness could potentially apply to any type of software that uses a communications stream that could support multiple encodings. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse context-aware encoding",
        "Description": "Strategy:  Output Encoding\r\nUse context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Output Encoding\r\nWhere possible, use communications protocols or data formats that provide strict boundaries between control and data",
        "Description": "Strategy:  Output Encoding\r\nWhere possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. \r\nNote that some template mechanisms provide built-in support for the appropriate encoding. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-468",
        "Phase": null,
        "Title": null,
        "Description": "Generic Cross-Browser Cross-Domain Theft",
        "Url": "http://capec.mitre.org/data/definitions/468.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-2814",
        "Phase": null,
        "Title": "Server does not properly handle requests that do not contain UTF-8 data; browser assumes UTF-8, allowing XSS. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2814"
      }
    ],
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-138",
    "Title": " Improper Neutralization of Special Elements",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component. ",
    "ExtendedDescription": "Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If software does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol &lt; (\"less than\") as meaning \"read input from a file\". ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Developers should anticipate that special elements (e",
        "Description": "Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their software system. One defense is to create an allowlist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the allowlist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use and specify an appropriate output encoding to ensure that the special elements are well-defined",
        "Description": "Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-15",
        "Phase": null,
        "Title": null,
        "Description": "Command Delimiters",
        "Url": "http://capec.mitre.org/data/definitions/15.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2001-0677",
        "Phase": null,
        "Title": "Read arbitrary files from mail client by providing a special MIME header that is internally used to store pathnames for attachments. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0677"
      },
      {
        "Id": "CVE-2000-0703",
        "Phase": null,
        "Title": "Setuid program does not cleanse special escape sequence before sending data to a mail program, causing the mail program to process those sequences. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0703"
      },
      {
        "Id": "CVE-2003-0020",
        "Phase": null,
        "Title": "Multi-channel issue. Terminal escape sequences not filtered from log files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0020"
      },
      {
        "Id": "CVE-2003-0083",
        "Phase": null,
        "Title": "Multi-channel issue. Terminal escape sequences not filtered from log files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0083"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-140",
      "CWE-147",
      "CWE-148",
      "CWE-149",
      "CWE-150",
      "CWE-151",
      "CWE-152",
      "CWE-153",
      "CWE-154",
      "CWE-155",
      "CWE-156",
      "CWE-157",
      "CWE-158",
      "CWE-159",
      "CWE-160",
      "CWE-162",
      "CWE-164",
      "CWE-464",
      "CWE-790"
    ]
  },
  {
    "Id": "CWE-140",
    "Title": " Improper Neutralization of Delimiters",
    "Description": "The software does not neutralize or incorrectly neutralizes delimiters. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nDevelopers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Strategy:  Input Validation\r\nDevelopers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-15",
        "Phase": null,
        "Title": null,
        "Description": "Command Delimiters",
        "Url": "http://capec.mitre.org/data/definitions/15.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-141",
      "CWE-142",
      "CWE-143",
      "CWE-144",
      "CWE-145",
      "CWE-146"
    ]
  },
  {
    "Id": "CWE-141",
    "Title": " Improper Neutralization of Parameter/Argument Delimiters",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2003-0307",
        "Phase": null,
        "Title": "Attacker inserts field separator into input to specify admin privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0307"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-142",
    "Title": " Improper Neutralization of Value Delimiters",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2000-0293",
        "Phase": null,
        "Title": "Multiple internal space, insufficient quoting - program does not use proper delimiter between values. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0293"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-143",
    "Title": " Improper Neutralization of Record Delimiters",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-1982",
        "Phase": null,
        "Title": "Carriage returns in subject field allow adding new records to data file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1982"
      },
      {
        "Id": "CVE-2001-0527",
        "Phase": null,
        "Title": "Attacker inserts carriage returns and \"|\" field separator characters to add new user/privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0527"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-144",
    "Title": " Improper Neutralization of Line Delimiters",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0267",
        "Phase": null,
        "Title": "Linebreak in field of PHP script allows admin privileges when written to data file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0267"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-145",
    "Title": " Improper Neutralization of Section Delimiters",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. One example of a section delimiter is the boundary string in a multipart MIME message. In many cases, doubled line delimiters can serve as a section delimiter. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-146",
    "Title": " Improper Neutralization of Expression/Command Delimiters",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that inter-expression and inter-command delimiters will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that inter-expression and inter-command delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-15",
        "Phase": null,
        "Title": null,
        "Description": "Command Delimiters",
        "Url": "http://capec.mitre.org/data/definitions/15.html"
      },
      {
        "Id": "CAPEC-6",
        "Phase": null,
        "Title": null,
        "Description": "Argument Injection",
        "Url": "http://capec.mitre.org/data/definitions/6.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-147",
    "Title": " Improper Neutralization of Input Terminators",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component. ",
    "ExtendedDescription": "For example, a \".\" in SMTP signifies the end of mail message data, whereas a null character can be used for the end of a string. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-460",
        "Phase": null,
        "Title": null,
        "Description": "HTTP Parameter Pollution (HPP)",
        "Url": "http://capec.mitre.org/data/definitions/460.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2000-0319",
        "Phase": null,
        "Title": "MFV. mail server does not properly identify terminator string to signify end of message, causing corruption, possibly in conjunction with off-by-one error. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0319"
      },
      {
        "Id": "CVE-2000-0320",
        "Phase": null,
        "Title": "MFV. mail server does not properly identify terminator string to signify end of message, causing corruption, possibly in conjunction with off-by-one error. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0320"
      },
      {
        "Id": "CVE-2001-0996",
        "Phase": null,
        "Title": "Mail server does not quote end-of-input terminator if it appears in the middle of a message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0996"
      },
      {
        "Id": "CVE-2002-0001",
        "Phase": null,
        "Title": "Improperly terminated comment or phrase allows commands. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0001"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-626"
    ]
  },
  {
    "Id": "CWE-626",
    "Title": " Null Byte Interaction Error (Poison Null Byte)",
    "Description": "The product does not properly handle null bytes or NUL characters when passing data between different representations or components. ",
    "ExtendedDescription": "A null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected. The poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Remove null bytes from all incoming strings",
        "Description": "Remove null bytes from all incoming strings. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-4155",
        "Phase": null,
        "Title": "NUL byte bypasses PHP regular expression check ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4155"
      },
      {
        "Id": "CVE-2005-3153",
        "Phase": null,
        "Title": "inserting SQL after a NUL byte bypasses allowlist regexp, enabling SQL injection ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3153"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-148",
    "Title": " Improper Neutralization of Input Leaders",
    "Description": "The application does not properly handle when a leading character or sequence (\"leader\") is missing or malformed, or if multiple leaders are used when only one should be allowed. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that leading characters will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that leading characters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-149",
    "Title": " Improper Neutralization of Quoting Syntax",
    "Description": "Quotes injected into an application can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-468",
        "Phase": null,
        "Title": null,
        "Description": "Generic Cross-Browser Cross-Domain Theft",
        "Url": "http://capec.mitre.org/data/definitions/468.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2004-0956",
        "Phase": null,
        "Title": "Database allows remote attackers to cause a denial of service (application crash) via a MATCH AGAINST query with an opening double quote but no closing double quote. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0956"
      },
      {
        "Id": "CVE-2003-1016",
        "Phase": null,
        "Title": "MIE. MFV too? bypass AV/security with fields that should not be quoted, duplicate quotes, missing leading/trailing quotes. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1016"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-150",
    "Title": " Improper Neutralization of Escape, Meta, or Control Sequences",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-134",
        "Phase": null,
        "Title": null,
        "Description": "Email Injection",
        "Url": "http://capec.mitre.org/data/definitions/134.html"
      },
      {
        "Id": "CAPEC-41",
        "Phase": null,
        "Title": null,
        "Description": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
        "Url": "http://capec.mitre.org/data/definitions/41.html"
      },
      {
        "Id": "CAPEC-81",
        "Phase": null,
        "Title": null,
        "Description": "Web Logs Tampering",
        "Url": "http://capec.mitre.org/data/definitions/81.html"
      },
      {
        "Id": "CAPEC-93",
        "Phase": null,
        "Title": null,
        "Description": "Log Injection-Tampering-Forging",
        "Url": "http://capec.mitre.org/data/definitions/93.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0542",
        "Phase": null,
        "Title": "The mail program processes special \"~\" escape sequence even when not in interactive mode. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0542"
      },
      {
        "Id": "CVE-2000-0703",
        "Phase": null,
        "Title": "Setuid program does not filter escape sequences before calling mail program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0703"
      },
      {
        "Id": "CVE-2002-0986",
        "Phase": null,
        "Title": "Mail function does not filter control characters from arguments, allowing mail message content to be modified. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0986"
      },
      {
        "Id": "CVE-2003-0020",
        "Phase": null,
        "Title": "Multi-channel issue. Terminal escape sequences not filtered from log files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0020"
      },
      {
        "Id": "CVE-2003-0083",
        "Phase": null,
        "Title": "Multi-channel issue. Terminal escape sequences not filtered from log files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0083"
      },
      {
        "Id": "CVE-2003-0021",
        "Phase": null,
        "Title": "Terminal escape sequences not filtered by terminals when displaying files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0021"
      },
      {
        "Id": "CVE-2003-0022",
        "Phase": null,
        "Title": "Terminal escape sequences not filtered by terminals when displaying files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0022"
      },
      {
        "Id": "CVE-2003-0023",
        "Phase": null,
        "Title": "Terminal escape sequences not filtered by terminals when displaying files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0023"
      },
      {
        "Id": "CVE-2003-0063",
        "Phase": null,
        "Title": "Terminal escape sequences not filtered by terminals when displaying files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0063"
      },
      {
        "Id": "CVE-2000-0476",
        "Phase": null,
        "Title": "Terminal escape sequences not filtered by terminals when displaying files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0476"
      },
      {
        "Id": "CVE-2001-1556",
        "Phase": null,
        "Title": "MFV. (multi-channel). Injection of control characters into log files that allow information hiding when using raw Unix programs to read the files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1556"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-151",
    "Title": " Improper Neutralization of Comment Delimiters",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that comments will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that comments will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0001",
        "Phase": null,
        "Title": "Mail client command execution due to improperly terminated comment in address list. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0001"
      },
      {
        "Id": "CVE-2004-0162",
        "Phase": null,
        "Title": "MIE. RFC822 comment fields may be processed as other fields by clients. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0162"
      },
      {
        "Id": "CVE-2004-1686",
        "Phase": null,
        "Title": "Well-placed comment bypasses security warning. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1686"
      },
      {
        "Id": "CVE-2005-1909",
        "Phase": null,
        "Title": "Information hiding using a manipulation involving injection of comment code into product. Note: these vulnerabilities are likely vulnerable to more general XSS problems, although a regexp might allow \"&gt;!--\" while denying most other tags. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1909"
      },
      {
        "Id": "CVE-2005-1969",
        "Phase": null,
        "Title": "Information hiding using a manipulation involving injection of comment code into product. Note: these vulnerabilities are likely vulnerable to more general XSS problems, although a regexp might allow \"&lt;!--\" while denying most other tags. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1969"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-152",
    "Title": " Improper Neutralization of Macro Symbols",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nDevelopers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Strategy:  Input Validation\r\nDevelopers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0770",
        "Phase": null,
        "Title": "Server trusts client to expand macros, allows macro characters to be expanded to trigger resultant information exposure. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0770"
      },
      {
        "Id": "CVE-2008-2018",
        "Phase": null,
        "Title": "Attacker can obtain sensitive information from a database by using a comment containing a macro, which inserts the data during expansion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2018"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-153",
    "Title": " Improper Neutralization of Substitution Characters",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0770",
        "Phase": null,
        "Title": "Server trusts client to expand macros, allows macro characters to be expanded to trigger resultant information exposure. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0770"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-154",
    "Title": " Improper Neutralization of Variable Name Delimiters",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, an injected delimiter may cause the process to take unexpected actions that result in an attack. Example: \"$\" for an environment variable. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that variable name delimiters will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that variable name delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-15",
        "Phase": null,
        "Title": null,
        "Description": "Command Delimiters",
        "Url": "http://capec.mitre.org/data/definitions/15.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2005-0129",
        "Phase": null,
        "Title": "\"%\" variable is expanded by wildcard function into disallowed commands. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0129"
      },
      {
        "Id": "CVE-2002-0770",
        "Phase": null,
        "Title": "Server trusts client to expand macros, allows macro characters to be expanded to trigger resultant information exposure. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0770"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-155",
    "Title": " Improper Neutralization of Wildcards or Matching Symbols",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, an injected element may cause the process to take unexpected actions. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that wildcard or matching elements will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that wildcard or matching elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0433",
        "Phase": null,
        "Title": "Bypass file restrictions using wildcard character. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0433"
      },
      {
        "Id": "CVE-2002-1010",
        "Phase": null,
        "Title": "Bypass file restrictions using wildcard character. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1010"
      },
      {
        "Id": "CVE-2001-0334",
        "Phase": null,
        "Title": "Wildcards generate long string on expansion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0334"
      },
      {
        "Id": "CVE-2004-1962",
        "Phase": null,
        "Title": "SQL injection involving \"/**/\" sequences. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1962"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-56"
    ]
  },
  {
    "Id": "CWE-56",
    "Title": " Path Equivalence",
    "Description": "A software system that accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-0696",
        "Phase": null,
        "Title": "List directories using desired path and \"*\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0696"
      },
      {
        "Id": "CVE-2002-0433",
        "Phase": null,
        "Title": "List files in web server using \"*.ext\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0433"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-156",
    "Title": " Improper Neutralization of Whitespace",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component. ",
    "ExtendedDescription": "This can include space, tab, etc. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0637",
        "Phase": null,
        "Title": "MIE. virus protection bypass with RFC violations involving extra whitespace, or missing whitespace. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0637"
      },
      {
        "Id": "CVE-2004-0942",
        "Phase": null,
        "Title": "CPU consumption with MIME headers containing lines with many space characters, probably due to algorithmic complexity (RESOURCE.AMP.ALG). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0942"
      },
      {
        "Id": "CVE-2003-1015",
        "Phase": null,
        "Title": "MIE. whitespace interpreted differently by mail clients. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1015"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-157",
    "Title": " Failure to Sanitize Paired Delimiters",
    "Description": "The software does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces. ",
    "ExtendedDescription": "Paired delimiters might include: &lt; and &gt; angle brackets ( and ) parentheses { and } braces [ and ] square brackets \" \" double quotes ' ' single quotes ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that grouping elements will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that grouping elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-15",
        "Phase": null,
        "Title": null,
        "Description": "Command Delimiters",
        "Url": "http://capec.mitre.org/data/definitions/15.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2004-0956",
        "Phase": null,
        "Title": "Crash via missing paired delimiter (open double-quote but no closing double-quote). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0956"
      },
      {
        "Id": "CVE-2000-1165",
        "Phase": null,
        "Title": "Crash via message without closing \"&gt;\". ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1165"
      },
      {
        "Id": "CVE-2005-2933",
        "Phase": null,
        "Title": "Buffer overflow via mailbox name with an opening double quote but missing a closing double quote, causing a larger copy than expected. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2933"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-158",
    "Title": " Improper Neutralization of Null Byte or NUL Character",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, an injected NUL character or null byte may cause the software to believe the input is terminated earlier than it actually is, or otherwise cause the input to be misinterpreted. This could then be used to inject potentially dangerous input that occurs after the null byte or otherwise bypass validation routines and other protection mechanisms. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-52",
        "Phase": null,
        "Title": null,
        "Description": "Embedding NULL Bytes",
        "Url": "http://capec.mitre.org/data/definitions/52.html"
      },
      {
        "Id": "CAPEC-53",
        "Phase": null,
        "Title": null,
        "Description": "Postfix, Null Terminate, and Backslash",
        "Url": "http://capec.mitre.org/data/definitions/53.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-1284",
        "Phase": null,
        "Title": "NUL byte in theme name causes directory traversal impact to be worse ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1284"
      },
      {
        "Id": "CVE-2005-2008",
        "Phase": null,
        "Title": "Source code disclosure using trailing null. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2008"
      },
      {
        "Id": "CVE-2005-3293",
        "Phase": null,
        "Title": "Source code disclosure using trailing null. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3293"
      },
      {
        "Id": "CVE-2005-2061",
        "Phase": null,
        "Title": "Trailing null allows file include. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2061"
      },
      {
        "Id": "CVE-2002-1774",
        "Phase": null,
        "Title": "Null character in MIME header allows detection bypass. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1774"
      },
      {
        "Id": "CVE-2000-0149",
        "Phase": null,
        "Title": "Web server allows remote attackers to view the source code for CGI programs via a null character (%00) at the end of a URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0149"
      },
      {
        "Id": "CVE-2000-0671",
        "Phase": null,
        "Title": "Web server earlier allows allows remote attackers to bypass access restrictions, list directory contents, and read source code by inserting a null character (%00) in the URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0671"
      },
      {
        "Id": "CVE-2001-0738",
        "Phase": null,
        "Title": "Logging system allows an attacker to cause a denial of service (hang) by causing null bytes to be placed in log messages. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0738"
      },
      {
        "Id": "CVE-2001-1140",
        "Phase": null,
        "Title": "Web server allows source code for executable programs to be read via a null character (%00) at the end of a request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1140"
      },
      {
        "Id": "CVE-2002-1031",
        "Phase": null,
        "Title": "Protection mechanism for limiting file access can be bypassed using a null character (%00) at the end of the directory name. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1031"
      },
      {
        "Id": "CVE-2002-1025",
        "Phase": null,
        "Title": "Application server allows remote attackers to read JSP source code via an encoded null byte in an HTTP GET request, which causes the server to send the .JSP file unparsed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1025"
      },
      {
        "Id": "CVE-2003-0768",
        "Phase": null,
        "Title": "XSS protection mechanism only checks for sequences with an alphabetical character following a (&lt;), so a non-alphabetical or null character (%00) following a &lt; may be processed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0768"
      },
      {
        "Id": "CVE-2004-0189",
        "Phase": null,
        "Title": "Decoding function in proxy allows regular expression bypass in ACLs via URLs with null characters. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0189"
      },
      {
        "Id": "CVE-2005-3153",
        "Phase": null,
        "Title": "Null byte bypasses PHP regexp check (interaction error). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3153"
      },
      {
        "Id": "CVE-2005-4155",
        "Phase": null,
        "Title": "Null byte bypasses PHP regexp check (interaction error). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4155"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-159",
    "Title": " Improper Handling of Invalid Use of Special Elements",
    "Description": "The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-166",
      "CWE-167",
      "CWE-168"
    ]
  },
  {
    "Id": "CWE-166",
    "Title": " Improper Handling of Missing Special Element",
    "Description": "The software receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that special elements will be removed in the input vectors of their software system",
        "Description": "Developers should anticipate that special elements will be removed in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1362",
        "Phase": null,
        "Title": "Crash via message type without separator character ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1362"
      },
      {
        "Id": "CVE-2002-0729",
        "Phase": null,
        "Title": "Missing special character (separator) causes crash ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0729"
      },
      {
        "Id": "CVE-2002-1532",
        "Phase": null,
        "Title": "HTTP GET without \\r\\n\\r\\n CRLF sequences causes product to wait indefinitely and prevents other users from accessing it ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1532"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-167",
    "Title": " Improper Handling of Additional Special Element",
    "Description": "The software receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that extra special elements will be injected in the input vectors of their software system",
        "Description": "Developers should anticipate that extra special elements will be injected in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2000-0116",
        "Phase": null,
        "Title": "Extra \"&lt;\" in front of SCRIPT tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0116"
      },
      {
        "Id": "CVE-2001-1157",
        "Phase": null,
        "Title": "Extra \"&lt;\" in front of SCRIPT tag. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1157"
      },
      {
        "Id": "CVE-2002-2086",
        "Phase": null,
        "Title": "\"&lt;script\" - probably a cleansing error ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2086"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-168",
    "Title": " Improper Handling of Inconsistent Special Elements",
    "Description": "The software does not properly handle input in which an inconsistency exists between two or more special characters or reserved words. ",
    "ExtendedDescription": "An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-160",
    "Title": " Improper Neutralization of Leading Special Elements",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, improperly handled leading special elements may cause the process to take unexpected actions that result in an attack. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that leading special elements will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that leading special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-37",
      "CWE-161"
    ]
  },
  {
    "Id": "CWE-161",
    "Title": " Improper Neutralization of Multiple Leading Special Elements",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, improperly handled multiple leading special elements may cause the process to take unexpected actions that result in an attack. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-50"
    ]
  },
  {
    "Id": "CWE-50",
    "Title": " Path Equivalence",
    "Description": "A software system that accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1483",
        "Phase": null,
        "Title": "Read files with full pathname using multiple internal slash. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1483"
      },
      {
        "Id": "CVE-1999-1456",
        "Phase": null,
        "Title": "Server allows remote attackers to read arbitrary files via a GET request with more than one leading / (slash) character in the filename. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1456"
      },
      {
        "Id": "CVE-2004-0578",
        "Phase": null,
        "Title": "Server allows remote attackers to read arbitrary files via leading slash (//) characters in a URL request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0578"
      },
      {
        "Id": "CVE-2002-0275",
        "Phase": null,
        "Title": "Server allows remote attackers to bypass authentication and read restricted files via an extra / (slash) in the requested URL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0275"
      },
      {
        "Id": "CVE-2004-1032",
        "Phase": null,
        "Title": "Product allows local users to delete arbitrary files or create arbitrary empty files via a target filename with a large number of leading slash (/) characters. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1032"
      },
      {
        "Id": "CVE-2002-1238",
        "Phase": null,
        "Title": "Server allows remote attackers to bypass access restrictions for files via an HTTP request with a sequence of multiple / (slash) characters such as http://www.example.com///file/. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1238"
      },
      {
        "Id": "CVE-2004-1878",
        "Phase": null,
        "Title": "Product allows remote attackers to bypass authentication, obtain sensitive information, or gain access via a direct request to admin/user.pl preceded by // (double leading slash). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1878"
      },
      {
        "Id": "CVE-2005-1365",
        "Phase": null,
        "Title": "Server allows remote attackers to execute arbitrary commands via a URL with multiple leading \"/\" (slash) characters and \"..\" sequences. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1365"
      },
      {
        "Id": "CVE-2000-1050",
        "Phase": null,
        "Title": "Access directory using multiple leading slash. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1050"
      },
      {
        "Id": "CVE-2001-1072",
        "Phase": null,
        "Title": "Bypass access restrictions via multiple leading slash, which causes a regular expression to fail. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1072"
      },
      {
        "Id": "CVE-2004-0235",
        "Phase": null,
        "Title": "Archive extracts to arbitrary files using multiple leading slash in filenames in the archive. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0235"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-162",
    "Title": " Improper Neutralization of Trailing Special Elements",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, improperly handled trailing special elements may cause the process to take unexpected actions that result in an attack. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that trailing special elements will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that trailing special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-635",
        "Phase": null,
        "Title": null,
        "Description": "Alternative Execution Due to Deceptive Filenames",
        "Url": "http://capec.mitre.org/data/definitions/635.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-42",
      "CWE-46",
      "CWE-54",
      "CWE-163"
    ]
  },
  {
    "Id": "CWE-42",
    "Title": " Path Equivalence",
    "Description": "A software system that accepts path input in the form of trailing dot ('filedir.') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2000-1114",
        "Phase": null,
        "Title": "Source code disclosure using trailing dot ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1114"
      },
      {
        "Id": "CVE-2002-1986,",
        "Phase": null,
        "Title": "Source code disclosure using trailing dot ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1986,"
      },
      {
        "Id": "CVE-2004-2213",
        "Phase": null,
        "Title": "Source code disclosure using trailing dot ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2213"
      },
      {
        "Id": "CVE-2005-3293",
        "Phase": null,
        "Title": "Source code disclosure using trailing dot ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3293"
      },
      {
        "Id": "CVE-2004-0061",
        "Phase": null,
        "Title": "Bypass directory access restrictions using trailing dot in URL ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0061"
      },
      {
        "Id": "CVE-2000-1133",
        "Phase": null,
        "Title": "Bypass directory access restrictions using trailing dot in URL ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1133"
      },
      {
        "Id": "CVE-2001-1386",
        "Phase": null,
        "Title": "Bypass check for \".lnk\" extension using \".lnk.\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1386"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-46",
    "Title": " Path Equivalence",
    "Description": "A software system that accepts path input in the form of trailing space ('filedir ') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-649",
        "Phase": null,
        "Title": null,
        "Description": "Adding a Space to a File Extension",
        "Url": "http://capec.mitre.org/data/definitions/649.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2001-0693",
        "Phase": null,
        "Title": "Source disclosure via trailing encoded space \"%20\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0693"
      },
      {
        "Id": "CVE-2001-0778",
        "Phase": null,
        "Title": "Source disclosure via trailing encoded space \"%20\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0778"
      },
      {
        "Id": "CVE-2001-1248",
        "Phase": null,
        "Title": "Source disclosure via trailing encoded space \"%20\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1248"
      },
      {
        "Id": "CVE-2004-0280",
        "Phase": null,
        "Title": "Source disclosure via trailing encoded space \"%20\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0280"
      },
      {
        "Id": "CVE-2004-2213",
        "Phase": null,
        "Title": "Source disclosure via trailing encoded space \"%20\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2213"
      },
      {
        "Id": "CVE-2005-0622",
        "Phase": null,
        "Title": "Source disclosure via trailing encoded space \"%20\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0622"
      },
      {
        "Id": "CVE-2005-1656",
        "Phase": null,
        "Title": "Source disclosure via trailing encoded space \"%20\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1656"
      },
      {
        "Id": "CVE-2002-1603",
        "Phase": null,
        "Title": "Source disclosure via trailing encoded space \"%20\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1603"
      },
      {
        "Id": "CVE-2001-0054",
        "Phase": null,
        "Title": "Multi-Factor Vulnerability (MVF). directory traversal and other issues in FTP server using Web encodings such as \"%20\"; certain manipulations have unusual side effects. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0054"
      },
      {
        "Id": "CVE-2002-1451",
        "Phase": null,
        "Title": "Trailing space (\"+\" in query string) leads to source code disclosure. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1451"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-54",
    "Title": " Path Equivalence",
    "Description": "A software system that accepts path input in the form of trailing backslash ('filedir\\') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-0847",
        "Phase": null,
        "Title": "ASP.NET allows remote attackers to bypass authentication for .aspx files in restricted directories via a request containing a (1) \"\\\" (backslash) or (2) \"%5C\" (encoded backslash), aka \"Path Validation Vulnerability.\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0847"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-163",
    "Title": " Improper Neutralization of Multiple Trailing Special Elements",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-52"
    ]
  },
  {
    "Id": "CWE-52",
    "Title": " Path Equivalence",
    "Description": "A software system that accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1078",
        "Phase": null,
        "Title": "Directory listings in web server using multiple trailing slash ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1078"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-164",
    "Title": " Improper Neutralization of Internal Special Elements",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-165"
    ]
  },
  {
    "Id": "CWE-165",
    "Title": " Improper Neutralization of Multiple Internal Special Elements",
    "Description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component. ",
    "ExtendedDescription": "As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": null,
        "Title": "Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their software system",
        "Description": "Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-45",
      "CWE-53"
    ]
  },
  {
    "Id": "CWE-45",
    "Title": " Path Equivalence",
    "Description": "A software system that accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-53",
    "Title": " Path Equivalence",
    "Description": "A software system that accepts path input in the form of multiple internal backslash ('\\multiple\\trailing\\\\slash') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-464",
    "Title": " Addition of Data Structure Sentinel",
    "Description": "The accidental addition of a data-structure sentinel can cause serious programming logic problems. ",
    "ExtendedDescription": "Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "Encapsulate the user from interacting with data sentinels",
        "Description": "Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Proper error checking can reduce the risk of inadvertently introducing sentinel values into data",
        "Description": "Proper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use an abstraction library to abstract away risky APIs",
        "Description": "Use an abstraction library to abstract away risky APIs. This is not a complete solution. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Use OS-level preventative functionality",
        "Description": "Use OS-level preventative functionality. This is not a complete solution. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-790",
    "Title": " Improper Filtering of Special Elements",
    "Description": "The software receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-791"
    ]
  },
  {
    "Id": "CWE-791",
    "Title": " Incomplete Filtering of Special Elements",
    "Description": "The software receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-792",
      "CWE-795"
    ]
  },
  {
    "Id": "CWE-792",
    "Title": " Incomplete Filtering of One or More Instances of Special Elements",
    "Description": "The software receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component. ",
    "ExtendedDescription": "Incomplete filtering of this nature involves either: only filtering a single instance of a special element when more exist, or not filtering all instances or all elements where multiple special elements exist. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-793",
      "CWE-794"
    ]
  },
  {
    "Id": "CWE-793",
    "Title": " Only Filtering One Instance of a Special Element",
    "Description": "The software receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component. ",
    "ExtendedDescription": "Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-794",
    "Title": " Incomplete Filtering of Multiple Instances of Special Elements",
    "Description": "The software receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component. ",
    "ExtendedDescription": "Incomplete filtering of this nature may be applied to: sequential elements (special elements that appear next to each other) or non-sequential elements (special elements that appear multiple times in different locations). ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-795",
    "Title": " Only Filtering Special Elements at a Specified Location",
    "Description": "The software receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component. ",
    "ExtendedDescription": "A filter might only account for instances of special elements when they occur: relative to a marker (e.g. \"at the beginning/end of string; the second argument\"), or at an absolute position (e.g. \"byte number 10\"). This may leave special elements in the data that did not match the filter position, but still may be dangerous. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-796",
      "CWE-797"
    ]
  },
  {
    "Id": "CWE-796",
    "Title": " Only Filtering Special Elements Relative to a Marker",
    "Description": "The software receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. \"at the beginning/end of a string; the second argument\"), thereby missing remaining special elements that may exist before sending it to a downstream component. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-797",
    "Title": " Only Filtering Special Elements at an Absolute Position",
    "Description": "The software receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. \"byte number 10\"), thereby missing remaining special elements that may exist before sending it to a downstream component. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-170",
    "Title": " Improper Null Termination",
    "Description": "The software does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator. ",
    "ExtendedDescription": "Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Use a language that is not susceptible to these issues",
        "Description": "Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that all string functions used are understood fully as to how they append null characters",
        "Description": "Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution",
        "Description": "If performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Switch to bounded string manipulation functions",
        "Description": "Switch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer)",
        "Description": "Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2000-0312",
        "Phase": null,
        "Title": "Attacker does not null-terminate argv[] when invoking another program. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0312"
      },
      {
        "Id": "CVE-2003-0777",
        "Phase": null,
        "Title": "Interrupted step causes resultant lack of null termination. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0777"
      },
      {
        "Id": "CVE-2004-1072",
        "Phase": null,
        "Title": "Fault causes resultant lack of null termination, leading to buffer expansion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1072"
      },
      {
        "Id": "CVE-2001-1389",
        "Phase": null,
        "Title": "Multiple vulnerabilities related to improper null termination. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1389"
      },
      {
        "Id": "CVE-2003-0143",
        "Phase": null,
        "Title": "Product does not null terminate a message buffer after snprintf-like call, leading to overflow. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0143"
      },
      {
        "Id": "CVE-2009-2523",
        "Phase": null,
        "Title": "Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2523"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-172",
    "Title": " Encoding Error",
    "Description": "The software does not properly encode or decode the data, resulting in unexpected values. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable",
        "Description": "Strategy:  Output Encoding\r\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-120",
        "Phase": null,
        "Title": null,
        "Description": "Double Encoding",
        "Url": "http://capec.mitre.org/data/definitions/120.html"
      },
      {
        "Id": "CAPEC-267",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/267.html"
      },
      {
        "Id": "CAPEC-3",
        "Phase": null,
        "Title": null,
        "Description": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
        "Url": "http://capec.mitre.org/data/definitions/3.html"
      },
      {
        "Id": "CAPEC-52",
        "Phase": null,
        "Title": null,
        "Description": "Embedding NULL Bytes",
        "Url": "http://capec.mitre.org/data/definitions/52.html"
      },
      {
        "Id": "CAPEC-53",
        "Phase": null,
        "Title": null,
        "Description": "Postfix, Null Terminate, and Backslash",
        "Url": "http://capec.mitre.org/data/definitions/53.html"
      },
      {
        "Id": "CAPEC-64",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/64.html"
      },
      {
        "Id": "CAPEC-71",
        "Phase": null,
        "Title": null,
        "Description": "Using Unicode Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/71.html"
      },
      {
        "Id": "CAPEC-72",
        "Phase": null,
        "Title": null,
        "Description": "URL Encoding",
        "Url": "http://capec.mitre.org/data/definitions/72.html"
      },
      {
        "Id": "CAPEC-78",
        "Phase": null,
        "Title": null,
        "Description": "Using Escaped Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/78.html"
      },
      {
        "Id": "CAPEC-80",
        "Phase": null,
        "Title": null,
        "Description": "Using UTF-8 Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/80.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-173",
      "CWE-174",
      "CWE-175",
      "CWE-176",
      "CWE-177"
    ]
  },
  {
    "Id": "CWE-173",
    "Title": " Improper Handling of Alternate Encoding",
    "Description": "The software does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e",
        "Description": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-120",
        "Phase": null,
        "Title": null,
        "Description": "Double Encoding",
        "Url": "http://capec.mitre.org/data/definitions/120.html"
      },
      {
        "Id": "CAPEC-267",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/267.html"
      },
      {
        "Id": "CAPEC-3",
        "Phase": null,
        "Title": null,
        "Description": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
        "Url": "http://capec.mitre.org/data/definitions/3.html"
      },
      {
        "Id": "CAPEC-4",
        "Phase": null,
        "Title": null,
        "Description": "Using Alternative IP Address Encodings",
        "Url": "http://capec.mitre.org/data/definitions/4.html"
      },
      {
        "Id": "CAPEC-52",
        "Phase": null,
        "Title": null,
        "Description": "Embedding NULL Bytes",
        "Url": "http://capec.mitre.org/data/definitions/52.html"
      },
      {
        "Id": "CAPEC-53",
        "Phase": null,
        "Title": null,
        "Description": "Postfix, Null Terminate, and Backslash",
        "Url": "http://capec.mitre.org/data/definitions/53.html"
      },
      {
        "Id": "CAPEC-64",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/64.html"
      },
      {
        "Id": "CAPEC-71",
        "Phase": null,
        "Title": null,
        "Description": "Using Unicode Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/71.html"
      },
      {
        "Id": "CAPEC-72",
        "Phase": null,
        "Title": null,
        "Description": "URL Encoding",
        "Url": "http://capec.mitre.org/data/definitions/72.html"
      },
      {
        "Id": "CAPEC-78",
        "Phase": null,
        "Title": null,
        "Description": "Using Escaped Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/78.html"
      },
      {
        "Id": "CAPEC-79",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes in Alternate Encoding",
        "Url": "http://capec.mitre.org/data/definitions/79.html"
      },
      {
        "Id": "CAPEC-80",
        "Phase": null,
        "Title": null,
        "Description": "Using UTF-8 Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/80.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-174",
    "Title": " Double Decoding of the Same Data",
    "Description": "The software decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e",
        "Description": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-1315",
        "Phase": null,
        "Title": "Forum software improperly URL decodes the highlight parameter when extracting text to highlight, which allows remote attackers to execute arbitrary PHP code by double-encoding the highlight value so that special characters are inserted into the result. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1315"
      },
      {
        "Id": "CVE-2004-1939",
        "Phase": null,
        "Title": "XSS protection mechanism attempts to remove \"/\" that could be used to close tags, but it can be bypassed using double encoded slashes (%252F) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1939"
      },
      {
        "Id": "CVE-2001-0333",
        "Phase": null,
        "Title": "Directory traversal using double encoding. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0333"
      },
      {
        "Id": "CVE-2004-1938",
        "Phase": null,
        "Title": "\"%2527\" (double-encoded single quote) used in SQL injection. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1938"
      },
      {
        "Id": "CVE-2005-1945",
        "Phase": null,
        "Title": "Double hex-encoded data. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1945"
      },
      {
        "Id": "CVE-2005-0054",
        "Phase": null,
        "Title": "Browser executes HTML at higher privileges via URL with hostnames that are double hex encoded, which are decoded twice to generate a malicious hostname. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0054"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-175",
    "Title": " Improper Handling of Mixed Encoding",
    "Description": "The software does not properly handle when the same input uses several different (mixed) encodings. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e",
        "Description": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output",
        "Description": "Strategy:  Output Encoding\r\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-176",
    "Title": " Improper Handling of Unicode Encoding",
    "Description": "The software does not properly handle when an input contains Unicode encoding. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e",
        "Description": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-71",
        "Phase": null,
        "Title": null,
        "Description": "Using Unicode Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/71.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2000-0884",
        "Phase": null,
        "Title": "Server allows remote attackers to read documents outside of the web root, and possibly execute arbitrary commands, via malformed URLs that contain Unicode encoded characters. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0884"
      },
      {
        "Id": "CVE-2001-0709",
        "Phase": null,
        "Title": "Server allows a remote attacker to obtain source code of ASP files via a URL encoded with Unicode. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0709"
      },
      {
        "Id": "CVE-2001-0669",
        "Phase": null,
        "Title": "Overlaps interaction error. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0669"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-177",
    "Title": " Improper Handling of URL Encoding (Hex Encoding)",
    "Description": "The software does not properly handle when all or part of an input has been URL encoded. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e",
        "Description": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-120",
        "Phase": null,
        "Title": null,
        "Description": "Double Encoding",
        "Url": "http://capec.mitre.org/data/definitions/120.html"
      },
      {
        "Id": "CAPEC-468",
        "Phase": null,
        "Title": null,
        "Description": "Generic Cross-Browser Cross-Domain Theft",
        "Url": "http://capec.mitre.org/data/definitions/468.html"
      },
      {
        "Id": "CAPEC-64",
        "Phase": null,
        "Title": null,
        "Description": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/64.html"
      },
      {
        "Id": "CAPEC-72",
        "Phase": null,
        "Title": null,
        "Description": "URL Encoding",
        "Url": "http://capec.mitre.org/data/definitions/72.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2000-0900",
        "Phase": null,
        "Title": "Hex-encoded path traversal variants - \"%2e%2e\", \"%2e%2e%2f\", \"%5c%2e%2e\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0900"
      },
      {
        "Id": "CVE-2005-2256",
        "Phase": null,
        "Title": "Hex-encoded path traversal variants - \"%2e%2e\", \"%2e%2e%2f\", \"%5c%2e%2e\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2256"
      },
      {
        "Id": "CVE-2004-2121",
        "Phase": null,
        "Title": "Hex-encoded path traversal variants - \"%2e%2e\", \"%2e%2e%2f\", \"%5c%2e%2e\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2121"
      },
      {
        "Id": "CVE-2004-0280",
        "Phase": null,
        "Title": "\"%20\" (encoded space) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0280"
      },
      {
        "Id": "CVE-2003-0424",
        "Phase": null,
        "Title": "\"%20\" (encoded space) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0424"
      },
      {
        "Id": "CVE-2001-0693",
        "Phase": null,
        "Title": "\"%20\" (encoded space) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0693"
      },
      {
        "Id": "CVE-2001-0778",
        "Phase": null,
        "Title": "\"%20\" (encoded space) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0778"
      },
      {
        "Id": "CVE-2002-1831",
        "Phase": null,
        "Title": "Crash via hex-encoded space \"%20\". ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1831"
      },
      {
        "Id": "CVE-2000-0671",
        "Phase": null,
        "Title": "\"%00\" (encoded null) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0671"
      },
      {
        "Id": "CVE-2004-0189",
        "Phase": null,
        "Title": "\"%00\" (encoded null) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0189"
      },
      {
        "Id": "CVE-2002-1291",
        "Phase": null,
        "Title": "\"%00\" (encoded null) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1291"
      },
      {
        "Id": "CVE-2002-1031",
        "Phase": null,
        "Title": "\"%00\" (encoded null) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1031"
      },
      {
        "Id": "CVE-2001-1140",
        "Phase": null,
        "Title": "\"%00\" (encoded null) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1140"
      },
      {
        "Id": "CVE-2004-0760",
        "Phase": null,
        "Title": "\"%00\" (encoded null) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0760"
      },
      {
        "Id": "CVE-2002-1025",
        "Phase": null,
        "Title": "\"%00\" (encoded null) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1025"
      },
      {
        "Id": "CVE-2002-1213",
        "Phase": null,
        "Title": "\"%2f\" (encoded slash) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1213"
      },
      {
        "Id": "CVE-2004-0072",
        "Phase": null,
        "Title": "\"%5c\" (encoded backslash) and \"%2e\" (encoded dot) sequences ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0072"
      },
      {
        "Id": "CVE-2004-0847",
        "Phase": null,
        "Title": "\"%5c\" (encoded backslash) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0847"
      },
      {
        "Id": "CVE-2002-1575",
        "Phase": null,
        "Title": "\"%0a\" (overlaps CRLF) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1575"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-228",
    "Title": " Improper Handling of Syntactically Invalid Structure",
    "Description": "The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-229",
      "CWE-233",
      "CWE-237",
      "CWE-241"
    ]
  },
  {
    "Id": "CWE-229",
    "Title": " Improper Handling of Values",
    "Description": "The software does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-230",
      "CWE-231",
      "CWE-232"
    ]
  },
  {
    "Id": "CWE-230",
    "Title": " Improper Handling of Missing Values",
    "Description": "The software does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0422",
        "Phase": null,
        "Title": "Blank Host header triggers resultant infoleak. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0422"
      },
      {
        "Id": "CVE-2000-1006",
        "Phase": null,
        "Title": "Blank \"charset\" attribute in MIME header triggers crash. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1006"
      },
      {
        "Id": "CVE-2004-1504",
        "Phase": null,
        "Title": "Blank parameter causes external error infoleak. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1504"
      },
      {
        "Id": "CVE-2005-2053",
        "Phase": null,
        "Title": "Blank parameter causes external error infoleak. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2053"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-231",
    "Title": " Improper Handling of Extra Values",
    "Description": "The software does not handle or incorrectly handles when more values are provided than expected. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "This typically occurs in situations when only one value is expected. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-232",
    "Title": " Improper Handling of Undefined Values",
    "Description": "The software does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2000-1003",
        "Phase": null,
        "Title": "Client crash when server returns unknown driver type. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1003"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-233",
    "Title": " Improper Handling of Parameters",
    "Description": "The software does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-39",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Opaque Client-based Data Tokens",
        "Url": "http://capec.mitre.org/data/definitions/39.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-234",
      "CWE-235",
      "CWE-236"
    ]
  },
  {
    "Id": "CWE-234",
    "Title": " Failure to Handle Missing Parameter",
    "Description": "If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well. ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Build and Compilation",
        "Title": "This issue can be simply combated with the use of proper build process",
        "Description": "This issue can be simply combated with the use of proper build process. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Forward declare all functions",
        "Description": "Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-0276",
        "Phase": null,
        "Title": "Server earlier allows remote attackers to cause a denial of service (crash) via an HTTP request with a sequence of \"%\" characters and a missing Host field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0276"
      },
      {
        "Id": "CVE-2002-1488",
        "Phase": null,
        "Title": "Chat client allows remote malicious IRC servers to cause a denial of service (crash) via a PART message with (1) a missing channel or (2) a channel that the user is not in. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1488"
      },
      {
        "Id": "CVE-2002-1169",
        "Phase": null,
        "Title": "Proxy allows remote attackers to cause a denial of service (crash) via an HTTP request to helpout.exe with a missing HTTP version numbers. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1169"
      },
      {
        "Id": "CVE-2000-0521",
        "Phase": null,
        "Title": "Web server allows disclosure of CGI source code via an HTTP request without the version number. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0521"
      },
      {
        "Id": "CVE-2001-0590",
        "Phase": null,
        "Title": "Application server allows a remote attacker to read the source code to arbitrary 'jsp' files via a malformed URL request which does not end with an HTTP protocol specification. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0590"
      },
      {
        "Id": "CVE-2003-0239",
        "Phase": null,
        "Title": "Chat software allows remote attackers to cause a denial of service via malformed GIF89a headers that do not contain a GCT (Global Color Table) or an LCT (Local Color Table) after an Image Descriptor. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0239"
      },
      {
        "Id": "CVE-2002-1023",
        "Phase": null,
        "Title": "Server allows remote attackers to cause a denial of service (crash) via an HTTP GET request without a URI. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1023"
      },
      {
        "Id": "CVE-2002-1236",
        "Phase": null,
        "Title": "CGI crashes when called without any arguments. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1236"
      },
      {
        "Id": "CVE-2003-0422",
        "Phase": null,
        "Title": "CGI crashes when called without any arguments. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0422"
      },
      {
        "Id": "CVE-2002-1531",
        "Phase": null,
        "Title": "Crash in HTTP request without a Content-Length field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1531"
      },
      {
        "Id": "CVE-2002-1077",
        "Phase": null,
        "Title": "Crash in HTTP request without a Content-Length field. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1077"
      },
      {
        "Id": "CVE-2002-1358",
        "Phase": null,
        "Title": "Empty elements/strings in protocol test suite affect many SSH2 servers/clients. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1358"
      },
      {
        "Id": "CVE-2003-0477",
        "Phase": null,
        "Title": "FTP server crashes in PORT command without an argument. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0477"
      },
      {
        "Id": "CVE-2002-0107",
        "Phase": null,
        "Title": "Resultant infoleak in web server via GET requests without HTTP/1.0 version string. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0107"
      },
      {
        "Id": "CVE-2002-0596",
        "Phase": null,
        "Title": "GET request with empty parameter leads to error message infoleak (path disclosure). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0596"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-235",
    "Title": " Improper Handling of Extra Parameters",
    "Description": "The software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-460",
        "Phase": null,
        "Title": null,
        "Description": "HTTP Parameter Pollution (HPP)",
        "Url": "http://capec.mitre.org/data/definitions/460.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2003-1014",
        "Phase": null,
        "Title": "MIE. multiple gateway/security products allow restriction bypass using multiple MIME fields with the same name, which are interpreted differently by clients. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1014"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "This typically occurs in situations when only one element is expected to be specified. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-236",
    "Title": " Improper Handling of Undefined Parameters",
    "Description": "The software does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1488",
        "Phase": null,
        "Title": "Crash in IRC client via PART message from a channel the user is not in. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1488"
      },
      {
        "Id": "CVE-2001-0650",
        "Phase": null,
        "Title": "Router crash or bad route modification using BGP updates with invalid transitive attribute. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0650"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-237",
    "Title": " Improper Handling of Structural Elements",
    "Description": "The software does not handle or incorrectly handles inputs that are related to complex structures. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
      "CWE-238",
      "CWE-239",
      "CWE-240"
    ]
  },
  {
    "Id": "CWE-238",
    "Title": " Improper Handling of Incomplete Structural Elements",
    "Description": "The software does not handle or incorrectly handles when a particular structural element is not completely specified. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-239",
    "Title": " Failure to Handle Incomplete Element",
    "Description": "The software does not properly handle when a particular element is not completely specified. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1532",
        "Phase": null,
        "Title": "HTTP GET without \\r\\n\\r\\n CRLF sequences causes product to wait indefinitely and prevents other users from accessing it. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1532"
      },
      {
        "Id": "CVE-2003-0195",
        "Phase": null,
        "Title": "Partial request is not timed out. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0195"
      },
      {
        "Id": "CVE-2005-2526",
        "Phase": null,
        "Title": "MFV. CPU exhaustion in printer via partial printing request then early termination of connection. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2526"
      },
      {
        "Id": "CVE-2002-1906",
        "Phase": null,
        "Title": "CPU consumption by sending incomplete HTTP requests and leaving the connections open. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1906"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-240",
    "Title": " Improper Handling of Inconsistent Structural Elements",
    "Description": "The software does not handle or incorrectly handles when two or more structural elements should be consistent, but are not. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-241",
    "Title": " Improper Handling of Unexpected Data Type",
    "Description": "The software does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z). ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-48",
        "Phase": null,
        "Title": null,
        "Description": "Passing Local Filenames to Functions That Expect a URL",
        "Url": "http://capec.mitre.org/data/definitions/48.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-1999-1156",
        "Phase": null,
        "Title": "FTP server crash via PORT command with non-numeric character. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1156"
      },
      {
        "Id": "CVE-2004-0270",
        "Phase": null,
        "Title": "Anti-virus product has assert error when line length is non-numeric. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0270"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-463",
    "Title": " Deletion of Data Structure Sentinel",
    "Description": "The accidental deletion of a data-structure sentinel can cause serious programming logic problems. ",
    "ExtendedDescription": "Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use an abstraction library to abstract away risky APIs",
        "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Build and Compilation",
        "Title": "Strategy:  Compilation or Build Hardening\r\nRun or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows",
        "Description": "Strategy:  Compilation or Build Hardening\r\nRun or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. \r\nFor example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice. \r\nEffectiveness: Defense in Depth\r\nNote: This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Use OS-level preventative functionality",
        "Description": "Use OS-level preventative functionality. Not a complete solution. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-924",
    "Title": " Improper Enforcement of Message Integrity During Transmission in a Communication Channel",
    "Description": "The software establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission. ",
    "ExtendedDescription": "Attackers might be able to modify the message and spoof the endpoint by interfering with the data as it crosses the network or by redirecting the connection to a system under their control. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-349",
    "Title": " Acceptance of Extraneous Untrusted Data With Trusted Data",
    "Description": "The software, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-141",
        "Phase": null,
        "Title": null,
        "Description": "Cache Poisoning",
        "Url": "http://capec.mitre.org/data/definitions/141.html"
      },
      {
        "Id": "CAPEC-142",
        "Phase": null,
        "Title": null,
        "Description": "DNS Cache Poisoning",
        "Url": "http://capec.mitre.org/data/definitions/142.html"
      },
      {
        "Id": "CAPEC-75",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Writeable Configuration Files",
        "Url": "http://capec.mitre.org/data/definitions/75.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0018",
        "Phase": null,
        "Title": "Does not verify that trusted entity is authoritative for all entities in its response. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0018"
      },
      {
        "Id": "CVE-2006-5462",
        "Phase": null,
        "Title": "use of extra data in a signature allows certificate signature forging ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5462"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-351",
    "Title": " Insufficient Type Distinction",
    "Description": "The software does not properly distinguish between different types of elements in a way that leads to insecure behavior. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-2260",
        "Phase": null,
        "Title": "Browser user interface does not distinguish between user-initiated and synthetic events. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2260"
      },
      {
        "Id": "CVE-2005-2801",
        "Phase": null,
        "Title": "Product does not compare all required data in two separate elements, causing it to think they are the same, leading to loss of ACLs. Similar to Same Name error. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2801"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-352",
    "Title": " Cross-Site Request Forgery (CSRF)",
    "Description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request. ",
    "ExtendedDescription": "When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330] \r\nAnother example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45] ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script",
        "Description": "Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form",
        "Description": "Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332] \r\nNote: Note that this can be bypassed using XSS (CWE-79). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Identify especially dangerous operations",
        "Description": "Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation. \r\nNote: Note that this can be bypassed using XSS (CWE-79). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use the \"double-submitted cookie\" method as described by Felten and Zeller: \r\nWhen a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine",
        "Description": "Use the \"double-submitted cookie\" method as described by Felten and Zeller: \r\nWhen a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same. \r\nBecause of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult. \r\nThis technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331] \r\nNote: Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Do not use the GET method for any request that triggers a state change",
        "Description": "Do not use the GET method for any request that triggers a state change. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Check the HTTP Referer header to see if the request originated from an expected page",
        "Description": "Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons. \r\nNote: Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-111",
        "Phase": null,
        "Title": null,
        "Description": "JSON Hijacking (aka JavaScript Hijacking)",
        "Url": "http://capec.mitre.org/data/definitions/111.html"
      },
      {
        "Id": "CAPEC-462",
        "Phase": null,
        "Title": null,
        "Description": "Cross-Domain Search Timing",
        "Url": "http://capec.mitre.org/data/definitions/462.html"
      },
      {
        "Id": "CAPEC-467",
        "Phase": null,
        "Title": null,
        "Description": "Cross Site Identification",
        "Url": "http://capec.mitre.org/data/definitions/467.html"
      },
      {
        "Id": "CAPEC-62",
        "Phase": null,
        "Title": null,
        "Description": "Cross Site Request Forgery",
        "Url": "http://capec.mitre.org/data/definitions/62.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2004-1703",
        "Phase": null,
        "Title": "Add user accounts via a URL in an img tag ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1703"
      },
      {
        "Id": "CVE-2004-1995",
        "Phase": null,
        "Title": "Add user accounts via a URL in an img tag ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1995"
      },
      {
        "Id": "CVE-2004-1967",
        "Phase": null,
        "Title": "Arbitrary code execution by specifying the code in a crafted img tag or URL ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1967"
      },
      {
        "Id": "CVE-2004-1842",
        "Phase": null,
        "Title": "Gain administrative privileges via a URL in an img tag ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1842"
      },
      {
        "Id": "CVE-2005-1947",
        "Phase": null,
        "Title": "Delete a victim's information via a URL or an img tag ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1947"
      },
      {
        "Id": "CVE-2005-2059",
        "Phase": null,
        "Title": "Change another user's settings via a URL or an img tag ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2059"
      },
      {
        "Id": "CVE-2005-1674",
        "Phase": null,
        "Title": "Perform actions as administrator via a URL or an img tag ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1674"
      },
      {
        "Id": "CVE-2009-3520",
        "Phase": null,
        "Title": "modify password for the administrator ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3520"
      },
      {
        "Id": "CVE-2009-3022",
        "Phase": null,
        "Title": "CMS allows modification of configuration via CSRF attack against the administrator ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3022"
      },
      {
        "Id": "CVE-2009-3759",
        "Phase": null,
        "Title": "web interface allows password changes or stopping a virtual machine via CSRF ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3759"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-360",
    "Title": " Trust of System Event Data",
    "Description": "Security based on event locations are insecure and can be spoofed. ",
    "ExtendedDescription": "Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Never trust or rely any of the information in an Event for security",
        "Description": "Never trust or rely any of the information in an Event for security. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-422"
    ]
  },
  {
    "Id": "CWE-494",
    "Title": " Download of Code Without Integrity Check",
    "Description": "The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code. ",
    "ExtendedDescription": "An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Perform proper forward and reverse DNS lookups to detect DNS spoofing",
        "Description": "Perform proper forward and reverse DNS lookups to detect DNS spoofing. \r\nNote: This is only a partial solution since it will not prevent your code from being modified on the hosting site or in transit.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Encrypt the code with a reliable encryption scheme before transmitting",
        "Description": "Encrypt the code with a reliable encryption scheme before transmitting. \r\nThis will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nSpeficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code. \r\n  When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.  Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].   ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]",
        "Description": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Sandbox or Jail\r\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system",
        "Description": "Strategy:  Sandbox or Jail\r\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. \r\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. \r\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. \r\nBe careful to avoid CWE-243 and other weaknesses related to jails. \r\nEffectiveness: Limited\r\nNote: The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-184",
        "Phase": null,
        "Title": null,
        "Description": "Software Integrity Attack",
        "Url": "http://capec.mitre.org/data/definitions/184.html"
      },
      {
        "Id": "CAPEC-185",
        "Phase": null,
        "Title": null,
        "Description": "Malicious Software Download",
        "Url": "http://capec.mitre.org/data/definitions/185.html"
      },
      {
        "Id": "CAPEC-186",
        "Phase": null,
        "Title": null,
        "Description": "Malicious Software Update",
        "Url": "http://capec.mitre.org/data/definitions/186.html"
      },
      {
        "Id": "CAPEC-187",
        "Phase": null,
        "Title": null,
        "Description": "Malicious Automated Software Update",
        "Url": "http://capec.mitre.org/data/definitions/187.html"
      },
      {
        "Id": "CAPEC-533",
        "Phase": null,
        "Title": null,
        "Description": "Malicious Manual Software Update",
        "Url": "http://capec.mitre.org/data/definitions/533.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-3438",
        "Phase": null,
        "Title": "OS does not verify authenticity of its own updates. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3438"
      },
      {
        "Id": "CVE-2008-3324",
        "Phase": null,
        "Title": "online poker client does not verify authenticity of its own updates. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3324"
      },
      {
        "Id": "CVE-2001-1125",
        "Phase": null,
        "Title": "anti-virus product does not verify automatic updates for itself. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1125"
      },
      {
        "Id": "CVE-2002-0671",
        "Phase": null,
        "Title": "VOIP phone downloads applications from web sites without verifying integrity. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0671"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-616",
    "Title": " Incomplete Identification of Uploaded File Variables (PHP)",
    "Description": "The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files. ",
    "ExtendedDescription": "These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as \"/etc/passwd\". ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use PHP 4 or later",
        "Description": "Use PHP 4 or later. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile'])) ",
        "Description": "If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile'])) ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file",
        "Description": "For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1460",
        "Phase": null,
        "Title": "Forum does not properly verify whether a file was uploaded or if the associated variables were set by POST, allowing remote attackers to read arbitrary files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1460"
      },
      {
        "Id": "CVE-2002-1759",
        "Phase": null,
        "Title": "Product doesn't check if the variables for an upload were set by uploading the file, or other methods such as $_POST. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1759"
      },
      {
        "Id": "CVE-2002-1710",
        "Phase": null,
        "Title": "Product does not distinguish uploaded file from other files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1710"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-646",
    "Title": " Reliance on File Name or Extension of Externally-Supplied File",
    "Description": "The software allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion. ",
    "ExtendedDescription": "An application might use the file name or extension of of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a \".php.gif\" extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Make decisions on the server side based on file content and not on file name or extension",
        "Description": "Make decisions on the server side based on file content and not on file name or extension. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-209",
        "Phase": null,
        "Title": null,
        "Description": "XSS Using MIME Type Mismatch",
        "Url": "http://capec.mitre.org/data/definitions/209.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1293",
    "Title": " Missing Source Correlation of Multiple Independent Data",
    "Description": "The software relies on one source of data, preventing the ability to detect if an advisory has compromised a data source. ",
    "ExtendedDescription": "Software has to implicitly trust the integrity of an information source. When information is implicitly signed one can insure that the data was not tampered in transit. This does not ensure that the information source was not compromised when responding to a request. By requesting information from multiple sources, one can check if all of the data is the same. If they are not, the system should report the information sources that respond with a different or minority value as potentially compromised. If there are not enough answers to provide a majority or plurality of responses, the system should report all of the sources as potentially compromised. As the seriousness of the impact of incorrect integrity increases, so should the number of independent information sources that would need to be queried. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Design system to use a Practical Byzantine fault method, to request information from multiple sources to verify the data and report on potentially compromised information sources",
        "Description": "Design system to use a Practical Byzantine fault method, to request information from multiple sources to verify the data and report on potentially compromised information sources. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Failure to use a Practical Byzantine fault method when requesting data",
        "Description": "Failure to use a Practical Byzantine fault method when requesting data. Lack of place to report potentially compromised information sources. Relying on non-independent information sources for integrity checking. Failure to report information sources that respond in the minority to incident response procedures. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This flaw could be introduced during the design of the application or misconfiguration at run time by only specifying a single point of validation. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Such issues could be introduced during hardware implementation, then identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "This weakness could be introduced by intentionally failing all but one of the devices used to retrieve the data or by failing the devices that validate the data. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-639",
    "Title": " Authorization Bypass Through User-Controlled Key",
    "Description": "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data. ",
    "ExtendedDescription": "Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system. For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value. One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested",
        "Description": "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected",
        "Description": "Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering",
        "Description": "Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-566"
    ]
  },
  {
    "Id": "CWE-566",
    "Title": " Authorization Bypass Through User-Controlled SQL Primary Key",
    "Description": "The software uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor. ",
    "ExtendedDescription": "When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records. Database access control errors occur when: Data enters a program from an untrusted source. The data is used to specify the value of a primary key in a SQL query. The untrusted source does not have the permissions to be able to access all rows in the associated table. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an \"accept known good\" validation strategy. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use a parameterized query AND make sure that the accepted values conform to the business rules",
        "Description": "Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-284",
    "Title": " Improper Access Control",
    "Description": "The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor. ",
    "ExtendedDescription": "Access control involves the use of several protection mechanisms such as: Authentication (proving the identity of an actor) Authorization (ensuring that a given actor can access a resource), and Accountability (tracking of activities that were performed) When any mechanism is not applied or otherwise fails, attackers can compromise the security of the software by gaining privileges, reading sensitive information, executing commands, evading detection, etc. There are two distinct behaviors that can introduce access control weaknesses: Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator. Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-19",
        "Phase": null,
        "Title": null,
        "Description": "Embedding Scripts within Scripts",
        "Url": "http://capec.mitre.org/data/definitions/19.html"
      },
      {
        "Id": "CAPEC-441",
        "Phase": null,
        "Title": null,
        "Description": "Malicious Logic Insertion",
        "Url": "http://capec.mitre.org/data/definitions/441.html"
      },
      {
        "Id": "CAPEC-478",
        "Phase": null,
        "Title": null,
        "Description": "Modification of Windows Service Configuration",
        "Url": "http://capec.mitre.org/data/definitions/478.html"
      },
      {
        "Id": "CAPEC-479",
        "Phase": null,
        "Title": null,
        "Description": "Malicious Root Certificate",
        "Url": "http://capec.mitre.org/data/definitions/479.html"
      },
      {
        "Id": "CAPEC-502",
        "Phase": null,
        "Title": null,
        "Description": "Intent Spoof",
        "Url": "http://capec.mitre.org/data/definitions/502.html"
      },
      {
        "Id": "CAPEC-503",
        "Phase": null,
        "Title": null,
        "Description": "WebView Exposure",
        "Url": "http://capec.mitre.org/data/definitions/503.html"
      },
      {
        "Id": "CAPEC-536",
        "Phase": null,
        "Title": null,
        "Description": "Data Injected During Configuration",
        "Url": "http://capec.mitre.org/data/definitions/536.html"
      },
      {
        "Id": "CAPEC-546",
        "Phase": null,
        "Title": null,
        "Description": "Probe Application Memory",
        "Url": "http://capec.mitre.org/data/definitions/546.html"
      },
      {
        "Id": "CAPEC-550",
        "Phase": null,
        "Title": null,
        "Description": "Install New Service",
        "Url": "http://capec.mitre.org/data/definitions/550.html"
      },
      {
        "Id": "CAPEC-551",
        "Phase": null,
        "Title": null,
        "Description": "Modify Existing Service",
        "Url": "http://capec.mitre.org/data/definitions/551.html"
      },
      {
        "Id": "CAPEC-552",
        "Phase": null,
        "Title": null,
        "Description": "Install Rootkit ",
        "Url": "http://capec.mitre.org/data/definitions/552.html"
      },
      {
        "Id": "CAPEC-556",
        "Phase": null,
        "Title": null,
        "Description": "Replace File Extension Handlers",
        "Url": "http://capec.mitre.org/data/definitions/556.html"
      },
      {
        "Id": "CAPEC-558",
        "Phase": null,
        "Title": null,
        "Description": "Replace Trusted Executable",
        "Url": "http://capec.mitre.org/data/definitions/558.html"
      },
      {
        "Id": "CAPEC-562",
        "Phase": null,
        "Title": null,
        "Description": "Modify Shared File",
        "Url": "http://capec.mitre.org/data/definitions/562.html"
      },
      {
        "Id": "CAPEC-563",
        "Phase": null,
        "Title": null,
        "Description": "Add Malicious File to Shared Webroot",
        "Url": "http://capec.mitre.org/data/definitions/563.html"
      },
      {
        "Id": "CAPEC-564",
        "Phase": null,
        "Title": null,
        "Description": "Run Software at Logon",
        "Url": "http://capec.mitre.org/data/definitions/564.html"
      },
      {
        "Id": "CAPEC-578",
        "Phase": null,
        "Title": null,
        "Description": "Disable Security Software",
        "Url": "http://capec.mitre.org/data/definitions/578.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2010-4624",
        "Phase": null,
        "Title": "Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4624"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-269",
      "CWE-282",
      "CWE-285",
      "CWE-286",
      "CWE-287",
      "CWE-346",
      "CWE-923",
      "CWE-942",
      "CWE-1220",
      "CWE-1224",
      "CWE-1231",
      "CWE-1242",
      "CWE-1252",
      "CWE-1256",
      "CWE-1257",
      "CWE-1259",
      "CWE-1260",
      "CWE-1262",
      "CWE-1263",
      "CWE-1267",
      "CWE-1268",
      "CWE-1270",
      "CWE-1274",
      "CWE-1275",
      "CWE-1276",
      "CWE-1280",
      "CWE-1283",
      "CWE-1290",
      "CWE-1292",
      "CWE-1294",
      "CWE-1296",
      "CWE-1304"
    ]
  },
  {
    "Id": "CWE-269",
    "Title": " Improper Privilege Management",
    "Description": "The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor. ",
    "ExtendedDescription": null,
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nFollow the principle of least privilege when assigning access rights to entities in a software system",
        "Description": "Strategy:  Separation of Privilege\r\nFollow the principle of least privilege when assigning access rights to entities in a software system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nConsider following the principle of separation of privilege",
        "Description": "Strategy:  Separation of Privilege\r\nConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-122",
        "Phase": null,
        "Title": null,
        "Description": "Privilege Abuse",
        "Url": "http://capec.mitre.org/data/definitions/122.html"
      },
      {
        "Id": "CAPEC-233",
        "Phase": null,
        "Title": null,
        "Description": "Privilege Escalation",
        "Url": "http://capec.mitre.org/data/definitions/233.html"
      },
      {
        "Id": "CAPEC-58",
        "Phase": null,
        "Title": null,
        "Description": "Restful Privilege Elevation",
        "Url": "http://capec.mitre.org/data/definitions/58.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2001-1555",
        "Phase": null,
        "Title": "Terminal privileges are not reset when a user logs out. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1555"
      },
      {
        "Id": "CVE-2001-1514",
        "Phase": null,
        "Title": "Does not properly pass security context to child processes in certain cases, allows privilege escalation. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1514"
      },
      {
        "Id": "CVE-2001-0128",
        "Phase": null,
        "Title": "Does not properly compute roles. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0128"
      },
      {
        "Id": "CVE-1999-1193",
        "Phase": null,
        "Title": "untrusted user placed in unix \"wheel\" group ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1193"
      },
      {
        "Id": "CVE-2005-2741",
        "Phase": null,
        "Title": "Product allows users to grant themselves certain rights that can be used to escalate privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2741"
      },
      {
        "Id": "CVE-2005-2496",
        "Phase": null,
        "Title": "Product uses group ID of a user instead of the group, causing it to run with different privileges. This is resultant from some other unknown issue. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2496"
      },
      {
        "Id": "CVE-2004-0274",
        "Phase": null,
        "Title": "Product mistakenly assigns a particular status to an entity, leading to increased privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0274"
      },
      {
        "Id": "CVE-2007-4217",
        "Phase": null,
        "Title": "FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4217"
      },
      {
        "Id": "CVE-2007-5159",
        "Phase": null,
        "Title": "OS incorrectly installs a program with setuid privileges, allowing users to gain privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5159"
      },
      {
        "Id": "CVE-2008-4638",
        "Phase": null,
        "Title": "Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4638"
      },
      {
        "Id": "CVE-2007-3931",
        "Phase": null,
        "Title": "Installation script installs some programs as setuid when they shouldn't be. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3931"
      },
      {
        "Id": "CVE-2002-1981",
        "Phase": null,
        "Title": "Roles have access to dangerous procedures (Accessible entities). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1981"
      },
      {
        "Id": "CVE-2002-1671",
        "Phase": null,
        "Title": "Untrusted object/method gets access to clipboard (Accessible entities). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1671"
      },
      {
        "Id": "CVE-2000-0315",
        "Phase": null,
        "Title": "Traceroute program allows unprivileged users to modify source address of packet (Accessible entities). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0315"
      },
      {
        "Id": "CVE-2000-0506",
        "Phase": null,
        "Title": "User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0506"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-250",
      "CWE-266",
      "CWE-267",
      "CWE-268",
      "CWE-270",
      "CWE-271",
      "CWE-274",
      "CWE-648"
    ]
  },
  {
    "Id": "CWE-250",
    "Title": " Execution with Unnecessary Privileges",
    "Description": "The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses. ",
    "ExtendedDescription": "New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]",
        "Description": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nIdentify the functionality that requires additional privileges, such as access to privileged operating system resources",
        "Description": "Strategy:  Separation of Privilege\r\nIdentify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Attack Surface Reduction\r\nIdentify the functionality that requires additional privileges, such as access to privileged operating system resources",
        "Description": "Strategy:  Attack Surface Reduction\r\nIdentify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements",
        "Description": "Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273",
        "Description": "When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If circumstances force you to run with extra privileges, then determine the minimum access level necessary",
        "Description": "If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Operation; System Configuration",
        "Title": "Strategy:  Environment Hardening\r\nEnsure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software",
        "Description": "Strategy:  Environment Hardening\r\nEnsure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-104",
        "Phase": null,
        "Title": null,
        "Description": "Cross Zone Scripting",
        "Url": "http://capec.mitre.org/data/definitions/104.html"
      },
      {
        "Id": "CAPEC-470",
        "Phase": null,
        "Title": null,
        "Description": "Expanding Control over the Operating System from the Database",
        "Url": "http://capec.mitre.org/data/definitions/470.html"
      },
      {
        "Id": "CAPEC-69",
        "Phase": null,
        "Title": null,
        "Description": "Target Programs with Elevated Privileges",
        "Url": "http://capec.mitre.org/data/definitions/69.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2007-4217",
        "Phase": null,
        "Title": "FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4217"
      },
      {
        "Id": "CVE-2008-1877",
        "Phase": null,
        "Title": "Program runs with privileges and calls another program with the same privileges, which allows read of arbitrary files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1877"
      },
      {
        "Id": "CVE-2007-5159",
        "Phase": null,
        "Title": "OS incorrectly installs a program with setuid privileges, allowing users to gain privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5159"
      },
      {
        "Id": "CVE-2008-4638",
        "Phase": null,
        "Title": "Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4638"
      },
      {
        "Id": "CVE-2008-0162",
        "Phase": null,
        "Title": "Program does not drop privileges before calling another program, allowing code execution. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0162"
      },
      {
        "Id": "CVE-2008-0368",
        "Phase": null,
        "Title": "setuid root program allows creation of arbitrary files through command line argument. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0368"
      },
      {
        "Id": "CVE-2007-3931",
        "Phase": null,
        "Title": "Installation script installs some programs as setuid when they shouldn't be. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3931"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Installation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "If an application has this design problem, then it can be easier for the developer to make implementation-related errors such as CWE-271 (Privilege Dropping / Lowering Errors). In addition, the consequences of Privilege Chaining (CWE-268) can become more severe. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-266",
    "Title": " Incorrect Privilege Assignment",
    "Description": "A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]",
        "Description": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-1999-1193",
        "Phase": null,
        "Title": "untrusted user placed in unix \"wheel\" group ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1193"
      },
      {
        "Id": "CVE-2005-2741",
        "Phase": null,
        "Title": "Product allows users to grant themselves certain rights that can be used to escalate privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2741"
      },
      {
        "Id": "CVE-2005-2496",
        "Phase": null,
        "Title": "Product uses group ID of a user instead of the group, causing it to run with different privileges. This is resultant from some other unknown issue. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2496"
      },
      {
        "Id": "CVE-2004-0274",
        "Phase": null,
        "Title": "Product mistakenly assigns a particular status to an entity, leading to increased privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0274"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-9",
      "CWE-520",
      "CWE-556",
      "CWE-1022"
    ]
  },
  {
    "Id": "CWE-9",
    "Title": " J2EE Misconfiguration",
    "Description": "If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the software system. ",
    "ExtendedDescription": "If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; System Configuration",
        "Title": "Follow the principle of least privilege when assigning access rights to EJB methods",
        "Description": "Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-520",
    "Title": " .NET Misconfiguration",
    "Description": "Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks. ",
    "ExtendedDescription": ".NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server (Microsoft Internet Information Service IIS), which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Run the application with limited privilege to the underlying operating and file system",
        "Description": "Run the application with limited privilege to the underlying operating and file system. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-556",
    "Title": " ASP.NET Misconfiguration",
    "Description": "Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges. ",
    "ExtendedDescription": "The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use the least privilege principle",
        "Description": "Use the least privilege principle. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1022",
    "Title": " Use of Web Link to Untrusted Target with window.opener Access",
    "Description": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property. ",
    "ExtendedDescription": "When a user clicks a link to an external site (\"target\"), the target=\"_blank\" attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link. If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin. An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Specify in the design that any linked external document must not be granted access to the location object of the calling page",
        "Description": "Specify in the design that any linked external document must not be granted access to the location object of the calling page. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When creating a link to an external document using the &lt;a&gt; tag with a defined target, for example \"_blank\" or a named frame, provide the rel attribute with a value \"noopener noreferrer\"",
        "Description": "When creating a link to an external document using the &lt;a&gt; tag with a defined target, for example \"_blank\" or a named frame, provide the rel attribute with a value \"noopener noreferrer\". \r\nIf opening the external document in a new window via javascript, then reset the opener by setting it equal to null. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Do not use \"_blank\" targets",
        "Description": "Do not use \"_blank\" targets. However, this can affect the usability of your application. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This weakness is introduced during the design of an application when the architect does not specify that a linked external document should not be able to alter the location of the calling page. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "This weakness is introduced during the coding of an application when the developer does not include the noopener and/or noreferrer value for the rel attribute. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-267",
    "Title": " Privilege Defined With Unsafe Actions",
    "Description": "A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]",
        "Description": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-58",
        "Phase": null,
        "Title": null,
        "Description": "Restful Privilege Elevation",
        "Url": "http://capec.mitre.org/data/definitions/58.html"
      },
      {
        "Id": "CAPEC-634",
        "Phase": null,
        "Title": null,
        "Description": "Probe Audio and Video Peripherals",
        "Url": "http://capec.mitre.org/data/definitions/634.html"
      },
      {
        "Id": "CAPEC-637",
        "Phase": null,
        "Title": null,
        "Description": "Collect Data from Clipboard",
        "Url": "http://capec.mitre.org/data/definitions/637.html"
      },
      {
        "Id": "CAPEC-643",
        "Phase": null,
        "Title": null,
        "Description": "Identify Shared Files/Directories on System",
        "Url": "http://capec.mitre.org/data/definitions/643.html"
      },
      {
        "Id": "CAPEC-648",
        "Phase": null,
        "Title": null,
        "Description": "Collect Data from Screen Capture",
        "Url": "http://capec.mitre.org/data/definitions/648.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1981",
        "Phase": null,
        "Title": "Roles have access to dangerous procedures (Accessible entities). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1981"
      },
      {
        "Id": "CVE-2002-1671",
        "Phase": null,
        "Title": "Untrusted object/method gets access to clipboard (Accessible entities). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1671"
      },
      {
        "Id": "CVE-2004-2204",
        "Phase": null,
        "Title": "Gain privileges using functions/tags that should be restricted (Accessible entities). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2204"
      },
      {
        "Id": "CVE-2000-0315",
        "Phase": null,
        "Title": "Traceroute program allows unprivileged users to modify source address of packet (Accessible entities). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0315"
      },
      {
        "Id": "CVE-2004-0380",
        "Phase": null,
        "Title": "Bypass domain restrictions using a particular file that references unsafe URI schemes (Accessible entities). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0380"
      },
      {
        "Id": "CVE-2002-1154",
        "Phase": null,
        "Title": "Script does not restrict access to an update command, leading to resultant disk consumption and filled error logs (Accessible entities). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1154"
      },
      {
        "Id": "CVE-2002-1145",
        "Phase": null,
        "Title": "\"public\" database user can use stored procedure to modify data controlled by the database owner (Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1145"
      },
      {
        "Id": "CVE-2000-0506",
        "Phase": null,
        "Title": "User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0506"
      },
      {
        "Id": "CVE-2002-2042",
        "Phase": null,
        "Title": "Allows attachment to and modification of privileged processes (Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2042"
      },
      {
        "Id": "CVE-2000-1212",
        "Phase": null,
        "Title": "User with privilege can edit raw underlying object using unprotected method (Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1212"
      },
      {
        "Id": "CVE-2005-1742",
        "Phase": null,
        "Title": "Inappropriate actions allowed by a particular role(Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1742"
      },
      {
        "Id": "CVE-2001-1480",
        "Phase": null,
        "Title": "Untrusted entity allowed to access the system clipboard (Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1480"
      },
      {
        "Id": "CVE-2001-1551",
        "Phase": null,
        "Title": "Extra Linux capability allows bypass of system-specified restriction (Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1551"
      },
      {
        "Id": "CVE-2001-1166",
        "Phase": null,
        "Title": "User with debugging rights can read entire process (Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1166"
      },
      {
        "Id": "CVE-2005-1816",
        "Phase": null,
        "Title": "Non-root admins can add themselves or others to the root admin group (Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1816"
      },
      {
        "Id": "CVE-2005-2173",
        "Phase": null,
        "Title": "Users can change certain properties of objects to perform otherwise unauthorized actions (Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2173"
      },
      {
        "Id": "CVE-2005-2027",
        "Phase": null,
        "Title": "Certain debugging commands not restricted to just the administrator, allowing registry modification and infoleak (Unsafe privileged actions). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2027"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-623"
    ]
  },
  {
    "Id": "CWE-623",
    "Title": " Unsafe ActiveX Control Marked Safe For Scripting",
    "Description": "An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting. ",
    "ExtendedDescription": "This might allow attackers to use dangerous functionality via a web page that accesses the control, which can lead to different resultant vulnerabilities, depending on the control's behavior. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "During development, do not mark it as safe for scripting",
        "Description": "During development, do not mark it as safe for scripting. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "After distribution, you can set the kill bit for the control so that it is not accessible from Internet Explorer",
        "Description": "After distribution, you can set the kill bit for the control so that it is not accessible from Internet Explorer. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2007-0617",
        "Phase": null,
        "Title": "control allows attackers to add malicious email addresses to bypass spam limits ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0617"
      },
      {
        "Id": "CVE-2007-0219",
        "Phase": null,
        "Title": "web browser uses certain COM objects as ActiveX ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0219"
      },
      {
        "Id": "CVE-2006-6510",
        "Phase": null,
        "Title": "kiosk allows bypass to read files ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6510"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-268",
    "Title": " Privilege Chaining",
    "Description": "Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination. ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nConsider following the principle of separation of privilege",
        "Description": "Strategy:  Separation of Privilege\r\nConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]",
        "Description": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-1736",
        "Phase": null,
        "Title": "Chaining of user rights. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1736"
      },
      {
        "Id": "CVE-2002-1772",
        "Phase": null,
        "Title": "Gain certain rights via privilege chaining in alternate channel. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1772"
      },
      {
        "Id": "CVE-2005-1973",
        "Phase": null,
        "Title": "Application is allowed to assign extra permissions to itself. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1973"
      },
      {
        "Id": "CVE-2003-0640",
        "Phase": null,
        "Title": "\"operator\" user can overwrite usernames and passwords to gain admin privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0640"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-270",
    "Title": " Privilege Context Switching Error",
    "Description": "The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]",
        "Description": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nConsider following the principle of separation of privilege",
        "Description": "Strategy:  Separation of Privilege\r\nConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-17",
        "Phase": null,
        "Title": null,
        "Description": "Using Malicious Files",
        "Url": "http://capec.mitre.org/data/definitions/17.html"
      },
      {
        "Id": "CAPEC-236",
        "Phase": null,
        "Title": null,
        "Description": "Catching exception throw/signal from privileged block",
        "Url": "http://capec.mitre.org/data/definitions/236.html"
      },
      {
        "Id": "CAPEC-30",
        "Phase": null,
        "Title": null,
        "Description": "Hijacking a Privileged Thread of Execution",
        "Url": "http://capec.mitre.org/data/definitions/30.html"
      },
      {
        "Id": "CAPEC-35",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Executable Code in Non-Executable Files",
        "Url": "http://capec.mitre.org/data/definitions/35.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1688",
        "Phase": null,
        "Title": "Web browser cross domain problem when user hits \"back\" button. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1688"
      },
      {
        "Id": "CVE-2003-1026",
        "Phase": null,
        "Title": "Web browser cross domain problem when user hits \"back\" button. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1026"
      },
      {
        "Id": "CVE-2002-1770",
        "Phase": null,
        "Title": "Cross-domain issue - third party product passes code to web browser, which executes it in unsafe zone. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1770"
      },
      {
        "Id": "CVE-2005-2263",
        "Phase": null,
        "Title": "Run callback in different security context after it has been changed from untrusted to trusted. * note that \"context switch before actions are completed\" is one type of problem that happens frequently, espec. in browsers. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2263"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-271",
    "Title": " Privilege Dropping / Lowering Errors",
    "Description": "The software does not drop privileges before passing control of a resource to an actor that does not have those privileges. ",
    "ExtendedDescription": "In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nConsider following the principle of separation of privilege",
        "Description": "Strategy:  Separation of Privilege\r\nConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2000-1213",
        "Phase": null,
        "Title": "Program does not drop privileges after acquiring the raw socket. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1213"
      },
      {
        "Id": "CVE-2001-0559",
        "Phase": null,
        "Title": "Setuid program does not drop privileges after a parsing error occurs, then calls another program to handle the error. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0559"
      },
      {
        "Id": "CVE-2001-0787",
        "Phase": null,
        "Title": "Does not drop privileges in related groups when lowering privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0787"
      },
      {
        "Id": "CVE-2002-0080",
        "Phase": null,
        "Title": "Does not drop privileges in related groups when lowering privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0080"
      },
      {
        "Id": "CVE-2001-1029",
        "Phase": null,
        "Title": "Does not drop privileges before determining access to certain files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1029"
      },
      {
        "Id": "CVE-1999-0813",
        "Phase": null,
        "Title": "Finger daemon does not drop privileges when executing programs on behalf of the user being fingered. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0813"
      },
      {
        "Id": "CVE-1999-1326",
        "Phase": null,
        "Title": "FTP server does not drop privileges if a connection is aborted during file transfer. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1326"
      },
      {
        "Id": "CVE-2000-0172",
        "Phase": null,
        "Title": "Program only uses seteuid to drop privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0172"
      },
      {
        "Id": "CVE-2004-2504",
        "Phase": null,
        "Title": "Windows program running as SYSTEM does not drop privileges before executing other programs (many others like this, especially involving the Help facility). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2504"
      },
      {
        "Id": "CVE-2004-0213",
        "Phase": null,
        "Title": "Utility Manager launches winhlp32.exe while running with raised privileges, which allows local users to gain system privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0213"
      },
      {
        "Id": "CVE-2004-0806",
        "Phase": null,
        "Title": "Setuid program does not drop privileges before executing program specified in an environment variable. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0806"
      },
      {
        "Id": "CVE-2004-0828",
        "Phase": null,
        "Title": "Setuid program does not drop privileges before processing file specified on command line. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0828"
      },
      {
        "Id": "CVE-2004-2070",
        "Phase": null,
        "Title": "Service on Windows does not drop privileges before using \"view file\" option, allowing code execution. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2070"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-272",
      "CWE-273"
    ]
  },
  {
    "Id": "CWE-272",
    "Title": " Least Privilege Violation",
    "Description": "The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nFollow the principle of least privilege when assigning access rights to entities in a software system",
        "Description": "Strategy:  Separation of Privilege\r\nFollow the principle of least privilege when assigning access rights to entities in a software system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-17",
        "Phase": null,
        "Title": null,
        "Description": "Using Malicious Files",
        "Url": "http://capec.mitre.org/data/definitions/17.html"
      },
      {
        "Id": "CAPEC-35",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Executable Code in Non-Executable Files",
        "Url": "http://capec.mitre.org/data/definitions/35.html"
      },
      {
        "Id": "CAPEC-76",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Web Input to File System Calls",
        "Url": "http://capec.mitre.org/data/definitions/76.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-273",
    "Title": " Improper Check for Dropped Privileges",
    "Description": "The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded. ",
    "ExtendedDescription": "If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Check the results of all functions that return a value and verify that the value is expected",
        "Description": "Check the results of all functions that return a value and verify that the value is expected. \r\nEffectiveness: High\r\nNote: Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003)",
        "Description": "In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2006-4447",
        "Phase": null,
        "Title": "Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4447"
      },
      {
        "Id": "CVE-2006-2916",
        "Phase": null,
        "Title": "Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2916"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. This issue is likely to occur in restrictive environments in which the operating system or application provides fine-grained control over privilege management. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-274",
    "Title": " Improper Handling of Insufficient Privileges",
    "Description": "The software does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2001-1564",
        "Phase": null,
        "Title": "System limits are not properly enforced after privileges are dropped. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1564"
      },
      {
        "Id": "CVE-2005-3286",
        "Phase": null,
        "Title": "Firewall crashes when it can't read a critical memory block that was protected by a malicious process. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3286"
      },
      {
        "Id": "CVE-2005-1641",
        "Phase": null,
        "Title": "Does not give admin sufficient privileges to overcome otherwise legitimate user actions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1641"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-648",
    "Title": " Incorrect Use of Privileged APIs",
    "Description": "The application does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly. ",
    "ExtendedDescription": "When an application contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to: ensure that assumptions made by the APIs are valid, such as validity of arguments account for known weaknesses in the design/implementation of the API call the API from a safe context If the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data. For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call",
        "Description": "Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely",
        "Description": "Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call",
        "Description": "If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs",
        "Description": "If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Only call privileged APIs from safe, consistent and expected state",
        "Description": "Only call privileged APIs from safe, consistent and expected state. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i",
        "Description": "Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-107",
        "Phase": null,
        "Title": null,
        "Description": "Cross Site Tracing",
        "Url": "http://capec.mitre.org/data/definitions/107.html"
      },
      {
        "Id": "CAPEC-234",
        "Phase": null,
        "Title": null,
        "Description": "Hijacking a privileged process",
        "Url": "http://capec.mitre.org/data/definitions/234.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2003-0645",
        "Phase": null,
        "Title": "A Unix utility that displays online help files, if installed setuid, could allow a local attacker to gain privileges when a particular file-opening function is called. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0645"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-282",
    "Title": " Improper Ownership Management",
    "Description": "The software assigns the wrong ownership, or does not properly verify the ownership, of an object or resource. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-17",
        "Phase": null,
        "Title": null,
        "Description": "Using Malicious Files",
        "Url": "http://capec.mitre.org/data/definitions/17.html"
      },
      {
        "Id": "CAPEC-35",
        "Phase": null,
        "Title": null,
        "Description": "Leverage Executable Code in Non-Executable Files",
        "Url": "http://capec.mitre.org/data/definitions/35.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-1999-1125",
        "Phase": null,
        "Title": "Program runs setuid root but relies on a configuration file owned by a non-root user. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1125"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-283",
      "CWE-708"
    ]
  },
  {
    "Id": "CWE-283",
    "Title": " Unverified Ownership",
    "Description": "The software does not properly verify that a critical resource is owned by the proper entity. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Very carefully manage the setting, management, and handling of privileges",
        "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nConsider following the principle of separation of privilege",
        "Description": "Strategy:  Separation of Privilege\r\nConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2001-0178",
        "Phase": null,
        "Title": "Program does not verify the owner of a UNIX socket that is used for sending a password. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0178"
      },
      {
        "Id": "CVE-2004-2012",
        "Phase": null,
        "Title": "Owner of special device not checked, allowing root. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2012"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-708",
    "Title": " Incorrect Ownership Assignment",
    "Description": "The software assigns an owner to a resource, but the owner is outside of the intended control sphere. ",
    "ExtendedDescription": "This may allow the resource to be manipulated by actors outside of the intended control sphere. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Policy",
        "Title": "Periodically review the privileges and their owners",
        "Description": "Periodically review the privileges and their owners. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use automated tools to check for privilege settings",
        "Description": "Use automated tools to check for privilege settings. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2007-5101",
        "Phase": null,
        "Title": "File system sets wrong ownership and group when creating a new file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5101"
      },
      {
        "Id": "CVE-2007-4238",
        "Phase": null,
        "Title": "OS installs program with bin owner/group, allowing modification. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4238"
      },
      {
        "Id": "CVE-2007-1716",
        "Phase": null,
        "Title": "Manager does not properly restore ownership of a reusable resource when a user logs out, allowing privilege escalation. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1716"
      },
      {
        "Id": "CVE-2005-3148",
        "Phase": null,
        "Title": "Backup software restores symbolic links with incorrect uid/gid. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3148"
      },
      {
        "Id": "CVE-2005-1064",
        "Phase": null,
        "Title": "Product changes the ownership of files that a symlink points to, instead of the symlink itself. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1064"
      },
      {
        "Id": "CVE-2011-1551",
        "Phase": null,
        "Title": "Component assigns ownership of sensitive directory tree to a user account, which can be leveraged to perform privileged operations. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1551"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-285",
    "Title": " Improper Authorization",
    "Description": "The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action. ",
    "ExtendedDescription": "Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Divide the software into anonymous, normal, privileged, and administrative areas",
        "Description": "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries. \r\nNote that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that you perform access control checks related to your business logic",
        "Description": "Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45]. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page",
        "Description": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. \r\nOne way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  System Configuration; Installation",
        "Title": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly",
        "Description": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      },
      {
        "Id": "CAPEC-104",
        "Phase": null,
        "Title": null,
        "Description": "Cross Zone Scripting",
        "Url": "http://capec.mitre.org/data/definitions/104.html"
      },
      {
        "Id": "CAPEC-127",
        "Phase": null,
        "Title": null,
        "Description": "Directory Indexing",
        "Url": "http://capec.mitre.org/data/definitions/127.html"
      },
      {
        "Id": "CAPEC-13",
        "Phase": null,
        "Title": null,
        "Description": "Subverting Environment Variable Values",
        "Url": "http://capec.mitre.org/data/definitions/13.html"
      },
      {
        "Id": "CAPEC-17",
        "Phase": null,
        "Title": null,
        "Description": "Using Malicious Files",
        "Url": "http://capec.mitre.org/data/definitions/17.html"
      },
      {
        "Id": "CAPEC-39",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Opaque Client-based Data Tokens",
        "Url": "http://capec.mitre.org/data/definitions/39.html"
      },
      {
        "Id": "CAPEC-402",
        "Phase": null,
        "Title": null,
        "Description": "Bypassing ATA Password Security",
        "Url": "http://capec.mitre.org/data/definitions/402.html"
      },
      {
        "Id": "CAPEC-45",
        "Phase": null,
        "Title": null,
        "Description": "Buffer Overflow via Symbolic Links",
        "Url": "http://capec.mitre.org/data/definitions/45.html"
      },
      {
        "Id": "CAPEC-5",
        "Phase": null,
        "Title": null,
        "Description": "Blue Boxing",
        "Url": "http://capec.mitre.org/data/definitions/5.html"
      },
      {
        "Id": "CAPEC-51",
        "Phase": null,
        "Title": null,
        "Description": "Poison Web Service Registry",
        "Url": "http://capec.mitre.org/data/definitions/51.html"
      },
      {
        "Id": "CAPEC-59",
        "Phase": null,
        "Title": null,
        "Description": "Session Credential Falsification through Prediction",
        "Url": "http://capec.mitre.org/data/definitions/59.html"
      },
      {
        "Id": "CAPEC-60",
        "Phase": null,
        "Title": null,
        "Description": "Reusing Session IDs (aka Session Replay)",
        "Url": "http://capec.mitre.org/data/definitions/60.html"
      },
      {
        "Id": "CAPEC-647",
        "Phase": null,
        "Title": null,
        "Description": "Collect Data from Registries",
        "Url": "http://capec.mitre.org/data/definitions/647.html"
      },
      {
        "Id": "CAPEC-76",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Web Input to File System Calls",
        "Url": "http://capec.mitre.org/data/definitions/76.html"
      },
      {
        "Id": "CAPEC-77",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating User-Controlled Variables",
        "Url": "http://capec.mitre.org/data/definitions/77.html"
      },
      {
        "Id": "CAPEC-87",
        "Phase": null,
        "Title": null,
        "Description": "Forceful Browsing",
        "Url": "http://capec.mitre.org/data/definitions/87.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-3168",
        "Phase": null,
        "Title": "Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3168"
      },
      {
        "Id": "CVE-2009-2960",
        "Phase": null,
        "Title": "Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2960"
      },
      {
        "Id": "CVE-2009-3597",
        "Phase": null,
        "Title": "Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3597"
      },
      {
        "Id": "CVE-2009-2282",
        "Phase": null,
        "Title": "Terminal server does not check authorization for guest access. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2282"
      },
      {
        "Id": "CVE-2009-3230",
        "Phase": null,
        "Title": "Database server does not use appropriate privileges for certain sensitive operations. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3230"
      },
      {
        "Id": "CVE-2009-2213",
        "Phase": null,
        "Title": "Gateway uses default \"Allow\" configuration for its authorization settings. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2213"
      },
      {
        "Id": "CVE-2009-0034",
        "Phase": null,
        "Title": "Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0034"
      },
      {
        "Id": "CVE-2008-6123",
        "Phase": null,
        "Title": "Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6123"
      },
      {
        "Id": "CVE-2008-5027",
        "Phase": null,
        "Title": "System monitoring software allows users to bypass authorization by creating custom forms. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5027"
      },
      {
        "Id": "CVE-2008-7109",
        "Phase": null,
        "Title": "Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-7109"
      },
      {
        "Id": "CVE-2008-3424",
        "Phase": null,
        "Title": "Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3424"
      },
      {
        "Id": "CVE-2009-3781",
        "Phase": null,
        "Title": "Content management system does not check access permissions for private files, allowing others to view those files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3781"
      },
      {
        "Id": "CVE-2008-4577",
        "Phase": null,
        "Title": "ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4577"
      },
      {
        "Id": "CVE-2008-6548",
        "Phase": null,
        "Title": "Product does not check the ACL of a page accessed using an \"include\" directive, allowing attackers to read unauthorized files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6548"
      },
      {
        "Id": "CVE-2007-2925",
        "Phase": null,
        "Title": "Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2925"
      },
      {
        "Id": "CVE-2006-6679",
        "Phase": null,
        "Title": "Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6679"
      },
      {
        "Id": "CVE-2005-3623",
        "Phase": null,
        "Title": "OS kernel does not check for a certain privilege before setting ACLs for files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3623"
      },
      {
        "Id": "CVE-2005-2801",
        "Phase": null,
        "Title": "Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2801"
      },
      {
        "Id": "CVE-2001-1155",
        "Phase": null,
        "Title": "Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1155"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Authorization weaknesses may arise when a single-user application is ported to a multi-user environment. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-552",
      "CWE-732",
      "CWE-862",
      "CWE-863",
      "CWE-926",
      "CWE-927",
      "CWE-1230",
      "CWE-1244",
      "CWE-1297"
    ]
  },
  {
    "Id": "CWE-862",
    "Title": " Missing Authorization",
    "Description": "The software does not perform an authorization check when an actor attempts to access a resource or perform an action. ",
    "ExtendedDescription": "Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Divide the software into anonymous, normal, privileged, and administrative areas",
        "Description": "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries. \r\nNote that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that access control checks are performed related to the business logic",
        "Description": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7]. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45]. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page",
        "Description": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. \r\nOne way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  System Configuration; Installation",
        "Title": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly",
        "Description": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2009-3168",
        "Phase": null,
        "Title": "Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3168"
      },
      {
        "Id": "CVE-2009-3597",
        "Phase": null,
        "Title": "Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3597"
      },
      {
        "Id": "CVE-2009-2282",
        "Phase": null,
        "Title": "Terminal server does not check authorization for guest access. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2282"
      },
      {
        "Id": "CVE-2008-5027",
        "Phase": null,
        "Title": "System monitoring software allows users to bypass authorization by creating custom forms. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5027"
      },
      {
        "Id": "CVE-2009-3781",
        "Phase": null,
        "Title": "Content management system does not check access permissions for private files, allowing others to view those files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3781"
      },
      {
        "Id": "CVE-2008-6548",
        "Phase": null,
        "Title": "Product does not check the ACL of a page accessed using an \"include\" directive, allowing attackers to read unauthorized files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6548"
      },
      {
        "Id": "CVE-2009-2960",
        "Phase": null,
        "Title": "Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2960"
      },
      {
        "Id": "CVE-2009-3230",
        "Phase": null,
        "Title": "Database server does not use appropriate privileges for certain sensitive operations. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3230"
      },
      {
        "Id": "CVE-2009-2213",
        "Phase": null,
        "Title": "Gateway uses default \"Allow\" configuration for its authorization settings. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2213"
      },
      {
        "Id": "CVE-2009-0034",
        "Phase": null,
        "Title": "Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0034"
      },
      {
        "Id": "CVE-2008-6123",
        "Phase": null,
        "Title": "Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6123"
      },
      {
        "Id": "CVE-2008-7109",
        "Phase": null,
        "Title": "Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-7109"
      },
      {
        "Id": "CVE-2008-3424",
        "Phase": null,
        "Title": "Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3424"
      },
      {
        "Id": "CVE-2008-4577",
        "Phase": null,
        "Title": "ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4577"
      },
      {
        "Id": "CVE-2007-2925",
        "Phase": null,
        "Title": "Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2925"
      },
      {
        "Id": "CVE-2006-6679",
        "Phase": null,
        "Title": "Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6679"
      },
      {
        "Id": "CVE-2005-3623",
        "Phase": null,
        "Title": "OS kernel does not check for a certain privilege before setting ACLs for files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3623"
      },
      {
        "Id": "CVE-2005-2801",
        "Phase": null,
        "Title": "Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2801"
      },
      {
        "Id": "CVE-2001-1155",
        "Phase": null,
        "Title": "Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1155"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. Authorization weaknesses may arise when a single-user application is ported to a multi-user environment. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-425",
      "CWE-638",
      "CWE-939"
    ]
  },
  {
    "Id": "CWE-638",
    "Title": " Not Using Complete Mediation",
    "Description": "The software does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change",
        "Description": "Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Identify all possible code paths that might access sensitive resources",
        "Description": "Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-104",
        "Phase": null,
        "Title": null,
        "Description": "Cross Zone Scripting",
        "Url": "http://capec.mitre.org/data/definitions/104.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2007-0408",
        "Phase": null,
        "Title": "Server does not properly validate client certificates when reusing cached connections. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0408"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-424"
    ]
  },
  {
    "Id": "CWE-424",
    "Title": " Improper Protection of Alternate Path",
    "Description": "The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Deploy different layers of protection to implement security in depth",
        "Description": "Deploy different layers of protection to implement security in depth. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-127",
        "Phase": null,
        "Title": null,
        "Description": "Directory Indexing",
        "Url": "http://capec.mitre.org/data/definitions/127.html"
      },
      {
        "Id": "CAPEC-554",
        "Phase": null,
        "Title": null,
        "Description": "Functionality Bypass",
        "Url": "http://capec.mitre.org/data/definitions/554.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-425"
    ]
  },
  {
    "Id": "CWE-939",
    "Title": " Improper Authorization in Handler for Custom URL Scheme",
    "Description": "The software uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme. ",
    "ExtendedDescription": "Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information",
        "Description": "Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information. \r\nWhen designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2013-5725",
        "Phase": null,
        "Title": "URL scheme has action replace which requires no user prompt and allows remote attackers to perform undesired actions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5725"
      },
      {
        "Id": "CVE-2013-5726",
        "Phase": null,
        "Title": "URL scheme has action follow and favorite which allows remote attackers to force user to perform undesired actions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5726"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-863",
    "Title": " Incorrect Authorization",
    "Description": "The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions. ",
    "ExtendedDescription": "Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Divide the software into anonymous, normal, privileged, and administrative areas",
        "Description": "Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries. \r\nNote that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that access control checks are performed related to the business logic",
        "Description": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7]. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45]. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page",
        "Description": "For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page. \r\nOne way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  System Configuration; Installation",
        "Title": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly",
        "Description": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2009-2213",
        "Phase": null,
        "Title": "Gateway uses default \"Allow\" configuration for its authorization settings. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2213"
      },
      {
        "Id": "CVE-2009-0034",
        "Phase": null,
        "Title": "Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0034"
      },
      {
        "Id": "CVE-2008-6123",
        "Phase": null,
        "Title": "Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6123"
      },
      {
        "Id": "CVE-2008-7109",
        "Phase": null,
        "Title": "Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-7109"
      },
      {
        "Id": "CVE-2008-3424",
        "Phase": null,
        "Title": "Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3424"
      },
      {
        "Id": "CVE-2008-4577",
        "Phase": null,
        "Title": "ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4577"
      },
      {
        "Id": "CVE-2006-6679",
        "Phase": null,
        "Title": "Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6679"
      },
      {
        "Id": "CVE-2005-2801",
        "Phase": null,
        "Title": "Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2801"
      },
      {
        "Id": "CVE-2001-1155",
        "Phase": null,
        "Title": "Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1155"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Authorization weaknesses may arise when a single-user application is ported to a multi-user environment. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-551",
      "CWE-639",
      "CWE-647",
      "CWE-804",
      "CWE-1191"
    ]
  },
  {
    "Id": "CWE-551",
    "Title": " Incorrect Behavior Order",
    "Description": "If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection. ",
    "ExtendedDescription": "For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization",
        "Description": "URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-647",
    "Title": " Use of Non-Canonical URL Paths for Authorization Decisions",
    "Description": "The software defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization. ",
    "ExtendedDescription": "If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as: http://WWW.EXAMPLE.COM/mypage http://www.example.com/%6Dypage (alternate encoding) http://192.168.1.1/mypage (IP address) http://www.example.com/mypage/ (trailing /) http://www.example.com:80/mypage Therefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule). ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Make access control policy based on path information in canonical form",
        "Description": "Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Reject all alternate path encodings that are not in the expected canonical form",
        "Description": "Reject all alternate path encodings that are not in the expected canonical form. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1191",
    "Title": " Exposed Chip Debug and Test Interface With Insufficient or Missing Authorization",
    "Description": "The chip does not implement or does not correctly check whether users are authorized to access internal registers. ",
    "ExtendedDescription": "A device's internal information may be accessed through a scan chain of interconnected internal registers usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present. If this control is not implemented or not implemented properly a user may be able to bypass on-chip protection mechanisms through debug interface. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nPassword checking logic should be resistant to timing attacks",
        "Description": "Strategy:  Separation of Privilege\r\nPassword checking logic should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      },
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2019-18827",
        "Phase": null,
        "Title": "chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18827"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-926",
    "Title": " Improper Export of Android Application Components",
    "Description": "The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains. ",
    "ExtendedDescription": "The attacks and consequences of improperly exporting a component may depend on the exported component: If access to an exported Activity is not restricted, any application will be able to launch the activity. This may allow a malicious application to gain access to sensitive information, modify the internal state of the application, or trick a user into interacting with the victim application while believing they are still interacting with the malicious application. If access to an exported Service is not restricted, any application may start and bind to the Service. Depending on the exposed functionality, this may allow a malicious application to perform unauthorized actions, gain access to sensitive information, or corrupt the internal state of the application. If access to a Content Provider is not restricted to only the expected applications, then malicious applications might be able to access the sensitive data. Note that in Android before 4.2, the Content Provider is automatically exported unless it has been explicitly declared as NOT exported. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Build and Compilation",
        "Title": "Strategy:  Attack Surface Reduction\r\nIf they do not need to be shared by other applications, explicitly mark components with android:exported=\"false\" in the application manifest",
        "Description": "Strategy:  Attack Surface Reduction\r\nIf they do not need to be shared by other applications, explicitly mark components with android:exported=\"false\" in the application manifest. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Build and Compilation",
        "Title": "Strategy:  Attack Surface Reduction\r\nIf you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you",
        "Description": "Strategy:  Attack Surface Reduction\r\nIf you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Build and Compilation; Architecture and Design",
        "Title": "Strategy:  Attack Surface Reduction\r\nLimit Content Provider permissions (read/write) as appropriate",
        "Description": "Strategy:  Attack Surface Reduction\r\nLimit Content Provider permissions (read/write) as appropriate. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Build and Compilation; Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nLimit Content Provider permissions (read/write) as appropriate",
        "Description": "Strategy:  Separation of Privilege\r\nLimit Content Provider permissions (read/write) as appropriate. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1230",
    "Title": " Exposure of Sensitive Information Through Metadata",
    "Description": "The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information. ",
    "ExtendedDescription": "Developers might correctly prevent unauthorized access to a database or other resource containing sensitive information, but they might not consider that portions of the original information might also be recorded in metadata, search indices, statistical reports, or other resources. If these resources are not also restricted, then attackers might be able to extract some or all of the original information, or otherwise infer some details. For example, an attacker could specify search terms that are known to be unique to a particular person, or view metadata such as activity or creation dates in order to identify usage patterns. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
      "CWE-202",
      "CWE-612"
    ]
  },
  {
    "Id": "CWE-202",
    "Title": " Exposure of Sensitive Information Through Data Queries",
    "Description": "When trying to keep information confidential, an attacker can often infer some of the information by using statistics. ",
    "ExtendedDescription": "In situations where data should not be tied to individual users, but a large number of users should be able to make queries that \"scrub\" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "This is a complex topic",
        "Description": "This is a complex topic. See the book Translucent Databases for a good discussion of best practices. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-612",
    "Title": " Improper Authorization of Index Containing Sensitive Information",
    "Description": "The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information. ",
    "ExtendedDescription": "Web sites and other document repositories may apply an indexing routine against a group of private documents to facilitate search. If the index's results are available to parties who do not have access to the documents being indexed, then attackers could obtain portions of the documents by conducting targeted searches and reading the results. The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1244",
    "Title": " Improper Access to Sensitive Information Using Debug and Test Interfaces",
    "Description": "The product's physical debug and test interface protection does not block untrusted agents, resulting in unauthorized access to and potentially control of sensitive assets. ",
    "ExtendedDescription": "If the product implements access-control protection on the debug and test interface, a debugger is typically required to enter either a valid response to a challenge provided by the authorization logic or, alternatively, enter the right password in order to exercise the debug and test interface. However, if this protection mechanism does not exclude all untrusted, debug agents, an attacker could access/control security-sensitive registers. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "For security-sensitive assets accessible over debug/test interfaces, only allow trusted agents",
        "Description": "For security-sensitive assets accessible over debug/test interfaces, only allow trusted agents. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      },
      {
        "Id": "CAPEC-114",
        "Phase": null,
        "Title": null,
        "Description": "Authentication Abuse",
        "Url": "http://capec.mitre.org/data/definitions/114.html"
      },
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2019-18827",
        "Phase": null,
        "Title": "After ROM code execution, JTAG access is disabled. Before the ROM code is executed, JTAG access is possible allowing a user full system access. This allows a user to modify the boot flow and successfully bypass the secure-boot process. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18827"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1297",
    "Title": " Unprotected Confidential Information on Device is Accessible by OSAT Vendors",
    "Description": "The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors. ",
    "ExtendedDescription": "In contrast to complete vertical integration of architecting, designing, manufacturing, assembling, and testing chips all within a single organization, an organization can choose to simply architect and design a chip before outsourcing the rest of the process to OSAT entities (e.g., external foundries and test houses). In the latter example, the device enters an OSAT facility in a much more vulnerable pre-production stage where many debug and test modes are accessible. Therefore, the chipmaker must place a certain level of trust with the OSAT. To counter this, the chipmaker often requires the OSAT partner to enter into restrictive non-disclosure agreements (NDAs). Nonetheless, OSAT vendors likely have many customers, which increases the risk of accidental sharing of information. There may also be a security vulnerability in the information technology (IT) system of the OSAT facility. Alternatively, a malicious insider at the OSAT facility may carry out an insider attack. Considering these factors, it behooves the chipmaker to minimize any confidential information in the device that may be accessible to the OSAT vendor. Logic errors during design or synthesis could misconfigure the interconnection of the debug components, which could provide improper authorization to sensitive information. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": " • Ensure that when an OSAT vendor is allowed to access test interfaces necessary for preproduction and returned parts, the vendor only pulls the minimal information necessary",
        "Description": " • Ensure that when an OSAT vendor is allowed to access test interfaces necessary for preproduction and returned parts, the vendor only pulls the minimal information necessary. Also, architect the product in such a way that, when an “unlock device” request comes, it only unlocks that specific part and not all the parts for that product line.  • Ensure that the product’s non-volatile memory (NVM) is scrubbed of all confidential information and secrets before handing it over to an OSAT.  • Arrange to secure all communication between an OSAT facility and the chipmaker.  \r\nEffectiveness: Moderate",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-286",
    "Title": " Incorrect User Management",
    "Description": "The software does not properly manage a user within its environment. ",
    "ExtendedDescription": "Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-842"
    ]
  },
  {
    "Id": "CWE-842",
    "Title": " Placement of User into Incorrect Group",
    "Description": "The software or the administrator places a user into an incorrect group. ",
    "ExtendedDescription": "If the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-1999-1193",
        "Phase": null,
        "Title": "Operating system assigns user to privileged wheel group, allowing the user to gain root privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1193"
      },
      {
        "Id": "CVE-2010-3716",
        "Phase": null,
        "Title": "Chain: drafted web request allows the creation of users with arbitrary group membership. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3716"
      },
      {
        "Id": "CVE-2008-5397",
        "Phase": null,
        "Title": "Chain: improper processing of configuration options causes users to contain unintended group memberships. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5397"
      },
      {
        "Id": "CVE-2007-6644",
        "Phase": null,
        "Title": "CMS does not prevent remote administrators from promoting other users to the administrator group, in violation of the intended security model. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6644"
      },
      {
        "Id": "CVE-2007-3260",
        "Phase": null,
        "Title": "Product assigns members to the root group, allowing escalation of privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3260"
      },
      {
        "Id": "CVE-2002-0080",
        "Phase": null,
        "Title": "Chain: daemon does not properly clear groups before dropping privileges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0080"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-942",
    "Title": " Permissive Cross-domain Policy with Untrusted Domains",
    "Description": "The software uses a cross-domain policy file that includes domains that should not be trusted. ",
    "ExtendedDescription": "A cross-domain policy file (\"crossdomain.xml\" in Flash and \"clientaccesspolicy.xml\" in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made. Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains. An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. In many cases, the attack can be launched without the victim even being aware of it. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Attack Surface Reduction\r\nAvoid using wildcards in the cross-domain policy file",
        "Description": "Strategy:  Attack Surface Reduction\r\nAvoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nFor Flash, modify crossdomain",
        "Description": "Strategy:  Environment Hardening\r\nFor Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Attack Surface Reduction\r\nFor Flash, modify crossdomain",
        "Description": "Strategy:  Attack Surface Reduction\r\nFor Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2012-2292",
        "Phase": null,
        "Title": "Product has a Silverlight cross-domain policy that does not restrict access to another application, which allows remote attackers to bypass the Same Origin Policy. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2292"
      },
      {
        "Id": "CVE-2014-2049",
        "Phase": null,
        "Title": "The default Flash Cross Domain policies in a product allows remote attackers to access user files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2049"
      },
      {
        "Id": "CVE-2007-6243",
        "Phase": null,
        "Title": "Chain: Adobe Flash Player does not sufficiently restrict the interpretation and usage of cross-domain policy files, which makes it easier for remote attackers to conduct cross-domain and cross-site scripting (XSS) attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6243"
      },
      {
        "Id": "CVE-2008-4822",
        "Phase": null,
        "Title": "Chain: Adobe Flash Player and earlier does not properly interpret policy files, which allows remote attackers to bypass a non-root domain policy. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4822"
      },
      {
        "Id": "CVE-2010-3636",
        "Phase": null,
        "Title": "Chain: Adobe Flash Player does not properly handle unspecified encodings during the parsing of a cross-domain policy file, which allows remote web servers to bypass intended access restrictions via unknown vectors. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3636"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1220",
    "Title": " Insufficient Granularity of Access Control",
    "Description": "The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets. ",
    "ExtendedDescription": "Integrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection. A common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation; Testing",
        "Title": " Access-control-policy protections must be reviewed for design inconsistency and common weaknesses",
        "Description": " Access-control-policy protections must be reviewed for design inconsistency and common weaknesses.  Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.  \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      },
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Such issues could be introduced during hardware implementation and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-1222"
    ]
  },
  {
    "Id": "CWE-1222",
    "Title": " Insufficient Granularity of Address Regions Protected by Register Locks",
    "Description": "The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process. ",
    "ExtendedDescription": "Integrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. In hardware design, this is commonly implemented using a programmable lock bit which enables/disables writing to a protected set of registers or address regions. When the programmable lock bit is set, the relevant address region can be implemented as a hardcoded value in hardware logic that cannot be changed later. A problem can arise wherein the protected region definition is not granular enough. After the programmable lock bit has been set, then this new functionality cannot be implemented without change to the hardware design. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "The defining of protected locked registers should be reviewed or tested early in the design phase with software teams to ensure software flows are not blocked by the security locks",
        "Description": "The defining of protected locked registers should be reviewed or tested early in the design phase with software teams to ensure software flows are not blocked by the security locks. \r\nAs an alternative to using register lock control bits and fixed access control regions, the hardware design could use programmable security access control configuration so that device trusted firmware can configure and change the protected regions based on software usage and security models. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Such issues are introduced during hardware architecture and design since software controls and configuration are defined during these phases and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1224",
    "Title": " Improper Restriction of Write-Once Bit Fields",
    "Description": "The hardware design control register \"sticky bits\" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software. ",
    "ExtendedDescription": "Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or \"sticky.\" This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings. Failure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value \"1\", wherein they would work as \"write-1-once\" and not \"write-once\". ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration",
        "Description": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros",
        "Description": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      },
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1231",
    "Title": " Improper Implementation of Lock Protection Registers",
    "Description": "The product incorrectly implements register lock bit protection features such that protected controls can be programmed even after the lock has been set. ",
    "ExtendedDescription": "In integrated circuits and hardware IPs, device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set disables writes to a protected set of registers or address regions. Design or coding errors in the implementation of the lock bit protection feature may allow the lock bit to be modified or cleared by software after being set to unlock the system. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation; Testing",
        "Title": " Security lock bit protections must be reviewed for design inconsistency and common weaknesses",
        "Description": " Security lock bit protections must be reviewed for design inconsistency and common weaknesses.  Security lock programming flow and lock properties must be tested in pre-silicon, post-silicon testing.  \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1242",
    "Title": " Inclusion of Undocumented Features or Chicken Bits",
    "Description": "The device includes chicken bits or undocumented features that can create entry points for unauthorized actors. ",
    "ExtendedDescription": "A common design practice is to use undocumented bits on a device that can be used to disable certain functional security features. These bits are commonly referred to as \"chicken bits\". They can facilitate quick identification and isolation of faulty components, features that negatively affect performance, or features that do not provide the required controllability for debug and test. Another way to achieve this is through implementation of undocumented features. An attacker might exploit these interfaces for unauthorized access. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "The implementation of chicken bits in a released product is highly discouraged",
        "Description": "The implementation of chicken bits in a released product is highly discouraged. If implemented at all, ensure that they are disabled in production devices. All interfaces to a device should be documented. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-212",
        "Phase": null,
        "Title": null,
        "Description": "Functionality Misuse",
        "Url": "http://capec.mitre.org/data/definitions/212.html"
      },
      {
        "Id": "CAPEC-36",
        "Phase": null,
        "Title": null,
        "Description": "Using Unpublished Interfaces",
        "Url": "http://capec.mitre.org/data/definitions/36.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Documentation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1252",
    "Title": " CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations",
    "Description": "The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory. ",
    "ExtendedDescription": "CPUs provide a special bit that supports exclusivity of write and execute operations. This bit is used to segregate areas of memory to either mark them as code (instructions, which can be executed) or data (which should not be executed). In this way, if a user can write to a region of memory, the user cannot execute from that region and vice versa. This exclusivity provided by special hardware bit is leveraged by the operating system to protect executable space. While this bit is available in most modern processors by default, in some CPUs the exclusivity is implemented via a memory-protection unit (MPU) and memory-management unit (MMU) in which memory regions can be carved out with exact read, write, and execute permissions. However, if the CPU does not have an MMU/MPU, then there is no write exclusivity. Without configuring exclusivity of operations via segregated areas of memory, an attacker may be able to inject malicious code onto memory and later execute it. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Implement a dedicated bit that can be leveraged by the Operating System to mark data areas as non-executable",
        "Description": "Implement a dedicated bit that can be leveraged by the Operating System to mark data areas as non-executable. If such a bit is not available in the CPU, implement MMU/MPU (memory management unit / memory protection unit). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Integration",
        "Title": "If MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation",
        "Description": "If MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      },
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1256",
    "Title": " Hardware Features Enable Physical Attacks from Software",
    "Description": "Software-controllable device functionality such as power and clock management permits unauthorized modification of memory or register bits. ",
    "ExtendedDescription": "Fault injection attacks involve strategic manipulation of bits in a device to achieve a desired effect such as skipping an authentication step, elevating privileges, or altering the output of a cryptographic operation. Techniques employed to flip bits include low-cost methods such as manipulation of the device clock and voltage supply as well as high-cost but more precise techniques involving lasers. To inject faults a physical access requirement is frequently assumed to be necessary. This assumption may be false if the device has improperly secured power management features that allow untrusted programs to manipulate the device clock frequency or operating voltage. For mobile devices, minimizing power consumption is critical, but these devices run a wide variety of applications with different performance requirements. Software-controllable mechanisms to dynamically scale device voltage and frequency are common features in today’s chipsets and can be exploited by attackers if protections are not in place. Other features, such as the ability to write repeatedly to DRAM at a rapid rate from unprivileged software can result in bit flips in other memory locations (Rowhammer). ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage",
        "Description": "Ensure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-624",
        "Phase": null,
        "Title": null,
        "Description": "Hardware Fault Injection",
        "Url": "http://capec.mitre.org/data/definitions/624.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2019-11157",
        "Phase": null,
        "Title": "Plundervolt: Improper conditions check in voltage settings for some Intel(R) Processors may allow a privileged user to potentially enable escalation of privilege and/or information disclosure via local access. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11157"
      },
      {
        "Id": "CVE-2015-0565",
        "Phase": null,
        "Title": "NaCl in 2015 allowed the CLFLUSH instruction, making rowhammer attacks possible. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0565"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1257",
    "Title": " Improper Access Control Applied to Mirrored or Aliased Memory Regions",
    "Description": "Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region. ",
    "ExtendedDescription": "Hardware product designs often need to implement memory protection features that enable privileged software to define isolated memory regions and access control (read/write) policies. Isolated memory regions can be defined on different memory spaces in a design (e.g. system physical address, virtual address, memory mapped IO). Each memory cell should be mapped and assigned a system address that the core software can use to read/write to that memory. It is possible to map the same memory cell to multiple system addresses such that read/write to any of the aliased system addresses would be decoded to the same memory cell. This is commonly done in hardware designs for redundancy and simplifying address decoding logic. If one of the memory regions is corrupted or faulty, then that hardware can switch to using the data in the mirrored memory region. Memory aliases can also be created in the system address map if the address decoder unit ignores higher order address bits when mapping a smaller address region into the full system address. A common security weakness that can exist in such memory mapping is that aliased memory regions could have different read/write access protections enforced by the hardware such that an untrusted agent is blocked from accessing a memory address but is not blocked from accessing the corresponding aliased memory address. Such inconsistency can then be used to bypass the access protection of the primary memory block and read or modify the protected memory. An untrusted agent could also possibly create memory aliases in the system address map for malicious purposes if it is able to change the mapping of an address region or modify memory region sizes. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "The checks should be applied for consistency access rights between primary memory regious and any mirrored or aliased memory regions",
        "Description": "The checks should be applied for consistency access rights between primary memory regious and any mirrored or aliased memory regions. If different memory protection units (MPU) are protecting the aliased regions, their protected range definitions and policies should be synchronized. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components",
        "Description": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      },
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1259",
    "Title": " Improper Restriction of Security Token Assignment",
    "Description": "The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected. ",
    "ExtendedDescription": "Systems-On-A-Chip (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify which actions originated from which agent. These actions may be one of the directives: 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security Tokens are assigned to every agent in the System that is capable of generating an action or receiving an action from another agent. Multiple Security Tokens may be assigned to an agent and may be unique based on the agent's trust level or allowed privileges. Since the Security Tokens are integral for the maintanence of security in an SoC, they need to be protected properly. A common weakness afflicting Security Tokens is improperly restricting the assignment to trusted components. Consequently, an improperly protected Security Token may be able to be programmed by a malicious agent (i.e., the Security Token is mutable) to spoof the action as if it originated from a trusted agent. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": " Security Token assignment review checks for design inconsistency and common weaknesses",
        "Description": " Security Token assignment review checks for design inconsistency and common weaknesses.  Security-Token definition and programming flow is tested in both pre-silicon and post-silicon testing.  ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1260",
    "Title": " Improper Handling of Overlap Between Protected Memory Ranges",
    "Description": "The product allows address regions to overlap, which can result in the bypassing of intended memory protection. ",
    "ExtendedDescription": "Isolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software. If a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower privilege software to read or write into the protected memory region resulting in privilege escalation attack. Address overlap weakness can also be used to launch a denial of service attack on the higher privilege software memory regions. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software",
        "Description": "Ensure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme",
        "Description": "For all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme. \r\nFor example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software. \r\nHardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. \r\nThe memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-7096",
        "Phase": null,
        "Title": "Intel Desktop and Intel Mobile Boards with BIOS firmware DQ35JO, DQ35MP, DP35DP, DG33FB, DG33BU, DG33TL, MGM965TW, D945GCPE, and DX38BT allow local administrators with ring 0 privileges to gain additional privileges and modify code that is running in System Management Mode, or access hypervisor memory as demonstrated at Black Hat 2008 by accessing certain remapping registers in Xen 3.3. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-7096"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Such issues could be introduced during hardware architecture and design or implementation and identified later during the Testing phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1262",
    "Title": " Register Interface Allows Software Access to Sensitive Data or Security Settings",
    "Description": "Memory-mapped registers provide access to hardware functionality from software and if not properly secured can result in loss of confidentiality and integrity. ",
    "ExtendedDescription": "Software commonly accesses peripherals in an SoC through a memory-mapped register interface. Any security-critical data accessible directly or indirectly through the register interface must have a clearly defined and correctly implemented access control policy to protect assets from malicious software tampering. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Design proper policies for hardware register access from software",
        "Description": "Design proper policies for hardware register access from software. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure the access control policies are implemented in accordance with the specified design",
        "Description": "Ensure the access control policies are implemented in accordance with the specified design. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      },
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This weakness may be exploited if the register interface design does not adequately protect hardware assets from software. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Mis-implementation of access control policies may inadvertently allow access to hardware assets through the register interface. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1263",
    "Title": " Improper Physical Access Control",
    "Description": "The product is to be designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor's ability to access these areas. ",
    "ExtendedDescription": "Sections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism",
        "Description": "Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "The testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access",
        "Description": "The testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Manufacturing",
        "Title": "",
        "Description": "",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-401",
        "Phase": null,
        "Title": null,
        "Description": "Physically Hacking Hardware",
        "Url": "http://capec.mitre.org/data/definitions/401.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This weakness can arise if design decisions are made that do not align with the intended physical protection of the product ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Manufacturing",
        "Title": "While the architecture and design phase of the product may have accurately met the intended robustness for product physical protections, this phase may introduce the weakness through errors in physically manufacturing the product. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1267",
    "Title": " Policy Uses Obsolete Encoding",
    "Description": "The product uses an obsolete encoding mechanism to implement access controls. ",
    "ExtendedDescription": "Within a System-On-a-Chip (SoC), various circuits and hardware engines generate transactions for the purpose of accessing (read/write) assets or performing various actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (identifying the originator of the transaction) and a destination identity (routing the transaction to the respective entity). Sometimes the transactions are qualified with a Security Token. This Security Token helps the destination agent decide on the set of allowed actions (e.g., access to an asset for reads and writes). A policy encoder is used to map the bus transactions to Security Tokens that in turn are used as access-controls/protection mechanisms. A common weakness involves using an encoding which is no longer trusted, i.e., an obsolete encoding. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Security Token Decoders should be reviewed for design inconsistency and common weaknesses",
        "Description": "Security Token Decoders should be reviewed for design inconsistency and common weaknesses. \r\nAccess and programming flows should be tested in both pre-silicon and post-silicon testing. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1268",
    "Title": " Policy Privileges are not Assigned Consistently Between Control and Data Agents",
    "Description": "The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies. ",
    "ExtendedDescription": "Integrated circuits and hardware engines may provide access to resources (device-configuration, encryption keys, etc.) belonging to trusted firmware or software modules (commonly set by a BIOS or a bootloader). These accesses are typically controlled and limited by the hardware. Hardware design access control is sometimes implemented using a policy. A policy defines which entity or agent may or may not be allowed to perform an action. When a system implements multiple levels of policies, a control policy may allow direct access to a resource as well as changes to the policies themselves. Resources that include agents in their control policy but not in their write policy could unintentionally allow an untrusted agent to insert itself in the write policy register. Inclusion in the write policy register could allow a malicious or misbehaving agent write access to resources. This action could result in security compromises including leaked information, leaked encryption keys, or modification of device configuration. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing ",
        "Description": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing ",
        "Description": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This weakness may be introduced during the design of a device when the architect does not comprehensively specify all of the policies required by an agent. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "This weakness may be introduced during implementation if device policy restrictions do not sufficiently constrain less-privileged clients. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1270",
    "Title": " Generation of Incorrect Security Tokens",
    "Description": "The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect. ",
    "ExtendedDescription": "Systems-On-a-Chip (SoC) (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify actions originated from various agents. These actions could be \"read\", \"write\", \"program\", \"reset\", \"fetch\", \"compute\", etc. Security Tokens are generated and assigned to every agent on the SoC that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Token based on its trust level or privileges. Incorrectly generated Security Tokens could result in the same token used for multiple agents or multiple tokens being used for the same agent. This condition could result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": " Generation of Security Tokens should be reviewed for design inconsistency and common weaknesses",
        "Description": " Generation of Security Tokens should be reviewed for design inconsistency and common weaknesses.  Security-Token definition and programming flow should be tested in pre-silicon and post-silicon testing.  ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1274",
    "Title": " Insufficient Protections on the Volatile Memory Containing Boot Code",
    "Description": "The protections on the product's non-volatile memory containing boot code are insufficient to prevent the bypassing of secure boot or the execution of an untrusted, boot code chosen by an adversary. ",
    "ExtendedDescription": "As a part of secure-boot process, a System-on-Chip's (SoC) read-only-memory (ROM) code fetches bootloader code from Non-Volatile Memory (NVM) and stores the code in Volatile Memory (VM), such as dynamic, random-access memory (DRAM)/static, random-access memory (SRAM). The NVM is usually external to the SoC while the VM is internal to the SoC. As the code is transferred from NVM to VM, it is authenticated by the SoC's ROM code. If the volatile-memory-region protections or access controls are insufficient to prevent modifications from an adversary or untrusted agent, the secure boot may be bypassed or replaced with the excution of an adversary’s code. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "During this phase, ensure that the design of volatile-memory protections are enough to prevent modification from an adversary or untrusted code",
        "Description": "During this phase, ensure that the design of volatile-memory protections are enough to prevent modification from an adversary or untrusted code. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Test the volatile-memory protections to ensure they are safe from modification or untrusted code",
        "Description": "Test the volatile-memory protections to ensure they are safe from modification or untrusted code. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2019-2267",
        "Phase": null,
        "Title": "Locked regions might be modified through other interfaces in secure-boot-loader image due to improper, access control ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-2267"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This weakness can be introduced during hardware architecture or design but can be identified later during testing. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1275",
    "Title": " Sensitive Cookie with Improper SameSite Attribute",
    "Description": "The SameSite attribute for sensitive cookies is not set, or an insecure value is used. ",
    "ExtendedDescription": "The SameSite attribute controls how cookies are sent for cross-domain requests. This attribute may have three values: 'Lax', 'Strict', or 'None'. If the 'None' value is used, a website may create a cross-domain POST HTTP request to another website, and the browser automatically adds cookies to this request. This may lead to Cross-Site-Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens). ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'",
        "Description": "Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation. \r\nEffectiveness: High\r\nNote: While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie.",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-62",
        "Phase": null,
        "Title": null,
        "Description": "Cross Site Request Forgery",
        "Url": "http://capec.mitre.org/data/definitions/62.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "This weakness occurs during implementation when the coder does not properly set the SameSite attribute. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1276",
    "Title": " Hardware Child Block Incorrectly Connected to Parent System",
    "Description": "Signals between a hardware IP and the parent system design are incorrectly connected causing security risks. ",
    "ExtendedDescription": "Individual hardware IP must communicate with the parent system in order for the product to function correctly and as intended. If implemented incorrectly, while not causing any apparent functional issues, may cause security issues. For example, if the IP should only be reset by a system-wide hard reset, but instead the reset input is connected to a software-triggered debug mode reset (which is also asserted during a hard reset), integrity of data inside the IP can be violated. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks",
        "Description": "System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "This weakness is introduced when integrating IP into a parent design. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1280",
    "Title": " Access Control Check Implemented After Asset is Accessed",
    "Description": "A product's hardware-based access control check occurs after the asset has been accessed. ",
    "ExtendedDescription": "The product implements a hardware-based access control check. The asset should be accessible only after the check is successful. If, however, this operation is not atomic and the asset is accessed before the check is complete, the security of the system may be compromised. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Implement the access control check first",
        "Description": "Implement the access control check first. Access should only be given to asset if agent is authorized. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1283",
    "Title": " Mutable Attestation or Measurement Reporting Data",
    "Description": "The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary. ",
    "ExtendedDescription": "A System-on-Chip (SoC) implements secure boot or verified boot. During this boot flow, the SoC often measures the code that it authenticates. The measurement is usually done by calculating the one-way hash of the code binary and extending it to the previous hash. The hashing algorithm should be a Secure One-Way hash function. The final hash, i.e., the value obtained after the completion of the boot flow, serves as the measurement data used in reporting or in attestation. The calculated hash is often stored in registers that can later be read by the party of interest to determine tampering of the boot flow. A common weakness is that the contents in these registers are modifiable by an adversary, thus spoofing the measurement. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Measurement data should be stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent",
        "Description": "Measurement data should be stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Such issues can be introduced during hardware architecture or design and can be identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "If the access-controls which protecting the reporting registers are misconfigured during implementation, this weakness can arise. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1290",
    "Title": " Incorrect Decoding of Security Identifiers ",
    "Description": "The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset. ",
    "ExtendedDescription": "In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. The security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A decoder decodes the bus transactions to map security identifiers into necessary access-controls/protections. A common weakness that can exist in this scenario is incorrect decoding because an untrusted agent’s security identifier is decoded into a trusted agent’s security identifier. Thus, an untrusted agent previously without access to an asset can now gain access to the asset. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Security identifier decoders must be reviewed for design consistency and common weaknesses",
        "Description": "Security identifier decoders must be reviewed for design consistency and common weaknesses. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness",
        "Description": "Access and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1292",
    "Title": " Incorrect Conversion of Security Identifiers",
    "Description": "The product implements a conversion mechanism to map certain bus-transaction signals to security identifiers. However, if the conversion is incorrectly implemented, untrusted agents can gain unauthorized access to the asset. ",
    "ExtendedDescription": "In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. This security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A typical bus connects several leader and follower agents. Some follower agents implement bus protocols differently from leader agents. A protocol conversion happens at a bridge to seamlessly connect different protocols on the bus. One example is a system that implements a leader with the Advanced High-performance Bus (AHB) protocol and a follower with the Open-Core Protocol (OCP). A bridge AHB-to-OCP is needed to translate the transaction from one form to the other. A common weakness that can exist in this scenario is that this conversion between protocols is implemented incorrectly, whereupon an untrusted agent may gain unauthorized access to an asset. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Security identifier decoders must be reviewed for design inconsistency and common weaknesses ",
        "Description": "Security identifier decoders must be reviewed for design inconsistency and common weaknesses ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Access and programming flows must be tested in pre-silicon and post-silicon testing",
        "Description": "Access and programming flows must be tested in pre-silicon and post-silicon testing. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Such issues could be introduced during hardware architecture and design, then identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Such issues could be introduced during hardware implementation, then identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1294",
    "Title": " Insecure Security Identifier Mechanism",
    "Description": "The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented. ",
    "ExtendedDescription": "Systems-On-Chip (Integrated circuits and hardware engines) implement Security Identifiers to differentiate/identify actions originated from various agents. These actions could be 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security identifiers are generated and assigned to every agent in the System (SoC) that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Identifier based on its trust level or privileges. A broad class of flaws can exist in the Security Identifier process, including but not limited to missing security identifiers, improper conversion of security identifiers, incorrect generation of security identifiers, etc. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Security Identifier Decoders must be reviewed for design inconsistency and common weaknesses ",
        "Description": "Security Identifier Decoders must be reviewed for design inconsistency and common weaknesses ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Access and programming flows must be tested in pre-silicon and post-silicon testing",
        "Description": "Access and programming flows must be tested in pre-silicon and post-silicon testing. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Such issues could be introduced during hardware architecture and design, then identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Such issues could be introduced during hardware implementation, then identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-1302"
    ]
  },
  {
    "Id": "CWE-1302",
    "Title": " Missing Security Identifier",
    "Description": "The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier. ",
    "ExtendedDescription": "In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute). A typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity) in addition to much more information in the message. Sometimes the transactions are qualified with a Security Identifier. This Security Identifier helps the destination agent decide on the set of allowed or disallowed actions. A common weakness that can exist in such transaction schemes is that the source agent fails to include the necessary, security identifier with the transaction. Because of the missing security identifier, the destination agent might drop the message, thus resulting in Denial-of-Service (DoS), or get confused in its attempt to execute the given action, which confusion could result in privilege escalation or a gain of unintended access. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Transaction details must be reviewed for design inconsistency and common weaknesses",
        "Description": "Transaction details must be reviewed for design inconsistency and common weaknesses. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing",
        "Description": "Security identifier definition and programming flow must be tested in pre-silicon and post-silicon testing. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1296",
    "Title": " Incorrect Chaining or Granularity of Debug Components",
    "Description": "The product's debug components contain incorrect chaining or granularity of debug components. ",
    "ExtendedDescription": "For debugging and troubleshooting a chip, several hardware design elements are often implemented, including: Various Test Access Ports (TAPs) allow boundary scan commands to be executed. For scanning the internal components of a chip, there are scan cells that allow the chip to be used as a \"stimulus and response\" mechanism. Chipmakers might create custom methods to observe the internal components of their chips by placing various tracing hubs within their chip and creating hierarchical or interconnected structures among those hubs. Logic errors during design or synthesis could misconfigure the interconnection of the debug components, which could allow unintended access permissions. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that debug components are properly chained and their granularity is maintained at different authentication levels",
        "Description": "Ensure that debug components are properly chained and their granularity is maintained at different authentication levels. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2017-18347",
        "Phase": null,
        "Title": "Incorrect access control in RDP Level 1 on STMicroelectronics STM32F0 series devices allows physically present attackers to extract the device's protected firmware via a special sequence of Serial Wire Debug (SWD) commands because there is a race condition between full initialization of the SWD interface and the setup of flash protection. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-18347"
      },
      {
        "Id": "CVE-2020-1791",
        "Phase": null,
        "Title": "There is an improper authorization vulnerability in several smartphones. The system has a logic-judging error, and, under certain scenarios, a successful exploit could allow the attacker to switch to third desktop after a series of operations in ADB mode. (Vulnerability ID: HWPSIRT-2019-10114). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1791"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1304",
    "Title": " Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation",
    "Description": "The product performs a power save/restore operation, but it does not ensure that the integrity of the configuration state is maintained and/or verified between the beginning and ending of the operation. ",
    "ExtendedDescription": "Before powering down, the Intellectual Property (IP) saves current state (S) to persistent storage such as flash or always-on memory in order to optimize the restore operation. During this process, an attacker with access to the persistent storage may alter (S) to a configuration that could potentially modify privileges, disable protections, and/or cause damage to the hardware. If the IP does not validate the configuration state stored in persistent memory, upon regaining power or becoming operational again, the IP could be compromised through the activation of an unwanted/harmful configuration. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Inside the IP, incorporate integrity checking on the configuration state via a cryptographic hash",
        "Description": "Inside the IP, incorporate integrity checking on the configuration state via a cryptographic hash. The hash can be protected inside the IP such as by storing it in internal registers which never lose power. Before powering down, the IP performs a hash of the configuration and saves it in these persistent registers. Upon restore, the IP performs a hash of the saved configuration and compares it with the saved hash. If they do not match, then the IP should not trust the configuration. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Integration",
        "Title": "Outside the IP, incorporate integrity checking of the configuration state via a trusted agent",
        "Description": "Outside the IP, incorporate integrity checking of the configuration state via a trusted agent. Before powering down, the trusted agent performs a hash of the configuration and saves the hash in persistent storage. Upon restore, the IP requests the trusted agent validate its current configuration. If the configuration hash is invalid, then the IP should not trust the configuration. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Integration",
        "Title": "Outside the IP, incorporate a protected environment that prevents undetected modification of the configuration state by untrusted agents",
        "Description": "Outside the IP, incorporate a protected environment that prevents undetected modification of the configuration state by untrusted agents. Before powering down, a trusted agent saves the IP’s configuration state in this protected location that only it is privileged to. Upon restore, the trusted agent loads the saved state into the IP. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Weakness introduced via missing internal integrity guarantees during power save/restore ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Integration",
        "Title": "Weakness introduced via missing external integrity verification during power save/restore ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-190",
    "Title": " Integer Overflow or Wraparound",
    "Description": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. ",
    "ExtendedDescription": "An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol",
        "Description": "Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Strategy:  Language Selection\r\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Language Selection\r\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nIf possible, choose a language or compiler that performs automatic bounds checking. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nUse libraries or frameworks that make it easier to handle numbers without unexpected consequences. \r\nExamples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106] ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nPerform input validation on any numeric input by ensuring that it is within the expected range",
        "Description": "Strategy:  Input Validation\r\nPerform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range. \r\nUse unsigned integers where possible. This makes it easier to perform sanity checks for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681)",
        "Description": "Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7] \r\nAlso be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Compilation or Build Hardening\r\nExamine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables",
        "Description": "Strategy:  Compilation or Build Hardening\r\nExamine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-92",
        "Phase": null,
        "Title": null,
        "Description": "Forced Integer Overflow",
        "Url": "http://capec.mitre.org/data/definitions/92.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2018-10887",
        "Phase": null,
        "Title": "Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10887"
      },
      {
        "Id": "CVE-2019-1010006",
        "Phase": null,
        "Title": "Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1010006"
      },
      {
        "Id": "CVE-2010-2753",
        "Phase": null,
        "Title": "chain: integer overflow leads to use-after-free ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2753"
      },
      {
        "Id": "CVE-2002-0391",
        "Phase": null,
        "Title": "Integer overflow via a large number of arguments. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0391"
      },
      {
        "Id": "CVE-2002-0639",
        "Phase": null,
        "Title": "Integer overflow in OpenSSH as listed in the demonstrative examples. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0639"
      },
      {
        "Id": "CVE-2005-1141",
        "Phase": null,
        "Title": "Image with large width and height leads to integer overflow. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1141"
      },
      {
        "Id": "CVE-2005-0102",
        "Phase": null,
        "Title": "Length value of -1 leads to allocation of 0 bytes and resultant heap overflow. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0102"
      },
      {
        "Id": "CVE-2004-2013",
        "Phase": null,
        "Title": "Length value of -1 leads to allocation of 0 bytes and resultant heap overflow. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2013"
      },
      {
        "Id": "CVE-2017-1000121",
        "Phase": null,
        "Title": "chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-1000121"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-182",
    "Title": " Collapse of Data into Unsafe Value",
    "Description": "The software filters data in a way that causes it to be reduced or \"collapsed\" into an unsafe value that violates an expected security property. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e",
        "Description": "Strategy:  Input Validation\r\nAvoid making decisions based on names of resources (e.g. files) if those resources can have alternate names. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180)",
        "Description": "Strategy:  Input Validation\r\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": null,
        "Title": "Canonicalize the name to match that of the file system's representation of the name",
        "Description": "Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-0815",
        "Phase": null,
        "Title": "\"/.////\" in pathname collapses to absolute path. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0815"
      },
      {
        "Id": "CVE-2005-3123",
        "Phase": null,
        "Title": "\"/.//..//////././\" is collapsed into \"/.././\" after \"..\" and \"//\" sequences are removed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3123"
      },
      {
        "Id": "CVE-2002-0325",
        "Phase": null,
        "Title": "\".../...//\" collapsed to \"...\" due to removal of \"./\" in web server. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0325"
      },
      {
        "Id": "CVE-2002-0784",
        "Phase": null,
        "Title": "chain: HTTP server protects against \"..\" but allows \".\" variants such as \"////./../.../\". If the server removes \"/..\" sequences, the result would collapse into an unsafe value \"////../\" (CWE-182). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0784"
      },
      {
        "Id": "CVE-2005-2169",
        "Phase": null,
        "Title": "MFV. Regular expression intended to protect against directory traversal reduces \".../...//\" to \"../\". ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2169"
      },
      {
        "Id": "CVE-2001-1157",
        "Phase": null,
        "Title": "XSS protection mechanism strips a &lt;script&gt; sequence that is nested in another &lt;script&gt; sequence. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1157"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-602",
    "Title": " Client-Side Enforcement of Server-Side Security",
    "Description": "The software is composed of a server that relies on the client to implement a mechanism that is intended to protect the server. ",
    "ExtendedDescription": "When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. \r\nEven though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source",
        "Description": "If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection",
        "Description": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session",
        "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-162",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Hidden Fields",
        "Url": "http://capec.mitre.org/data/definitions/162.html"
      },
      {
        "Id": "CAPEC-202",
        "Phase": null,
        "Title": null,
        "Description": "Create Malicious Client",
        "Url": "http://capec.mitre.org/data/definitions/202.html"
      },
      {
        "Id": "CAPEC-207",
        "Phase": null,
        "Title": null,
        "Description": "Removing Important Client Functionality",
        "Url": "http://capec.mitre.org/data/definitions/207.html"
      },
      {
        "Id": "CAPEC-208",
        "Phase": null,
        "Title": null,
        "Description": "Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements",
        "Url": "http://capec.mitre.org/data/definitions/208.html"
      },
      {
        "Id": "CAPEC-21",
        "Phase": null,
        "Title": null,
        "Description": "Exploitation of Trusted Identifiers",
        "Url": "http://capec.mitre.org/data/definitions/21.html"
      },
      {
        "Id": "CAPEC-31",
        "Phase": null,
        "Title": null,
        "Description": "Accessing/Intercepting/Modifying HTTP Cookies",
        "Url": "http://capec.mitre.org/data/definitions/31.html"
      },
      {
        "Id": "CAPEC-383",
        "Phase": null,
        "Title": null,
        "Description": "Harvesting Information via API Event Monitoring",
        "Url": "http://capec.mitre.org/data/definitions/383.html"
      },
      {
        "Id": "CAPEC-384",
        "Phase": null,
        "Title": null,
        "Description": "Application API Message Manipulation via Man-in-the-Middle",
        "Url": "http://capec.mitre.org/data/definitions/384.html"
      },
      {
        "Id": "CAPEC-385",
        "Phase": null,
        "Title": null,
        "Description": "Transaction or Event Tampering via Application API Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/385.html"
      },
      {
        "Id": "CAPEC-386",
        "Phase": null,
        "Title": null,
        "Description": "Application API Navigation Remapping",
        "Url": "http://capec.mitre.org/data/definitions/386.html"
      },
      {
        "Id": "CAPEC-387",
        "Phase": null,
        "Title": null,
        "Description": "Navigation Remapping To Propagate Malicious Content",
        "Url": "http://capec.mitre.org/data/definitions/387.html"
      },
      {
        "Id": "CAPEC-388",
        "Phase": null,
        "Title": null,
        "Description": "Application API Button Hijacking",
        "Url": "http://capec.mitre.org/data/definitions/388.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2006-6994",
        "Phase": null,
        "Title": "ASP program allows upload of .asp files by bypassing client-side checks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6994"
      },
      {
        "Id": "CVE-2007-0163",
        "Phase": null,
        "Title": "steganography products embed password information in the carrier file, which can be extracted from a modified client. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0163"
      },
      {
        "Id": "CVE-2007-0164",
        "Phase": null,
        "Title": "steganography products embed password information in the carrier file, which can be extracted from a modified client. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0164"
      },
      {
        "Id": "CVE-2007-0100",
        "Phase": null,
        "Title": "client allows server to modify client's configuration and overwrite arbitrary files. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0100"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Consider a product that consists of two or more processes or nodes that must interact closely, such as a client/server model. If the product uses protection schemes in the client in order to defend from attacks against the server, and the server does not use the same schemes, then an attacker could modify the client in a way that bypasses those schemes. This is a fundamental design flaw that is primary to many weaknesses. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-565",
      "CWE-603"
    ]
  },
  {
    "Id": "CWE-364",
    "Title": " Signal Handler Race Condition",
    "Description": "The software uses a signal handler that introduces a race condition. ",
    "ExtendedDescription": "Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the software state to be corrupted, possibly leading to a denial of service or even code execution. These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the \"regular\" code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered. There are several known behaviors related to signal handlers that have received the label of \"signal handler race condition\": Shared state (e.g. global data or static variables) that are accessible to both a signal handler and \"regular\" code Shared state between a signal handler and other signal handlers Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution. Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses. Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses. Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code: Avoiding shared state Using synchronization in the signal handler Using synchronization in the regular code Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity) ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Strategy:  Language Selection\r\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Language Selection\r\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Design signal handlers to only set flags, rather than perform complex functionality",
        "Description": "Design signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Only use reentrant functions within signal handlers",
        "Description": "Only use reentrant functions within signal handlers. Also, use sanity checks to ensure that state is consistent while performing asynchronous actions that affect the state of execution. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-1999-0035",
        "Phase": null,
        "Title": "Signal handler does not disable other signal handlers, allowing it to be interrupted, causing other functionality to access files/etc. with raised privileges ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0035"
      },
      {
        "Id": "CVE-2001-0905",
        "Phase": null,
        "Title": "Attacker can send a signal while another signal handler is already running, leading to crash or execution with root privileges ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0905"
      },
      {
        "Id": "CVE-2001-1349",
        "Phase": null,
        "Title": "unsafe calls to library functions from signal handler ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1349"
      },
      {
        "Id": "CVE-2004-0794",
        "Phase": null,
        "Title": "SIGURG can be used to remotely interrupt signal handler; other variants exist ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0794"
      },
      {
        "Id": "CVE-2004-2259",
        "Phase": null,
        "Title": "SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2259"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-432",
      "CWE-828",
      "CWE-831"
    ]
  },
  {
    "Id": "CWE-432",
    "Title": " Dangerous Signal Handler not Disabled During Sensitive Operations",
    "Description": "The application uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running. ",
    "ExtendedDescription": "During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Turn off dangerous handlers when performing sensitive operations",
        "Description": "Turn off dangerous handlers when performing sensitive operations. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-828",
    "Title": " Signal Handler with Functionality that is not Asynchronous-Safe",
    "Description": "The software defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted. ",
    "ExtendedDescription": "This can lead to an unexpected system state with a variety of potential consequences depending on context, including denial of service and code execution. Signal handlers are typically intended to interrupt normal functionality of a program, or even other signals, in order to notify the process of an event. When a signal handler uses global or static variables, or invokes functions that ultimately depend on such state or its associated metadata, then it could corrupt system state that is being used by normal functionality. This could subject the program to race conditions or other weaknesses that allow an attacker to cause the program state to be corrupted. While denial of service is frequently the consequence, in some cases this weakness could be leveraged for code execution. There are several different scenarios that introduce this issue: Invocation of non-reentrant functions from within the handler. One example is malloc(), which modifies internal global variables as it manages memory. Very few functions are actually reentrant. Code sequences (not necessarily function calls) contain non-atomic use of global variables, or associated metadata or structures, that can be accessed by other functionality of the program, including other signal handlers. Frequently, the same function is registered to handle multiple signals. The signal handler function is intended to run at most one time, but instead it can be invoked multiple times. This could happen by repeated delivery of the same signal, or by delivery of different signals that have the same handler function (CWE-831). Note that in some environments or contexts, it might be possible for the signal handler to be interrupted itself. If both a signal handler and the normal behavior of the software have to operate on the same set of state variables, and a signal is received in the middle of the normal execution's modifications of those variables, the variables may be in an incorrect or corrupt state during signal handler execution, and possibly still incorrect or corrupt upon return. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "Eliminate the usage of non-reentrant functionality inside of signal handlers",
        "Description": "Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls. \r\nNote: This will not always be possible and may require large portions of the software to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design. \r\nEffectiveness: High",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately",
        "Description": "Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the software. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2008-4109",
        "Phase": null,
        "Title": "Signal handler uses functions that ultimately call the unsafe syslog/malloc/s*printf, leading to denial of service via multiple login attempts ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4109"
      },
      {
        "Id": "CVE-2006-5051",
        "Phase": null,
        "Title": "Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition that leads to a double free (CWE-415). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5051"
      },
      {
        "Id": "CVE-2001-1349",
        "Phase": null,
        "Title": "unsafe calls to library functions from signal handler ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1349"
      },
      {
        "Id": "CVE-2004-0794",
        "Phase": null,
        "Title": "SIGURG can be used to remotely interrupt signal handler; other variants exist. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0794"
      },
      {
        "Id": "CVE-2004-2259",
        "Phase": null,
        "Title": "SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2259"
      },
      {
        "Id": "CVE-2002-1563",
        "Phase": null,
        "Title": "SIGCHLD not blocked in a daemon loop while counter is modified, causing counter to get out of sync. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1563"
      }
    ],
    "ModesOfIntroduction": null,
    "Children": [
      "CWE-479"
    ]
  },
  {
    "Id": "CWE-479",
    "Title": " Signal Handler Use of a Non-reentrant Function",
    "Description": "The program defines a signal handler that calls a non-reentrant function. ",
    "ExtendedDescription": "Non-reentrant functions are functions that cannot safely be called, interrupted, and then recalled before the first call has finished without resulting in memory corruption. This can lead to an unexpected system state and unpredictable results with a variety of potential consequences depending on context, including denial of service and code execution. Many functions are not reentrant, but some of them can result in the corruption of memory if they are used in a signal handler. The function call syslog() is an example of this. In order to perform its functionality, it allocates a small amount of memory as \"scratch space.\" If syslog() is suspended by a signal call and the signal handler calls syslog(), the memory used by both of these functions enters an undefined, and possibly, exploitable state. Implementations of malloc() and free() manage metadata in global structures in order to track which memory is allocated versus which memory is available, but they are non-reentrant. Simultaneous calls to these functions can cause corruption of the metadata. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness",
        "Description": "Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Design signal handlers to only set flags rather than perform complex functionality",
        "Description": "Design signal handlers to only set flags rather than perform complex functionality. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that non-reentrant functions are not found in signal handlers",
        "Description": "Ensure that non-reentrant functions are not found in signal handlers. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use sanity checks to reduce the timing window for exploitation of race conditions",
        "Description": "Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally. \r\nEffectiveness: Defense in Depth",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-0893",
        "Phase": null,
        "Title": "signal handler calls function that ultimately uses malloc() ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0893"
      },
      {
        "Id": "CVE-2004-2259",
        "Phase": null,
        "Title": "SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2259"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-831",
    "Title": " Signal Handler Function Associated with Multiple Signals",
    "Description": "The software defines a function that is used as a handler for more than one signal. ",
    "ExtendedDescription": "While sometimes intentional and safe, when the same function is used to handle multiple signals, a race condition could occur if the function uses any state outside of its local declaration, such as global variables or non-reentrant functions, or has any side effects. An attacker could send one signal that invokes the handler function; in many OSes, this will typically prevent the same signal from invoking the handler again, at least until the handler function has completed execution. However, the attacker could then send a different signal that is associated with the same handler function. This could interrupt the original handler function while it is still executing. If there is shared state, then the state could be corrupted. This can lead to a variety of potential consequences depending on context, including denial of service and code execution. Another rarely-explored possibility arises when the signal handler is only designed to be executed once (if at all). By sending multiple signals, an attacker could invoke the function more than once. This may generate extra, unintended side effects. A race condition might not even be necessary; the attacker could send one signal, wait until it is handled, then send the other signal. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-416",
    "Title": " Use After Free",
    "Description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. ",
    "ExtendedDescription": "The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for freeing the memory. In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process. If the newly allocated data chances to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Choose a language that provides automatic memory management",
        "Description": "Choose a language that provides automatic memory management. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When freeing pointers, be sure to set them to NULL once they are freed",
        "Description": "When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2010-4168",
        "Phase": null,
        "Title": "Use-after-free triggered by closing a connection while data is still being transmitted. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4168"
      },
      {
        "Id": "CVE-2010-2941",
        "Phase": null,
        "Title": "Improper allocation for invalid data leads to use-after-free. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2941"
      },
      {
        "Id": "CVE-2010-2547",
        "Phase": null,
        "Title": "certificate with a large number of Subject Alternate Names not properly handled in realloc, leading to use-after-free ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2547"
      },
      {
        "Id": "CVE-2010-1772",
        "Phase": null,
        "Title": "Timers are not disabled when a related object is deleted ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1772"
      },
      {
        "Id": "CVE-2010-1437",
        "Phase": null,
        "Title": "Access to a \"dead\" object that is being cleaned up ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1437"
      },
      {
        "Id": "CVE-2010-1208",
        "Phase": null,
        "Title": "object is deleted even with a non-zero reference count, and later accessed ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1208"
      },
      {
        "Id": "CVE-2010-0629",
        "Phase": null,
        "Title": "use-after-free involving request containing an invalid version number ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0629"
      },
      {
        "Id": "CVE-2010-0378",
        "Phase": null,
        "Title": "unload of an object that is currently being accessed by other functionality ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0378"
      },
      {
        "Id": "CVE-2010-0302",
        "Phase": null,
        "Title": "incorrectly tracking a reference count leads to use-after-free ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0302"
      },
      {
        "Id": "CVE-2010-0249",
        "Phase": null,
        "Title": "use-after-free related to use of uninitialized memory ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0249"
      },
      {
        "Id": "CVE-2010-0050",
        "Phase": null,
        "Title": "HTML document with incorrectly-nested tags ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0050"
      },
      {
        "Id": "CVE-2009-3658",
        "Phase": null,
        "Title": "Use after free in ActiveX object by providing a malformed argument to a method ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3658"
      },
      {
        "Id": "CVE-2009-3616",
        "Phase": null,
        "Title": "use-after-free by disconnecting during data transfer, or a message containing incorrect data types ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3616"
      },
      {
        "Id": "CVE-2009-3553",
        "Phase": null,
        "Title": "disconnect during a large data transfer causes incorrect reference count, leading to use-after-free ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3553"
      },
      {
        "Id": "CVE-2009-2416",
        "Phase": null,
        "Title": "use-after-free found by fuzzing ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2416"
      },
      {
        "Id": "CVE-2009-1837",
        "Phase": null,
        "Title": "Chain: race condition (CWE-362) from improper handling of a page transition in web client while an applet is loading (CWE-368) leads to use after free (CWE-416) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1837"
      },
      {
        "Id": "CVE-2009-0749",
        "Phase": null,
        "Title": "realloc generates new buffer and pointer, but previous pointer is still retained, leading to use after free ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0749"
      },
      {
        "Id": "CVE-2010-3328",
        "Phase": null,
        "Title": "Use-after-free in web browser, probably resultant from not initializing memory. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3328"
      },
      {
        "Id": "CVE-2008-5038",
        "Phase": null,
        "Title": "use-after-free when one thread accessed memory that was freed by another thread ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5038"
      },
      {
        "Id": "CVE-2008-0077",
        "Phase": null,
        "Title": "assignment of malformed values to certain properties triggers use after free ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0077"
      },
      {
        "Id": "CVE-2006-4434",
        "Phase": null,
        "Title": "mail server does not properly handle a long header. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4434"
      },
      {
        "Id": "CVE-2010-2753",
        "Phase": null,
        "Title": "chain: integer overflow leads to use-after-free ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2753"
      },
      {
        "Id": "CVE-2006-4997",
        "Phase": null,
        "Title": "freed pointer dereference ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4997"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-588",
    "Title": " Attempt to Access Child of a Non-structure Pointer",
    "Description": "Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "The choice could be made to use a language that is not susceptible to these issues",
        "Description": "The choice could be made to use a language that is not susceptible to these issues. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Review of type casting operations can identify locations where incompatible types are cast",
        "Description": "Review of type casting operations can identify locations where incompatible types are cast. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-184",
    "Title": " Incomplete List of Disallowed Inputs",
    "Description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses. ",
    "ExtendedDescription": "Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands. However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nDo not rely exclusively on detecting disallowed inputs",
        "Description": "Strategy:  Input Validation\r\nDo not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-120",
        "Phase": null,
        "Title": null,
        "Description": "Double Encoding",
        "Url": "http://capec.mitre.org/data/definitions/120.html"
      },
      {
        "Id": "CAPEC-15",
        "Phase": null,
        "Title": null,
        "Description": "Command Delimiters",
        "Url": "http://capec.mitre.org/data/definitions/15.html"
      },
      {
        "Id": "CAPEC-182",
        "Phase": null,
        "Title": null,
        "Description": "Flash Injection",
        "Url": "http://capec.mitre.org/data/definitions/182.html"
      },
      {
        "Id": "CAPEC-3",
        "Phase": null,
        "Title": null,
        "Description": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
        "Url": "http://capec.mitre.org/data/definitions/3.html"
      },
      {
        "Id": "CAPEC-43",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Multiple Input Interpretation Layers",
        "Url": "http://capec.mitre.org/data/definitions/43.html"
      },
      {
        "Id": "CAPEC-6",
        "Phase": null,
        "Title": null,
        "Description": "Argument Injection",
        "Url": "http://capec.mitre.org/data/definitions/6.html"
      },
      {
        "Id": "CAPEC-71",
        "Phase": null,
        "Title": null,
        "Description": "Using Unicode Encoding to Bypass Validation Logic",
        "Url": "http://capec.mitre.org/data/definitions/71.html"
      },
      {
        "Id": "CAPEC-73",
        "Phase": null,
        "Title": null,
        "Description": "User-Controlled Filename",
        "Url": "http://capec.mitre.org/data/definitions/73.html"
      },
      {
        "Id": "CAPEC-85",
        "Phase": null,
        "Title": null,
        "Description": "AJAX Fingerprinting",
        "Url": "http://capec.mitre.org/data/definitions/85.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2008-2309",
        "Phase": null,
        "Title": "product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2309"
      },
      {
        "Id": "CVE-2005-2782",
        "Phase": null,
        "Title": "PHP remote file inclusion in web application that filters \"http\" and \"https\" URLs, but not \"ftp\". ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2782"
      },
      {
        "Id": "CVE-2004-0542",
        "Phase": null,
        "Title": "Programming language does not filter certain shell metacharacters in Windows environment. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0542"
      },
      {
        "Id": "CVE-2004-0595",
        "Phase": null,
        "Title": "XSS filter doesn't filter null characters before looking for dangerous tags, which are ignored by web browsers. MIE and validate-before-cleanse. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0595"
      },
      {
        "Id": "CVE-2005-3287",
        "Phase": null,
        "Title": "Web-based mail product doesn't restrict dangerous extensions such as ASPX on a web server, even though others are prohibited. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3287"
      },
      {
        "Id": "CVE-2004-2351",
        "Phase": null,
        "Title": "Resultant XSS when only &lt;script&gt; and &lt;style&gt; are checked. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2351"
      },
      {
        "Id": "CVE-2005-2959",
        "Phase": null,
        "Title": "Privileged program does not clear sensitive environment variables that are used by bash. Overlaps multiple interpretation error. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2959"
      },
      {
        "Id": "CVE-2005-1824",
        "Phase": null,
        "Title": "SQL injection protection scheme does not quote the \"\\\" special character. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1824"
      },
      {
        "Id": "CVE-2005-2184",
        "Phase": null,
        "Title": "Detection of risky filename extensions prevents users from automatically executing .EXE files, but .LNK is accepted, allowing resultant Windows symbolic link. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2184"
      },
      {
        "Id": "CVE-2007-1343",
        "Phase": null,
        "Title": "Product uses list of protected variables, but accidentally omits one dangerous variable, allowing external modification ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1343"
      },
      {
        "Id": "CVE-2007-5727",
        "Phase": null,
        "Title": "Chain: product only removes SCRIPT tags (CWE-184), enabling XSS (CWE-79) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5727"
      },
      {
        "Id": "CVE-2006-4308",
        "Phase": null,
        "Title": "Chain: product only checks for use of \"javascript:\" tag (CWE-184), allowing XSS (CWE-79) using other tags ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4308"
      },
      {
        "Id": "CVE-2007-3572",
        "Phase": null,
        "Title": "Chain: OS command injection (CWE-78) enabled by using an unexpected character that is not explicitly disallowed (CWE-184) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3572"
      },
      {
        "Id": "CVE-2002-0661",
        "Phase": null,
        "Title": "\"\\\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0661"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Developers might begin to develop a list of bad inputs as a fast way to fix a particular weakness, instead of fixing the root cause. See [REF-141]. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "The design might rely solely on detection of malicious inputs as a protection mechanism. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-244",
    "Title": " Improper Clearing of Heap Memory Before Release ('Heap Inspection')",
    "Description": "Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory. ",
    "ExtendedDescription": "When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a \"heap inspection\" attack that reads the sensitive data using memory dumps or other methods. The realloc() function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-778",
    "Title": " Insufficient Logging",
    "Description": "When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it. ",
    "ExtendedDescription": "When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use a centralized logging mechanism that supports multiple levels of detail",
        "Description": "Use a centralized logging mechanism that supports multiple levels of detail. Ensure that all security-related successes and failures can be logged. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Be sure to set the level of logging appropriately in a production environment",
        "Description": "Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2008-4315",
        "Phase": null,
        "Title": "server does not log failed authentication attempts, making it easier for attackers to perform brute force password guessing without being detected ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4315"
      },
      {
        "Id": "CVE-2008-1203",
        "Phase": null,
        "Title": "admin interface does not log failed authentication attempts, making it easier for attackers to perform brute force password guessing without being detected ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1203"
      },
      {
        "Id": "CVE-2007-3730",
        "Phase": null,
        "Title": "default configuration for POP server does not log source IP or username for login attempts ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3730"
      },
      {
        "Id": "CVE-2007-1225",
        "Phase": null,
        "Title": "proxy does not log requests without \"http://\" in the URL, allowing web surfers to access restricted web content without detection ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1225"
      },
      {
        "Id": "CVE-2003-1566",
        "Phase": null,
        "Title": "web server does not log requests for a non-standard request type ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1566"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-222",
    "Title": " Truncation of Security-relevant Information",
    "Description": "The application truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-0585",
        "Phase": null,
        "Title": "Web browser truncates long sub-domains or paths, facilitating phishing. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0585"
      },
      {
        "Id": "CVE-2004-2032",
        "Phase": null,
        "Title": "Bypass URL filter via a long URL with a large number of trailing hex-encoded space characters. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2032"
      },
      {
        "Id": "CVE-2003-0412",
        "Phase": null,
        "Title": "Does not log complete URI of a long request (truncation). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0412"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-779",
    "Title": " Logging of Excessive Data",
    "Description": "The software logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack. ",
    "ExtendedDescription": "While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Suppress large numbers of duplicate log messages and replace them with periodic summaries",
        "Description": "Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states \"last message repeated X times\" when recording repeated events. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Support a maximum size for the log file that can be controlled by the administrator",
        "Description": "Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the software. This may result in a denial-of-service to legitimate software users, but it will prevent the software from adversely impacting the entire system. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Adjust configurations appropriately when software is transitioned from a debug state to production",
        "Description": "Adjust configurations appropriately when software is transitioned from a debug state to production. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2007-0421",
        "Phase": null,
        "Title": "server records a large amount of data to the server log when it receives malformed headers ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0421"
      },
      {
        "Id": "CVE-2002-1154",
        "Phase": null,
        "Title": "chain: application does not restrict access to front-end for updates, which allows attacker to fill the error log ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1154"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-224",
    "Title": " Obscured Security-relevant Information by Alternate Name",
    "Description": "The software records security-relevant information according to an alternate name of the affected entity, instead of the canonical name. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0725",
        "Phase": null,
        "Title": "Attacker performs malicious actions on a hard link to a file, obscuring the real target file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0725"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-319",
    "Title": " Cleartext Transmission of Sensitive Information",
    "Description": "The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. ",
    "ExtendedDescription": "Many communication channels can be \"sniffed\" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Encrypt the data with a reliable encryption scheme before transmitting",
        "Description": "Encrypt the data with a reliable encryption scheme before transmitting. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page",
        "Description": "When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session",
        "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols",
        "Description": "Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-102",
        "Phase": null,
        "Title": null,
        "Description": "Session Sidejacking",
        "Url": "http://capec.mitre.org/data/definitions/102.html"
      },
      {
        "Id": "CAPEC-117",
        "Phase": null,
        "Title": null,
        "Description": "Interception",
        "Url": "http://capec.mitre.org/data/definitions/117.html"
      },
      {
        "Id": "CAPEC-383",
        "Phase": null,
        "Title": null,
        "Description": "Harvesting Information via API Event Monitoring",
        "Url": "http://capec.mitre.org/data/definitions/383.html"
      },
      {
        "Id": "CAPEC-477",
        "Phase": null,
        "Title": null,
        "Description": "Signature Spoofing by Mixing Signed and Unsigned Content",
        "Url": "http://capec.mitre.org/data/definitions/477.html"
      },
      {
        "Id": "CAPEC-65",
        "Phase": null,
        "Title": null,
        "Description": "Sniff Application Code",
        "Url": "http://capec.mitre.org/data/definitions/65.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1949",
        "Phase": null,
        "Title": "Passwords transmitted in cleartext. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1949"
      },
      {
        "Id": "CVE-2008-4122",
        "Phase": null,
        "Title": "Chain: Use of HTTPS cookie without \"secure\" flag causes it to be transmitted across unencrypted HTTP. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4122"
      },
      {
        "Id": "CVE-2008-3289",
        "Phase": null,
        "Title": "Product sends password hash in cleartext in violation of intended policy. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3289"
      },
      {
        "Id": "CVE-2008-4390",
        "Phase": null,
        "Title": "Remote management feature sends sensitive information including passwords in cleartext. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4390"
      },
      {
        "Id": "CVE-2007-5626",
        "Phase": null,
        "Title": "Backup routine sends password in cleartext in email. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5626"
      },
      {
        "Id": "CVE-2004-1852",
        "Phase": null,
        "Title": "Product transmits Blowfish encryption key in cleartext. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1852"
      },
      {
        "Id": "CVE-2008-0374",
        "Phase": null,
        "Title": "Printer sends configuration information, including administrative password, in cleartext. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0374"
      },
      {
        "Id": "CVE-2007-4961",
        "Phase": null,
        "Title": "Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4961"
      },
      {
        "Id": "CVE-2007-4786",
        "Phase": null,
        "Title": "Product sends passwords in cleartext to a log server. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4786"
      },
      {
        "Id": "CVE-2005-3140",
        "Phase": null,
        "Title": "Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3140"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "System Configuration",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-5"
    ]
  },
  {
    "Id": "CWE-5",
    "Title": " J2EE Misconfiguration",
    "Description": "Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  System Configuration",
        "Title": "The application configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages",
        "Description": "The application configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-311",
    "Title": " Missing Encryption of Sensitive Data",
    "Description": "The software does not encrypt sensitive or critical information before storage or transmission. ",
    "ExtendedDescription": "The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Clearly specify which data or resources are valuable enough that they should be protected by encryption",
        "Description": "Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that encryption is properly integrated into the system design, including but not necessarily limited to: \r\n  Encryption that is needed to store or transmit private data of the users of the system  Encryption that is needed to protect the system itself from unauthorized disclosure or tampering   \r\nIdentify the separate needs and contexts for encryption: \r\n  One-way (i",
        "Description": "Ensure that encryption is properly integrated into the system design, including but not necessarily limited to: \r\n  Encryption that is needed to store or transmit private data of the users of the system  Encryption that is needed to protect the system itself from unauthorized disclosure or tampering   \r\nIdentify the separate needs and contexts for encryption: \r\n  One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the software) does not need to have access to a private key.  Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.   \r\nUsing threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7] ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nWhen there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data",
        "Description": "Strategy:  Libraries or Frameworks\r\nWhen there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis. \r\nFor example, US government systems require FIPS 140-2 certification. \r\nDo not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak. \r\nPeriodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267] ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "When using industry-approved techniques, use them correctly",
        "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nUse naming conventions and strong types to make it easier to spot when sensitive data is being used",
        "Description": "Strategy:  Attack Surface Reduction\r\nUse naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible. \r\nEffectiveness: Defense in Depth\r\nNote: This makes it easier to spot places in the code where data is being used that is unencrypted.",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-157",
        "Phase": null,
        "Title": null,
        "Description": "Sniffing Attacks",
        "Url": "http://capec.mitre.org/data/definitions/157.html"
      },
      {
        "Id": "CAPEC-158",
        "Phase": null,
        "Title": null,
        "Description": "Sniffing Network Traffic",
        "Url": "http://capec.mitre.org/data/definitions/158.html"
      },
      {
        "Id": "CAPEC-204",
        "Phase": null,
        "Title": null,
        "Description": "Lifting Sensitive Data Embedded in Cache",
        "Url": "http://capec.mitre.org/data/definitions/204.html"
      },
      {
        "Id": "CAPEC-31",
        "Phase": null,
        "Title": null,
        "Description": "Accessing/Intercepting/Modifying HTTP Cookies",
        "Url": "http://capec.mitre.org/data/definitions/31.html"
      },
      {
        "Id": "CAPEC-37",
        "Phase": null,
        "Title": null,
        "Description": "Retrieve Embedded Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/37.html"
      },
      {
        "Id": "CAPEC-383",
        "Phase": null,
        "Title": null,
        "Description": "Harvesting Information via API Event Monitoring",
        "Url": "http://capec.mitre.org/data/definitions/383.html"
      },
      {
        "Id": "CAPEC-384",
        "Phase": null,
        "Title": null,
        "Description": "Application API Message Manipulation via Man-in-the-Middle",
        "Url": "http://capec.mitre.org/data/definitions/384.html"
      },
      {
        "Id": "CAPEC-385",
        "Phase": null,
        "Title": null,
        "Description": "Transaction or Event Tampering via Application API Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/385.html"
      },
      {
        "Id": "CAPEC-386",
        "Phase": null,
        "Title": null,
        "Description": "Application API Navigation Remapping",
        "Url": "http://capec.mitre.org/data/definitions/386.html"
      },
      {
        "Id": "CAPEC-387",
        "Phase": null,
        "Title": null,
        "Description": "Navigation Remapping To Propagate Malicious Content",
        "Url": "http://capec.mitre.org/data/definitions/387.html"
      },
      {
        "Id": "CAPEC-388",
        "Phase": null,
        "Title": null,
        "Description": "Application API Button Hijacking",
        "Url": "http://capec.mitre.org/data/definitions/388.html"
      },
      {
        "Id": "CAPEC-477",
        "Phase": null,
        "Title": null,
        "Description": "Signature Spoofing by Mixing Signed and Unsigned Content",
        "Url": "http://capec.mitre.org/data/definitions/477.html"
      },
      {
        "Id": "CAPEC-609",
        "Phase": null,
        "Title": null,
        "Description": "Cellular Traffic Intercept",
        "Url": "http://capec.mitre.org/data/definitions/609.html"
      },
      {
        "Id": "CAPEC-65",
        "Phase": null,
        "Title": null,
        "Description": "Sniff Application Code",
        "Url": "http://capec.mitre.org/data/definitions/65.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-2272",
        "Phase": null,
        "Title": "password and username stored in cleartext in a cookie ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2272"
      },
      {
        "Id": "CVE-2009-1466",
        "Phase": null,
        "Title": "password stored in cleartext in a file with insecure permissions ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1466"
      },
      {
        "Id": "CVE-2009-0152",
        "Phase": null,
        "Title": "chat program disables SSL in some circumstances even when the user says to use SSL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0152"
      },
      {
        "Id": "CVE-2009-1603",
        "Phase": null,
        "Title": "Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1603"
      },
      {
        "Id": "CVE-2009-0964",
        "Phase": null,
        "Title": "storage of unencrypted passwords in a database ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0964"
      },
      {
        "Id": "CVE-2008-6157",
        "Phase": null,
        "Title": "storage of unencrypted passwords in a database ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6157"
      },
      {
        "Id": "CVE-2008-6828",
        "Phase": null,
        "Title": "product stores a password in cleartext in memory ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6828"
      },
      {
        "Id": "CVE-2008-1567",
        "Phase": null,
        "Title": "storage of a secret key in cleartext in a temporary file ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1567"
      },
      {
        "Id": "CVE-2008-0174",
        "Phase": null,
        "Title": "SCADA product uses HTTP Basic Authentication, which is not encrypted ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0174"
      },
      {
        "Id": "CVE-2007-5778",
        "Phase": null,
        "Title": "login credentials stored unencrypted in a registry key ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5778"
      },
      {
        "Id": "CVE-2002-1949",
        "Phase": null,
        "Title": "Passwords transmitted in cleartext. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1949"
      },
      {
        "Id": "CVE-2008-4122",
        "Phase": null,
        "Title": "Chain: Use of HTTPS cookie without \"secure\" flag causes it to be transmitted across unencrypted HTTP. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4122"
      },
      {
        "Id": "CVE-2008-3289",
        "Phase": null,
        "Title": "Product sends password hash in cleartext in violation of intended policy. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3289"
      },
      {
        "Id": "CVE-2008-4390",
        "Phase": null,
        "Title": "Remote management feature sends sensitive information including passwords in cleartext. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4390"
      },
      {
        "Id": "CVE-2007-5626",
        "Phase": null,
        "Title": "Backup routine sends password in cleartext in email. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5626"
      },
      {
        "Id": "CVE-2004-1852",
        "Phase": null,
        "Title": "Product transmits Blowfish encryption key in cleartext. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1852"
      },
      {
        "Id": "CVE-2008-0374",
        "Phase": null,
        "Title": "Printer sends configuration information, including administrative password, in cleartext. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0374"
      },
      {
        "Id": "CVE-2007-4961",
        "Phase": null,
        "Title": "Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4961"
      },
      {
        "Id": "CVE-2007-4786",
        "Phase": null,
        "Title": "Product sends passwords in cleartext to a log server. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4786"
      },
      {
        "Id": "CVE-2005-3140",
        "Phase": null,
        "Title": "Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3140"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-312",
      "CWE-319",
      "CWE-614"
    ]
  },
  {
    "Id": "CWE-312",
    "Title": " Cleartext Storage of Sensitive Information",
    "Description": "The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere. ",
    "ExtendedDescription": "Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-37",
        "Phase": null,
        "Title": null,
        "Description": "Retrieve Embedded Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/37.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-2272",
        "Phase": null,
        "Title": "password and username stored in cleartext in a cookie ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2272"
      },
      {
        "Id": "CVE-2009-1466",
        "Phase": null,
        "Title": "password stored in cleartext in a file with insecure permissions ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1466"
      },
      {
        "Id": "CVE-2009-0152",
        "Phase": null,
        "Title": "chat program disables SSL in some circumstances even when the user says to use SSL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0152"
      },
      {
        "Id": "CVE-2009-1603",
        "Phase": null,
        "Title": "Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1603"
      },
      {
        "Id": "CVE-2009-0964",
        "Phase": null,
        "Title": "storage of unencrypted passwords in a database ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0964"
      },
      {
        "Id": "CVE-2008-6157",
        "Phase": null,
        "Title": "storage of unencrypted passwords in a database ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6157"
      },
      {
        "Id": "CVE-2008-6828",
        "Phase": null,
        "Title": "product stores a password in cleartext in memory ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6828"
      },
      {
        "Id": "CVE-2008-1567",
        "Phase": null,
        "Title": "storage of a secret key in cleartext in a temporary file ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1567"
      },
      {
        "Id": "CVE-2008-0174",
        "Phase": null,
        "Title": "SCADA product uses HTTP Basic Authentication, which is not encrypted ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0174"
      },
      {
        "Id": "CVE-2007-5778",
        "Phase": null,
        "Title": "login credentials stored unencrypted in a registry key ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5778"
      },
      {
        "Id": "CVE-2001-1481",
        "Phase": null,
        "Title": "Plaintext credentials in world-readable file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1481"
      },
      {
        "Id": "CVE-2005-1828",
        "Phase": null,
        "Title": "Password in cleartext in config file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1828"
      },
      {
        "Id": "CVE-2005-2209",
        "Phase": null,
        "Title": "Password in cleartext in config file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2209"
      },
      {
        "Id": "CVE-2002-1696",
        "Phase": null,
        "Title": "Decrypted copy of a message written to disk given a combination of options and when user replies to an encrypted message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1696"
      },
      {
        "Id": "CVE-2004-2397",
        "Phase": null,
        "Title": "Plaintext storage of private key and passphrase in log file when user imports the key. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2397"
      },
      {
        "Id": "CVE-2002-1800",
        "Phase": null,
        "Title": "Admin password in plaintext in a cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1800"
      },
      {
        "Id": "CVE-2001-1537",
        "Phase": null,
        "Title": "Default configuration has cleartext usernames/passwords in cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1537"
      },
      {
        "Id": "CVE-2001-1536",
        "Phase": null,
        "Title": "Usernames/passwords in cleartext in cookies. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1536"
      },
      {
        "Id": "CVE-2005-2160",
        "Phase": null,
        "Title": "Authentication information stored in cleartext in a cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2160"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-313",
      "CWE-314",
      "CWE-315",
      "CWE-317",
      "CWE-318"
    ]
  },
  {
    "Id": "CWE-313",
    "Title": " Cleartext Storage in a File or on Disk",
    "Description": "The application stores sensitive information in cleartext in a file, or on disk. ",
    "ExtendedDescription": "The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2001-1481",
        "Phase": null,
        "Title": "Cleartext credentials in world-readable file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1481"
      },
      {
        "Id": "CVE-2005-1828",
        "Phase": null,
        "Title": "Password in cleartext in config file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1828"
      },
      {
        "Id": "CVE-2005-2209",
        "Phase": null,
        "Title": "Password in cleartext in config file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2209"
      },
      {
        "Id": "CVE-2002-1696",
        "Phase": null,
        "Title": "Decrypted copy of a message written to disk given a combination of options and when user replies to an encrypted message. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1696"
      },
      {
        "Id": "CVE-2004-2397",
        "Phase": null,
        "Title": "Cleartext storage of private key and passphrase in log file when user imports the key. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2397"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-314",
    "Title": " Cleartext Storage in the Registry",
    "Description": "The application stores sensitive information in cleartext in the registry. ",
    "ExtendedDescription": "Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-37",
        "Phase": null,
        "Title": null,
        "Description": "Retrieve Embedded Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/37.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2005-2227",
        "Phase": null,
        "Title": "Cleartext passwords in registry key. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2227"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-315",
    "Title": " Cleartext Storage of Sensitive Information in a Cookie",
    "Description": "The application stores sensitive information in cleartext in a cookie. ",
    "ExtendedDescription": "Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-31",
        "Phase": null,
        "Title": null,
        "Description": "Accessing/Intercepting/Modifying HTTP Cookies",
        "Url": "http://capec.mitre.org/data/definitions/31.html"
      },
      {
        "Id": "CAPEC-37",
        "Phase": null,
        "Title": null,
        "Description": "Retrieve Embedded Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/37.html"
      },
      {
        "Id": "CAPEC-39",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating Opaque Client-based Data Tokens",
        "Url": "http://capec.mitre.org/data/definitions/39.html"
      },
      {
        "Id": "CAPEC-74",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating State",
        "Url": "http://capec.mitre.org/data/definitions/74.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1800",
        "Phase": null,
        "Title": "Admin password in cleartext in a cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1800"
      },
      {
        "Id": "CVE-2001-1537",
        "Phase": null,
        "Title": "Default configuration has cleartext usernames/passwords in cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1537"
      },
      {
        "Id": "CVE-2001-1536",
        "Phase": null,
        "Title": "Usernames/passwords in cleartext in cookies. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1536"
      },
      {
        "Id": "CVE-2005-2160",
        "Phase": null,
        "Title": "Authentication information stored in cleartext in a cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2160"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-317",
    "Title": " Cleartext Storage of Sensitive Information in GUI",
    "Description": "The application stores sensitive information in cleartext within the GUI. ",
    "ExtendedDescription": "An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1848",
        "Phase": null,
        "Title": "Unencrypted passwords stored in GUI dialog may allow local users to access the passwords. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1848"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-318",
    "Title": " Cleartext Storage of Sensitive Information in Executable",
    "Description": "The application stores sensitive information in cleartext in an executable. ",
    "ExtendedDescription": "Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-37",
        "Phase": null,
        "Title": null,
        "Description": "Retrieve Embedded Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/37.html"
      },
      {
        "Id": "CAPEC-65",
        "Phase": null,
        "Title": null,
        "Description": "Sniff Application Code",
        "Url": "http://capec.mitre.org/data/definitions/65.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2005-1794",
        "Phase": null,
        "Title": "Product stores RSA private key in a DLL and uses it to sign a certificate, allowing spoofing of servers and MITM attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1794"
      },
      {
        "Id": "CVE-2001-1527",
        "Phase": null,
        "Title": "administration passwords in cleartext in executable ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1527"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-614",
    "Title": " Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
    "Description": "The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Always set the secure attribute when the cookie should sent via HTTPS only",
        "Description": "Always set the secure attribute when the cookie should sent via HTTPS only. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-102",
        "Phase": null,
        "Title": null,
        "Description": "Session Sidejacking",
        "Url": "http://capec.mitre.org/data/definitions/102.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2004-0462",
        "Phase": null,
        "Title": "A product does not set the Secure attribute for sensitive cookies in HTTPS sessions, which could cause the user agent to send those cookies in plaintext over an HTTP session with the product. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0462"
      },
      {
        "Id": "CVE-2008-3663",
        "Phase": null,
        "Title": "A product does not set the secure flag for the session cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3663"
      },
      {
        "Id": "CVE-2008-3662",
        "Phase": null,
        "Title": "A product does not set the secure flag for the session cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3662"
      },
      {
        "Id": "CVE-2008-0128",
        "Phase": null,
        "Title": "A product does not set the secure flag for a cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0128"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-243",
    "Title": " Creation of chroot Jail Without Changing Working Directory",
    "Description": "The program uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail. ",
    "ExtendedDescription": "Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called. ",
    "LikelyHood": "High",
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-226",
    "Title": " Sensitive Information in Resource Not Removed Before Reuse",
    "Description": "When a device releases a resource such as memory or a file for reuse by other entities, information contained in the resource is not fully cleared prior to reuse of the resource. ",
    "ExtendedDescription": "When resources are released, they can be made available for reuse. For example, after memory is used and released, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information. Even when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-37",
        "Phase": null,
        "Title": null,
        "Description": "Retrieve Embedded Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/37.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2003-0001",
        "Phase": null,
        "Title": "Ethernet NIC drivers do not pad frames with null bytes, leading to infoleak from malformed packets. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0001"
      },
      {
        "Id": "CVE-2003-0291",
        "Phase": null,
        "Title": "router does not clear information from DHCP packets that have been previously used ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0291"
      },
      {
        "Id": "CVE-2005-1406",
        "Phase": null,
        "Title": "Products do not fully clear memory buffers when less data is stored into the buffer than previous. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1406"
      },
      {
        "Id": "CVE-2005-1858",
        "Phase": null,
        "Title": "Products do not fully clear memory buffers when less data is stored into the buffer than previous. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1858"
      },
      {
        "Id": "CVE-2005-3180",
        "Phase": null,
        "Title": "Products do not fully clear memory buffers when less data is stored into the buffer than previous. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3180"
      },
      {
        "Id": "CVE-2005-3276",
        "Phase": null,
        "Title": "Product does not clear a data structure before writing to part of it, yielding information leak of previously used memory. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3276"
      },
      {
        "Id": "CVE-2002-2077",
        "Phase": null,
        "Title": "Memory not properly cleared before reuse. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2077"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-244",
      "CWE-1239",
      "CWE-1272",
      "CWE-1301"
    ]
  },
  {
    "Id": "CWE-1239",
    "Title": " Improper Zeroization of Hardware Register",
    "Description": "The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes. ",
    "ExtendedDescription": "Hardware logic operates on data stored in registers local to the hardware block. Most hardware IPs, including cryptographic accelerators, rely on registers to buffer I/O, store intermediate values, and interface with software. The result of this is that sensitive information, such as passwords or encryption keys, can exist in locations not transparent to the user of the hardware logic. When a different entity obtains access to the IP due to a change in operating mode or conditions, the new entity can extract information belonging to the previous user if no mechanisms are in place to clear register contents. It is important to clear information stored in the hardware if a physical attack on the product is detected, or if the user of the hardware block changes. The process of clearing register contents in a hardware IP is referred to as zeroization in standards for cryptographic hardware modules such as FIPS-140-2 [REF-267]. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time",
        "Description": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time. \r\nNote: Unfortunately, data disclosure can occur even after information has been overwritten/zeroized from the digital perspective. Physical characteristics of the memory can reveal the history of previously written data. For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree that even if the original data is erased it can still be recovered through physical characterization of the memory cells [REF-1055]. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-150",
        "Phase": null,
        "Title": null,
        "Description": "Collect Data from Common Resource Locations",
        "Url": "http://capec.mitre.org/data/definitions/150.html"
      },
      {
        "Id": "CAPEC-204",
        "Phase": null,
        "Title": null,
        "Description": "Lifting Sensitive Data Embedded in Cache",
        "Url": "http://capec.mitre.org/data/definitions/204.html"
      },
      {
        "Id": "CAPEC-37",
        "Phase": null,
        "Title": null,
        "Description": "Retrieve Embedded Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/37.html"
      },
      {
        "Id": "CAPEC-545",
        "Phase": null,
        "Title": null,
        "Description": "Pull Data from System Resources",
        "Url": "http://capec.mitre.org/data/definitions/545.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Lack of hardware mechanisms to zeroize or clear registers in the design or specification. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Mechanisms to zeroize and clear registers are in the design but implemented incorrectly. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "Hardware-provided zeroization mechanisms are not used appropriately by the IP user (ex. firmware), or data remanence issues are not taken into account. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1272",
    "Title": " Sensitive Information Uncleared Before Debug/Power State Transition",
    "Description": "Sensitive information may leak as a result of a debug or power state transition when information access restrictions change as a result of the transition. ",
    "ExtendedDescription": "A device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information make leak from the system. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "During state transitions, information not needed in the next state should be removed before the transition to the next state",
        "Description": "During state transitions, information not needed in the next state should be removed before the transition to the next state. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-150",
        "Phase": null,
        "Title": null,
        "Description": "Collect Data from Common Resource Locations",
        "Url": "http://capec.mitre.org/data/definitions/150.html"
      },
      {
        "Id": "CAPEC-37",
        "Phase": null,
        "Title": null,
        "Description": "Retrieve Embedded Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/37.html"
      },
      {
        "Id": "CAPEC-545",
        "Phase": null,
        "Title": null,
        "Description": "Pull Data from System Resources",
        "Url": "http://capec.mitre.org/data/definitions/545.html"
      },
      {
        "Id": "CAPEC-546",
        "Phase": null,
        "Title": null,
        "Description": "Probe Application Memory",
        "Url": "http://capec.mitre.org/data/definitions/546.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1301",
    "Title": " Insufficient or Incomplete Data Removal within Hardware Component",
    "Description": "The product's data removal process does not completely delete all data and potentially sensitive information within hardware components. ",
    "ExtendedDescription": "Physical properties of hardware devices, such as remanence of magnetic medial, residual charge of ROMs/RAMs, or screen burn-in may still retain sensitive data after a data removal process has taken place and power is removed. Recovering data after erasure or overwriting is possible due to a phenomenon called data remanence. For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree such that even after the original data is erased that data can still be recovered through physical characterization of the memory cells. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Apply blinding or masking techniques to implementations of cryptographic algorithms",
        "Description": "Apply blinding or masking techniques to implementations of cryptographic algorithms. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Alter the method of erasure, add protection of media, or destroy the media to protect the data",
        "Description": "Alter the method of erasure, add protection of media, or destroy the media to protect the data. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-212",
    "Title": " Improper Removal of Sensitive Information Before Storage or Transfer",
    "Description": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors. ",
    "ExtendedDescription": "Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing. For example, software that is used for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties",
        "Description": "Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn",
        "Description": "Strategy:  Separation of Privilege\r\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area. \r\nEnsure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nUse naming conventions and strong types to make it easier to spot when sensitive data is being used",
        "Description": "Strategy:  Attack Surface Reduction\r\nUse naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible. \r\nEffectiveness: Defense in Depth\r\nNote: This makes it easier to spot places in the code where data is being used that is unencrypted.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state",
        "Description": "Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-168",
        "Phase": null,
        "Title": null,
        "Description": "Windows ::DATA Alternate Data Stream",
        "Url": "http://capec.mitre.org/data/definitions/168.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2005-0406",
        "Phase": null,
        "Title": "Some image editors modify a JPEG image, but the original EXIF thumbnail image is left intact within the JPEG. (Also an interaction error). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0406"
      },
      {
        "Id": "CVE-2002-0704",
        "Phase": null,
        "Title": "NAT feature in firewall leaks internal IP addresses in ICMP error messages. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0704"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-226",
      "CWE-1258"
    ]
  },
  {
    "Id": "CWE-591",
    "Title": " Sensitive Data Storage in Improperly Locked Memory",
    "Description": "The application stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors. ",
    "ExtendedDescription": "On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock() function is only a stub and provides no protection. On POSIX systems the mlock() call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock() also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms",
        "Description": "Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Check return values to ensure locking operations are successful",
        "Description": "Check return values to ensure locking operations are successful. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-248",
    "Title": " Uncaught Exception",
    "Description": "An exception is thrown from a function, but it is not caught. ",
    "ExtendedDescription": "When an exception is not caught, it may cause the program to crash or expose sensitive information. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-600"
    ]
  },
  {
    "Id": "CWE-600",
    "Title": " Uncaught Exception in Servlet ",
    "Description": "The Servlet does not catch all exceptions, which may reveal sensitive debugging information. ",
    "ExtendedDescription": "When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Implement Exception blocks to handle all types of Exceptions",
        "Description": "Implement Exception blocks to handle all types of Exceptions. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-400",
    "Title": " Uncontrolled Resource Consumption",
    "Description": "The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources. ",
    "ExtendedDescription": "Limited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the software, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system. There are at least three distinct scenarios which can commonly lead to resource exhaustion: Lack of throttling for the number of allocated resources Losing all references to a resource before reaching the shutdown stage Not closing/returning a resource after processing Resource exhaustion problems are often result due to an incorrect implementation of the following situations: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for releasing the resource. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Design throttling mechanisms into the system architecture",
        "Description": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Mitigation of resource exhaustion attacks requires that the target system either: \r\n  recognizes the attack and denies that user further access for a given amount of time, or  uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed",
        "Description": "Mitigation of resource exhaustion attacks requires that the target system either: \r\n  recognizes the attack and denies that user further access for a given amount of time, or  uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.   \r\nThe first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question. \r\nThe second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that protocols have specific limits of scale placed on them",
        "Description": "Ensure that protocols have specific limits of scale placed on them. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that all failures in resource allocation place the system into a safe posture",
        "Description": "Ensure that all failures in resource allocation place the system into a safe posture. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-147",
        "Phase": null,
        "Title": null,
        "Description": "XML Ping of the Death",
        "Url": "http://capec.mitre.org/data/definitions/147.html"
      },
      {
        "Id": "CAPEC-197",
        "Phase": null,
        "Title": null,
        "Description": "XML Entity Expansion",
        "Url": "http://capec.mitre.org/data/definitions/197.html"
      },
      {
        "Id": "CAPEC-492",
        "Phase": null,
        "Title": null,
        "Description": "Regular Expression Exponential Blowup",
        "Url": "http://capec.mitre.org/data/definitions/492.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-2874",
        "Phase": null,
        "Title": "Product allows attackers to cause a crash via a large number of connections. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2874"
      },
      {
        "Id": "CVE-2009-1928",
        "Phase": null,
        "Title": "Malformed request triggers uncontrolled recursion, leading to stack exhaustion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1928"
      },
      {
        "Id": "CVE-2009-2858",
        "Phase": null,
        "Title": "Chain: memory leak (CWE-404) leads to resource exhaustion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2858"
      },
      {
        "Id": "CVE-2009-2726",
        "Phase": null,
        "Title": "Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2726"
      },
      {
        "Id": "CVE-2009-2540",
        "Phase": null,
        "Title": "Large integer value for a length property in an object causes a large amount of memory allocation. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2540"
      },
      {
        "Id": "CVE-2009-2299",
        "Phase": null,
        "Title": "Web application firewall consumes excessive memory when an HTTP request contains a large Content-Length value but no POST data. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2299"
      },
      {
        "Id": "CVE-2009-2054",
        "Phase": null,
        "Title": "Product allows exhaustion of file descriptors when processing a large number of TCP packets. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2054"
      },
      {
        "Id": "CVE-2008-5180",
        "Phase": null,
        "Title": "Communication product allows memory consumption with a large number of SIP requests, which cause many sessions to be created. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5180"
      },
      {
        "Id": "CVE-2008-2121",
        "Phase": null,
        "Title": "TCP implementation allows attackers to consume CPU and prevent new connections using a TCP SYN flood attack. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2121"
      },
      {
        "Id": "CVE-2008-2122",
        "Phase": null,
        "Title": "Port scan triggers CPU consumption with processes that attempt to read data from closed sockets. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2122"
      },
      {
        "Id": "CVE-2008-1700",
        "Phase": null,
        "Title": "Product allows attackers to cause a denial of service via a large number of directives, each of which opens a separate window. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1700"
      },
      {
        "Id": "CVE-2007-4103",
        "Phase": null,
        "Title": "Product allows resource exhaustion via a large number of calls that do not complete a 3-way handshake. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4103"
      },
      {
        "Id": "CVE-2006-1173",
        "Phase": null,
        "Title": "Mail server does not properly handle deeply nested multipart MIME messages, leading to stack exhaustion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1173"
      },
      {
        "Id": "CVE-2007-0897",
        "Phase": null,
        "Title": "Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0897"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-770",
      "CWE-771",
      "CWE-779",
      "CWE-920",
      "CWE-1235"
    ]
  },
  {
    "Id": "CWE-770",
    "Title": " Allocation of Resources Without Limits or Throttling",
    "Description": "The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor. ",
    "ExtendedDescription": "Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits",
        "Description": "Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Limit the amount of resources that are accessible to unprivileged users",
        "Description": "Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Design throttling mechanisms into the system architecture",
        "Description": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nAssume all input is malicious",
        "Description": "Strategy:  Input Validation\r\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. \r\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\" \r\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. \r\nNote: This will only be applicable to cases where user input can influence the size or frequency of resource allocations.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602",
        "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Mitigation of resource exhaustion attacks requires that the target system either: \r\n  recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays  uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed",
        "Description": "Mitigation of resource exhaustion attacks requires that the target system either: \r\n  recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays  uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.   \r\nThe first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question. \r\nThe second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that protocols have specific limits of scale placed on them",
        "Description": "Ensure that protocols have specific limits of scale placed on them. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "If the program must fail, ensure that it fails gracefully (fails closed)",
        "Description": "If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery. \r\nEnsure that all failures in resource allocation place the system into a safe posture. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Operation; Architecture and Design",
        "Title": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment",
        "Description": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. \r\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. \r\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-125",
        "Phase": null,
        "Title": null,
        "Description": "Flooding",
        "Url": "http://capec.mitre.org/data/definitions/125.html"
      },
      {
        "Id": "CAPEC-130",
        "Phase": null,
        "Title": null,
        "Description": "Excessive Allocation",
        "Url": "http://capec.mitre.org/data/definitions/130.html"
      },
      {
        "Id": "CAPEC-147",
        "Phase": null,
        "Title": null,
        "Description": "XML Ping of the Death",
        "Url": "http://capec.mitre.org/data/definitions/147.html"
      },
      {
        "Id": "CAPEC-197",
        "Phase": null,
        "Title": null,
        "Description": "XML Entity Expansion",
        "Url": "http://capec.mitre.org/data/definitions/197.html"
      },
      {
        "Id": "CAPEC-229",
        "Phase": null,
        "Title": null,
        "Description": "Serialized Data Parameter Blowup",
        "Url": "http://capec.mitre.org/data/definitions/229.html"
      },
      {
        "Id": "CAPEC-230",
        "Phase": null,
        "Title": null,
        "Description": "XML Nested Payloads",
        "Url": "http://capec.mitre.org/data/definitions/230.html"
      },
      {
        "Id": "CAPEC-231",
        "Phase": null,
        "Title": null,
        "Description": "Oversized Serialized Data Payloads",
        "Url": "http://capec.mitre.org/data/definitions/231.html"
      },
      {
        "Id": "CAPEC-469",
        "Phase": null,
        "Title": null,
        "Description": "HTTP DoS",
        "Url": "http://capec.mitre.org/data/definitions/469.html"
      },
      {
        "Id": "CAPEC-482",
        "Phase": null,
        "Title": null,
        "Description": "TCP Flood",
        "Url": "http://capec.mitre.org/data/definitions/482.html"
      },
      {
        "Id": "CAPEC-486",
        "Phase": null,
        "Title": null,
        "Description": "UDP Flood",
        "Url": "http://capec.mitre.org/data/definitions/486.html"
      },
      {
        "Id": "CAPEC-487",
        "Phase": null,
        "Title": null,
        "Description": "ICMP Flood",
        "Url": "http://capec.mitre.org/data/definitions/487.html"
      },
      {
        "Id": "CAPEC-488",
        "Phase": null,
        "Title": null,
        "Description": "HTTP Flood",
        "Url": "http://capec.mitre.org/data/definitions/488.html"
      },
      {
        "Id": "CAPEC-489",
        "Phase": null,
        "Title": null,
        "Description": "SSL Flood",
        "Url": "http://capec.mitre.org/data/definitions/489.html"
      },
      {
        "Id": "CAPEC-490",
        "Phase": null,
        "Title": null,
        "Description": "Amplification",
        "Url": "http://capec.mitre.org/data/definitions/490.html"
      },
      {
        "Id": "CAPEC-491",
        "Phase": null,
        "Title": null,
        "Description": "XML Quadratic Expansion",
        "Url": "http://capec.mitre.org/data/definitions/491.html"
      },
      {
        "Id": "CAPEC-493",
        "Phase": null,
        "Title": null,
        "Description": "SOAP Array Blowup",
        "Url": "http://capec.mitre.org/data/definitions/493.html"
      },
      {
        "Id": "CAPEC-494",
        "Phase": null,
        "Title": null,
        "Description": "TCP Fragmentation",
        "Url": "http://capec.mitre.org/data/definitions/494.html"
      },
      {
        "Id": "CAPEC-495",
        "Phase": null,
        "Title": null,
        "Description": "UDP Fragmentation",
        "Url": "http://capec.mitre.org/data/definitions/495.html"
      },
      {
        "Id": "CAPEC-496",
        "Phase": null,
        "Title": null,
        "Description": "ICMP Fragmentation",
        "Url": "http://capec.mitre.org/data/definitions/496.html"
      },
      {
        "Id": "CAPEC-528",
        "Phase": null,
        "Title": null,
        "Description": "XML Flood",
        "Url": "http://capec.mitre.org/data/definitions/528.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-4017",
        "Phase": null,
        "Title": "Language interpreter does not restrict the number of temporary files being created when handling a MIME request with a large number of parts.. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4017"
      },
      {
        "Id": "CVE-2009-2726",
        "Phase": null,
        "Title": "Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2726"
      },
      {
        "Id": "CVE-2009-2540",
        "Phase": null,
        "Title": "Large integer value for a length property in an object causes a large amount of memory allocation. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2540"
      },
      {
        "Id": "CVE-2009-2054",
        "Phase": null,
        "Title": "Product allows exhaustion of file descriptors when processing a large number of TCP packets. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2054"
      },
      {
        "Id": "CVE-2008-5180",
        "Phase": null,
        "Title": "Communication product allows memory consumption with a large number of SIP requests, which cause many sessions to be created. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5180"
      },
      {
        "Id": "CVE-2008-1700",
        "Phase": null,
        "Title": "Product allows attackers to cause a denial of service via a large number of directives, each of which opens a separate window. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1700"
      },
      {
        "Id": "CVE-2005-4650",
        "Phase": null,
        "Title": "CMS does not restrict the number of searches that can occur simultaneously, leading to resource exhaustion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4650"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "System Configuration",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-774",
      "CWE-789"
    ]
  },
  {
    "Id": "CWE-774",
    "Title": " Allocation of File Descriptors or Handles Without Limits or Throttling",
    "Description": "The software allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor. ",
    "ExtendedDescription": "This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Operation; Architecture and Design",
        "Title": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment",
        "Description": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. \r\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. \r\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-771",
    "Title": " Missing Reference to Active Allocated Resource",
    "Description": "The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed. ",
    "ExtendedDescription": "This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Operation; Architecture and Design",
        "Title": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment",
        "Description": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. \r\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. \r\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-773"
    ]
  },
  {
    "Id": "CWE-773",
    "Title": " Missing Reference to Active File Descriptor or Handle",
    "Description": "The software does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed. ",
    "ExtendedDescription": "This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Operation; Architecture and Design",
        "Title": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment",
        "Description": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. \r\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. \r\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-920",
    "Title": " Improper Restriction of Power Consumption",
    "Description": "The software operates in an environment in which power is a limited resource that cannot be automatically replenished, but the software does not properly restrict the amount of power that its operation consumes. ",
    "ExtendedDescription": "In environments such as embedded or mobile devices, power can be a limited resource such as a battery, which cannot be automatically replenished by the software itself, and the device might not always be directly attached to a reliable power source. If the software uses too much power too quickly, then this could cause the device (and subsequently, the software) to stop functioning until power is restored, or increase the financial burden on the device owner because of increased power costs. Normal operation of an application will consume power. However, in some cases, an attacker could cause the application to consume more power than intended, using components such as: Display CPU Disk I/O GPS Sound Microphone USB interface ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1235",
    "Title": " Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations",
    "Description": "The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations. ",
    "ExtendedDescription": "Languages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner. However, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support \"impedance mismatch\" between reference types and primitives. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters",
        "Description": "Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters. Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "The programmer may use boxed primitives when not strictly necessary. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-404",
    "Title": " Improper Resource Shutdown or Release",
    "Description": "The program does not release or incorrectly releases a resource before it is made available for re-use. ",
    "ExtendedDescription": "When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as accounting for all potential paths of expiration or invalidation, such as a set period of time or revocation. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Strategy:  Language Selection\r\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Language Selection\r\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function",
        "Description": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function. If you allocate memory that you intend to free upon completion of the function, you must be sure to free the memory at all exit points for that function including error conditions. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[]",
        "Description": "Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[]. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself",
        "Description": "When releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-125",
        "Phase": null,
        "Title": null,
        "Description": "Flooding",
        "Url": "http://capec.mitre.org/data/definitions/125.html"
      },
      {
        "Id": "CAPEC-130",
        "Phase": null,
        "Title": null,
        "Description": "Excessive Allocation",
        "Url": "http://capec.mitre.org/data/definitions/130.html"
      },
      {
        "Id": "CAPEC-131",
        "Phase": null,
        "Title": null,
        "Description": "Resource Leak Exposure",
        "Url": "http://capec.mitre.org/data/definitions/131.html"
      },
      {
        "Id": "CAPEC-494",
        "Phase": null,
        "Title": null,
        "Description": "TCP Fragmentation",
        "Url": "http://capec.mitre.org/data/definitions/494.html"
      },
      {
        "Id": "CAPEC-495",
        "Phase": null,
        "Title": null,
        "Description": "UDP Fragmentation",
        "Url": "http://capec.mitre.org/data/definitions/495.html"
      },
      {
        "Id": "CAPEC-496",
        "Phase": null,
        "Title": null,
        "Description": "ICMP Fragmentation",
        "Url": "http://capec.mitre.org/data/definitions/496.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-1999-1127",
        "Phase": null,
        "Title": "Does not shut down named pipe connections if malformed data is sent. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1127"
      },
      {
        "Id": "CVE-2001-0830",
        "Phase": null,
        "Title": "Sockets not properly closed when attacker repeatedly connects and disconnects from server. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0830"
      },
      {
        "Id": "CVE-2002-1372",
        "Phase": null,
        "Title": "Return values of file/socket operations not checked, allowing resultant consumption of file descriptors. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1372"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-262",
      "CWE-263",
      "CWE-299",
      "CWE-459",
      "CWE-763",
      "CWE-772",
      "CWE-1266"
    ]
  },
  {
    "Id": "CWE-459",
    "Title": " Incomplete Cleanup",
    "Description": "The software does not properly \"clean up\" and remove temporary or supporting resources after they have been used. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed",
        "Description": "Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2000-0552",
        "Phase": null,
        "Title": "World-readable temporary file not deleted after use. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0552"
      },
      {
        "Id": "CVE-2005-2293",
        "Phase": null,
        "Title": "Temporary file not deleted after use, leaking database usernames and passwords. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2293"
      },
      {
        "Id": "CVE-2002-0788",
        "Phase": null,
        "Title": "Interaction error creates a temporary file that can not be deleted due to strong permissions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0788"
      },
      {
        "Id": "CVE-2002-2066",
        "Phase": null,
        "Title": "Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2066"
      },
      {
        "Id": "CVE-2002-2067",
        "Phase": null,
        "Title": "Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2067"
      },
      {
        "Id": "CVE-2002-2068",
        "Phase": null,
        "Title": "Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2068"
      },
      {
        "Id": "CVE-2002-2069",
        "Phase": null,
        "Title": "Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2069"
      },
      {
        "Id": "CVE-2002-2070",
        "Phase": null,
        "Title": "Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2070"
      },
      {
        "Id": "CVE-2005-1744",
        "Phase": null,
        "Title": "Users not logged out when application is restarted after security-relevant changes were made. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1744"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-226",
      "CWE-460",
      "CWE-568"
    ]
  },
  {
    "Id": "CWE-460",
    "Title": " Improper Cleanup on Thrown Exception",
    "Description": "The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow. ",
    "ExtendedDescription": "Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program",
        "Description": "If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-568",
    "Title": " finalize() Method Without super.finalize()",
    "Description": "The software contains a finalize() method that does not call super.finalize(). ",
    "ExtendedDescription": "The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize(). ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Call the super",
        "Description": "Call the super.finalize() method. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use static analysis tools to spot such issues in your code",
        "Description": "Use static analysis tools to spot such issues in your code. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-763",
    "Title": " Release of Invalid Pointer or Reference",
    "Description": "The application attempts to return a memory resource to the system, but calls the wrong release function or calls the appropriate release function incorrectly. ",
    "ExtendedDescription": "This weakness can take several forms, such as: The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762). The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Only call matching memory management functions",
        "Description": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free(). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory",
        "Description": "When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, glibc in Linux provides protection against free of invalid pointers. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use a language that provides abstractions for memory allocation and deallocation",
        "Description": "Use a language that provides abstractions for memory allocation and deallocation. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use a tool that dynamically detects memory management problems, such as valgrind",
        "Description": "Use a tool that dynamically detects memory management problems, such as valgrind. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-761",
      "CWE-762"
    ]
  },
  {
    "Id": "CWE-761",
    "Title": " Free of Pointer not at Start of Buffer",
    "Description": "The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. ",
    "ExtendedDescription": "This can cause the application to crash, or in some cases, modify critical program variables or execute code. This weakness often occurs when the memory is allocated explicitly on the heap with one of the malloc() family functions and free() is called, but pointer arithmetic has caused the pointer to be in the interior or end of the buffer. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing",
        "Description": "When utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory",
        "Description": "When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, glibc in Linux provides protection against free of invalid pointers. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use a language that provides abstractions for memory allocation and deallocation",
        "Description": "Use a language that provides abstractions for memory allocation and deallocation. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use a tool that dynamically detects memory management problems, such as valgrind",
        "Description": "Use a tool that dynamically detects memory management problems, such as valgrind. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-762",
    "Title": " Mismatched Memory Management Routines",
    "Description": "The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. ",
    "ExtendedDescription": "This weakness can be generally described as mismatching memory management routines, such as: The memory was allocated on the stack (automatically), but it was deallocated using the memory management routine free() (CWE-590), which is intended for explicitly allocated heap memory. The memory was allocated explicitly using one set of memory management functions, and deallocated using a different set. For example, memory might be allocated with malloc() in C++ instead of the new operator, and then deallocated with the delete operator. When the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Only call matching memory management functions",
        "Description": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free(). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Libraries or Frameworks\r\nChoose a language or tool that provides automatic memory management, or makes manual memory management less error-prone",
        "Description": "Strategy:  Libraries or Frameworks\r\nChoose a language or tool that provides automatic memory management, or makes manual memory management less error-prone. \r\nFor example, glibc in Linux provides protection against free of invalid pointers. \r\nWhen using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391]. \r\nTo help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, glibc in Linux provides protection against free of invalid pointers. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use a language that provides abstractions for memory allocation and deallocation",
        "Description": "Use a language that provides abstractions for memory allocation and deallocation. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use a tool that dynamically detects memory management problems, such as valgrind",
        "Description": "Use a tool that dynamically detects memory management problems, such as valgrind. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-590"
    ]
  },
  {
    "Id": "CWE-590",
    "Title": " Free of Memory not on the Heap",
    "Description": "The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc(). ",
    "ExtendedDescription": "When free() is called on an invalid pointer, the program's memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free() to operate on controllable memory locations to modify critical program variables or execute code. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Only free pointers that you have called malloc on previously",
        "Description": "Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Before freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer",
        "Description": "Before freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, glibc in Linux provides protection against free of invalid pointers. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use a language that provides abstractions for memory allocation and deallocation",
        "Description": "Use a language that provides abstractions for memory allocation and deallocation. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Use a tool that dynamically detects memory management problems, such as valgrind",
        "Description": "Use a tool that dynamically detects memory management problems, such as valgrind. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-772",
    "Title": " Missing Release of Resource after Effective Lifetime",
    "Description": "The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed. ",
    "ExtendedDescription": "When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Requirements",
        "Title": "Strategy:  Language Selection\r\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid",
        "Description": "Strategy:  Language Selection\r\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. \r\nFor example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function",
        "Description": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Operation; Architecture and Design",
        "Title": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment",
        "Description": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. \r\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. \r\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-469",
        "Phase": null,
        "Title": null,
        "Description": "HTTP DoS",
        "Url": "http://capec.mitre.org/data/definitions/469.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2007-0897",
        "Phase": null,
        "Title": "Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0897"
      },
      {
        "Id": "CVE-2001-0830",
        "Phase": null,
        "Title": "Sockets not properly closed when attacker repeatedly connects and disconnects from server. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0830"
      },
      {
        "Id": "CVE-1999-1127",
        "Phase": null,
        "Title": "Does not shut down named pipe connections if malformed data is sent. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1127"
      },
      {
        "Id": "CVE-2009-2858",
        "Phase": null,
        "Title": "Chain: memory leak (CWE-404) leads to resource exhaustion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2858"
      },
      {
        "Id": "CVE-2009-2054",
        "Phase": null,
        "Title": "Product allows exhaustion of file descriptors when processing a large number of TCP packets. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2054"
      },
      {
        "Id": "CVE-2008-2122",
        "Phase": null,
        "Title": "Port scan triggers CPU consumption with processes that attempt to read data from closed sockets. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2122"
      },
      {
        "Id": "CVE-2007-4103",
        "Phase": null,
        "Title": "Product allows resource exhaustion via a large number of calls that do not complete a 3-way handshake. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4103"
      },
      {
        "Id": "CVE-2002-1372",
        "Phase": null,
        "Title": "Return values of file/socket operations not checked, allowing resultant consumption of file descriptors. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1372"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-401",
      "CWE-775",
      "CWE-1091"
    ]
  },
  {
    "Id": "CWE-401",
    "Title": " Missing Release of Memory after Effective Lifetime",
    "Description": "The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. ",
    "ExtendedDescription": "This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions. In some languages, developers are responsible for tracking memory allocation and releasing the memory. If there are no more pointers or references to the memory, then it can no longer be tracked and identified for release. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Libraries or Frameworks\r\nChoose a language or tool that provides automatic memory management, or makes manual memory management less error-prone",
        "Description": "Strategy:  Libraries or Frameworks\r\nChoose a language or tool that provides automatic memory management, or makes manual memory management less error-prone. \r\nFor example, glibc in Linux provides protection against free of invalid pointers. \r\nWhen using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391]. \r\nTo help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use an abstraction library to abstract away risky APIs",
        "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Build and Compilation",
        "Title": "The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code",
        "Description": "The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code. \r\nNote: This is not a complete solution as it is not 100% effective.",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-3119",
        "Phase": null,
        "Title": "Memory leak because function does not free() an element of a data structure. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3119"
      },
      {
        "Id": "CVE-2004-0427",
        "Phase": null,
        "Title": "Memory leak when counter variable is not decremented. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0427"
      },
      {
        "Id": "CVE-2002-0574",
        "Phase": null,
        "Title": "chain: reference count is not decremented, leading to memory leak in OS by sending ICMP packets. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0574"
      },
      {
        "Id": "CVE-2005-3181",
        "Phase": null,
        "Title": "Kernel uses wrong function to release a data structure, preventing data from being properly tracked by other code. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3181"
      },
      {
        "Id": "CVE-2004-0222",
        "Phase": null,
        "Title": "Memory leak via unknown manipulations as part of protocol test suite. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0222"
      },
      {
        "Id": "CVE-2001-0136",
        "Phase": null,
        "Title": "Memory leak via a series of the same command. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0136"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Memory leaks have two common and sometimes overlapping causes: Error conditions and other exceptional circumstances Confusion over which part of the program is responsible for freeing the memory ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-775",
    "Title": " Missing Release of File Descriptor or Handle after Effective Lifetime",
    "Description": "The software does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed. ",
    "ExtendedDescription": "When a file descriptor or handle is not released after use (typically by explicitly closing it), attackers can cause a denial of service by consuming all available file descriptors/handles, or otherwise preventing other system processes from obtaining their own file descriptors/handles. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Operation; Architecture and Design",
        "Title": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment",
        "Description": "Strategy:  Resource Limitation\r\nUse resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems. \r\nWhen the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users. \r\nEnsure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703). ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2007-0897",
        "Phase": null,
        "Title": "Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0897"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1091",
    "Title": " Use of Object without Invoking Destructor Method",
    "Description": "The software contains a method that accesses an object but does not later invoke the element's associated finalize/destructor method. ",
    "ExtendedDescription": "This issue can make the software perform more slowly by retaining memory and/or other resources longer than necessary. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-1266",
    "Title": " Improper Scrubbing of Sensitive Data from Decommissioned Device",
    "Description": "The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect. ",
    "ExtendedDescription": "When a product is decommissioned - i.e., taken out of service - best practices or regulatory requirements may require the administrator to remove or overwrite sensitive data first, i.e. \"scrubbing.\" Improper scrubbing of sensitive data from a decommissioned device leaves that data vulnerable to acquisition by a malicious actor. Sensitive data may include, but is not limited to, device/manufacturer proprietary information, user/device credentials, network configurations, and other forms of sensitive data. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase",
        "Description": "Functionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Policy",
        "Title": "The manufacturer should describe the location(s) where sensitive data is stored and the policies and procedures for its removal",
        "Description": "The manufacturer should describe the location(s) where sensitive data is stored and the policies and procedures for its removal. This information may be conveyed, for example, in an Administrators Guide or a Statement of Volatility. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If the capability to wipe sensitive data isn't built-in, the manufacturer may need to provide a utility to scrub sensitive data from storage if that data is located in a place which is non-accessible by the administrator",
        "Description": "If the capability to wipe sensitive data isn't built-in, the manufacturer may need to provide a utility to scrub sensitive data from storage if that data is located in a place which is non-accessible by the administrator. One example of this could be when sensitive data is stored on an EEPROM for which there is no user/admin interface provided by the system. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-150",
        "Phase": null,
        "Title": null,
        "Description": "Collect Data from Common Resource Locations",
        "Url": "http://capec.mitre.org/data/definitions/150.html"
      },
      {
        "Id": "CAPEC-37",
        "Phase": null,
        "Title": null,
        "Description": "Retrieve Embedded Sensitive Data",
        "Url": "http://capec.mitre.org/data/definitions/37.html"
      },
      {
        "Id": "CAPEC-545",
        "Phase": null,
        "Title": null,
        "Description": "Pull Data from System Resources",
        "Url": "http://capec.mitre.org/data/definitions/545.html"
      },
      {
        "Id": "CAPEC-546",
        "Phase": null,
        "Title": null,
        "Description": "Probe Application Memory",
        "Url": "http://capec.mitre.org/data/definitions/546.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Policy",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-691",
    "Title": " Insufficient Control Flow Management",
    "Description": "The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-29",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/29.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-94",
      "CWE-362",
      "CWE-430",
      "CWE-431",
      "CWE-623",
      "CWE-662",
      "CWE-670",
      "CWE-674",
      "CWE-696",
      "CWE-705",
      "CWE-749",
      "CWE-768",
      "CWE-799",
      "CWE-834",
      "CWE-841",
      "CWE-1265",
      "CWE-1281"
    ]
  },
  {
    "Id": "CWE-362",
    "Title": " Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "Description": "The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently. ",
    "ExtendedDescription": "This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider. A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc. A race condition violates these properties, which are closely related: Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution. Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource. A race condition exists when an \"interfering code sequence\" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single \"x++\" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x). The interfering code sequence could be \"trusted\" or \"untrusted.\" A trusted interfering code sequence occurs within the program; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable program. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "In languages that support it, use synchronization primitives",
        "Description": "In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use thread-safe capabilities such as the data access abstraction in Spring",
        "Description": "Use thread-safe capabilities such as the data access abstraction in Spring. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring",
        "Description": "Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring. \r\nAdditionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When using multithreading and operating on shared variables, only use thread-safe functions",
        "Description": "When using multithreading and operating on shared variables, only use thread-safe functions. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use atomic operations on shared variables",
        "Description": "Use atomic operations on shared variables. Be wary of innocent-looking constructs such as \"x++\". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412",
        "Description": "Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization",
        "Description": "Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop",
        "Description": "Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering",
        "Description": "Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Operation",
        "Title": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]",
        "Description": "Strategy:  Environment Hardening\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-26",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/26.html"
      },
      {
        "Id": "CAPEC-29",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/29.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2019-18827",
        "Phase": null,
        "Title": "chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18827"
      },
      {
        "Id": "CVE-2008-5044",
        "Phase": null,
        "Title": "Race condition leading to a crash by calling a hook removal procedure while other activities are occurring at the same time. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5044"
      },
      {
        "Id": "CVE-2008-2958",
        "Phase": null,
        "Title": "chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2958"
      },
      {
        "Id": "CVE-2008-1570",
        "Phase": null,
        "Title": "chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1570"
      },
      {
        "Id": "CVE-2008-0058",
        "Phase": null,
        "Title": "Unsynchronized caching operation enables a race condition that causes messages to be sent to a deallocated object. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0058"
      },
      {
        "Id": "CVE-2008-0379",
        "Phase": null,
        "Title": "Race condition during initialization triggers a buffer overflow. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0379"
      },
      {
        "Id": "CVE-2007-6599",
        "Phase": null,
        "Title": "Daemon crash by quickly performing operations and undoing them, which eventually leads to an operation that does not acquire a lock. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6599"
      },
      {
        "Id": "CVE-2007-6180",
        "Phase": null,
        "Title": "chain: race condition triggers NULL pointer dereference ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6180"
      },
      {
        "Id": "CVE-2007-5794",
        "Phase": null,
        "Title": "Race condition in library function could cause data to be sent to the wrong process. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5794"
      },
      {
        "Id": "CVE-2007-3970",
        "Phase": null,
        "Title": "Race condition in file parser leads to heap corruption. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3970"
      },
      {
        "Id": "CVE-2008-5021",
        "Phase": null,
        "Title": "chain: race condition allows attacker to access an object while it is still being initialized, causing software to access uninitialized memory. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5021"
      },
      {
        "Id": "CVE-2009-4895",
        "Phase": null,
        "Title": "chain: race condition for an argument value, possibly resulting in NULL dereference ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4895"
      },
      {
        "Id": "CVE-2009-3547",
        "Phase": null,
        "Title": "chain: race condition might allow resource to be released before operating on it, leading to NULL dereference ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3547"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-364",
      "CWE-366",
      "CWE-367",
      "CWE-368",
      "CWE-421",
      "CWE-689",
      "CWE-1223",
      "CWE-1298"
    ]
  },
  {
    "Id": "CWE-366",
    "Title": " Race Condition within a Thread",
    "Description": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined. ",
    "ExtendedDescription": null,
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use locking functionality",
        "Description": "Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Create resource-locking sanity checks",
        "Description": "Create resource-locking sanity checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-26",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/26.html"
      },
      {
        "Id": "CAPEC-29",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/29.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-367",
    "Title": " Time-of-check Time-of-use (TOCTOU) Race Condition",
    "Description": "The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state. ",
    "ExtendedDescription": "This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use",
        "Description": "The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement",
        "Description": "When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Limit the interleaving of operations on files from multiple processes",
        "Description": "Limit the interleaving of operations on files from multiple processes. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Implementation; Architecture and Design",
        "Title": "If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource",
        "Description": "If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Recheck the resource after the use call to verify that the action was taken appropriately",
        "Description": "Recheck the resource after the use call to verify that the action was taken appropriately. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Ensure that some environmental locking mechanism can be used to protect resources effectively",
        "Description": "Ensure that some environmental locking mechanism can be used to protect resources effectively. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use",
        "Description": "Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-27",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions via Symbolic Links",
        "Url": "http://capec.mitre.org/data/definitions/27.html"
      },
      {
        "Id": "CAPEC-29",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/29.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2003-0813",
        "Phase": null,
        "Title": "A multi-threaded race condition allows remote attackers to cause a denial of service (crash or reboot) by causing two threads to process the same RPC request, which causes one thread to use memory after it has been freed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0813"
      },
      {
        "Id": "CVE-2004-0594",
        "Phase": null,
        "Title": "PHP flaw allows remote attackers to execute arbitrary code by aborting execution before the initialization of key data structures is complete. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0594"
      },
      {
        "Id": "CVE-2008-2958",
        "Phase": null,
        "Title": "chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2958"
      },
      {
        "Id": "CVE-2008-1570",
        "Phase": null,
        "Title": "chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1570"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-363",
      "CWE-365"
    ]
  },
  {
    "Id": "CWE-363",
    "Title": " Race Condition Enabling Link Following",
    "Description": "The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file. ",
    "ExtendedDescription": "While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the software to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-26",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/26.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-365",
    "Title": " Race Condition in Switch",
    "Description": "The code contains a switch statement in which the switched variable can be modified while the switch is still executing, resulting in unexpected behavior. ",
    "ExtendedDescription": "This issue is particularly important in the case of switch statements that involve fall-through style case statements - i.e., those which do not end with break. If the variable being tested by the switch changes in the course of execution, this could change the intended logic of the switch so much that it places the process in a contradictory state and in some cases could even result in memory corruption. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Variables that may be subject to race conditions should be locked before the switch statement starts and only unlocked after the statement ends",
        "Description": "Variables that may be subject to race conditions should be locked before the switch statement starts and only unlocked after the statement ends. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-368",
    "Title": " Context Switching Race Condition",
    "Description": "A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch. ",
    "ExtendedDescription": "This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-26",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/26.html"
      },
      {
        "Id": "CAPEC-29",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/29.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-1837",
        "Phase": null,
        "Title": "Chain: race condition (CWE-362) from improper handling of a page transition in web client while an applet is loading (CWE-368) leads to use after free (CWE-416) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1837"
      },
      {
        "Id": "CVE-2004-2260",
        "Phase": null,
        "Title": "Browser updates address bar as soon as user clicks on a link instead of when the page has loaded, allowing spoofing by redirecting to another page using onUnload method. ** this is one example of the role of \"hooks\" and context switches, and should be captured somehow - also a race condition of sorts ** ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2260"
      },
      {
        "Id": "CVE-2004-0191",
        "Phase": null,
        "Title": "XSS when web browser executes Javascript events in the context of a new page while it's being loaded, allowing interaction with previous page in different domain. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0191"
      },
      {
        "Id": "CVE-2004-2491",
        "Phase": null,
        "Title": "Web browser fills in address bar of clicked-on link before page has been loaded, and doesn't update afterward. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2491"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-689",
    "Title": " Permission Race Condition During Resource Copy",
    "Description": "The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-26",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/26.html"
      },
      {
        "Id": "CAPEC-27",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions via Symbolic Links",
        "Url": "http://capec.mitre.org/data/definitions/27.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2002-0760",
        "Phase": null,
        "Title": "Archive extractor decompresses files with world-readable permissions, then later sets permissions to what the archive specified. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0760"
      },
      {
        "Id": "CVE-2005-2174",
        "Phase": null,
        "Title": "Product inserts a new object into database before setting the object's permissions, introducing a race condition. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2174"
      },
      {
        "Id": "CVE-2006-5214",
        "Phase": null,
        "Title": "Error file has weak permissions before a chmod is performed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5214"
      },
      {
        "Id": "CVE-2005-2475",
        "Phase": null,
        "Title": "Archive permissions issue using hard link. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2475"
      },
      {
        "Id": "CVE-2003-0265",
        "Phase": null,
        "Title": "Database product creates files world-writable before initializing the setuid bits, leading to modification of executables. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0265"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Common examples occur in file archive extraction, in which the product begins the extraction with insecure default permissions, then only sets the final permissions (as specified in the archive) once the copy is complete. The larger the archive, the larger the timing window for the race condition. This weakness has also occurred in some operating system utilities that perform copies of deeply nested directories containing a large number of files. This weakness can occur in any type of functionality that involves copying objects or resources in a multi-user environment, including at the application level. For example, a document management system might allow a user to copy a private document, but if it does not set the new copy to be private as soon as the copy begins, then other users might be able to view the document while the copy is still taking place. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1223",
    "Title": " Race Condition for Write-Once Attributes",
    "Description": "A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue. ",
    "ExtendedDescription": "Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings. Implementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration",
        "Description": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros",
        "Description": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-26",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/26.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "This weakness can appear in designs that use register write-once attributes with two or more software/firmware modules with varying levels of trust executing in parallel. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1298",
    "Title": " Hardware Logic Contains Race Conditions",
    "Description": "A race condition in the hardware logic results in undermining security guarantees of the system. ",
    "ExtendedDescription": "A race condition in logic circuits typically occurs when a logic gate gets inputs from signals that have traversed different paths while originating from the same source. Such inputs to the gate can change at slightly different times in response to a change in the source signal. This results in a timing error or a glitch (temporary or permanent) that causes the output to change to an unwanted state before settling back to the desired state. If such timing errors occur in access control logic or finite state machines that are implemented in security sensitive flows, an attacker might exploit them to circumvent existing protections. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Adopting design practices that encourage designers to recognize and eliminate race conditions, such as Karnaugh maps, could result in the decrease in occurrences of race conditions",
        "Description": "Adopting design practices that encourage designers to recognize and eliminate race conditions, such as Karnaugh maps, could result in the decrease in occurrences of race conditions. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Logic redundancy can be implemented along security critical paths to prevent race conditions",
        "Description": "Logic redundancy can be implemented along security critical paths to prevent race conditions. To avoid metastability, it is a good practice in general to default to a secure state in which access is not given to untrusted agents. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-430",
    "Title": " Deployment of Wrong Handler",
    "Description": "The wrong \"handler\" is assigned to process an object. ",
    "ExtendedDescription": "An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically \"determining\" type of the object even if it is contradictory to an explicitly specified type. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Perform a type check before interpreting an object",
        "Description": "Perform a type check before interpreting an object. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Reject any inconsistent types, such as a file with a ",
        "Description": "Reject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-11",
        "Phase": null,
        "Title": null,
        "Description": "Cause Web Server Misclassification",
        "Url": "http://capec.mitre.org/data/definitions/11.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2001-0004",
        "Phase": null,
        "Title": "Source code disclosure via manipulated file extension that causes parsing by wrong DLL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0004"
      },
      {
        "Id": "CVE-2002-0025",
        "Phase": null,
        "Title": "Web browser does not properly handle the Content-Type header field, causing a different application to process the document. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0025"
      },
      {
        "Id": "CVE-2000-1052",
        "Phase": null,
        "Title": "Source code disclosure by directly invoking a servlet. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1052"
      },
      {
        "Id": "CVE-2002-1742",
        "Phase": null,
        "Title": "Arbitrary Perl functions can be loaded by calling a non-existent function that activates a handler. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1742"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-431",
    "Title": " Missing Handler",
    "Description": "A handler is not available or implemented. ",
    "ExtendedDescription": "When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Handle all possible situations (e",
        "Description": "Handle all possible situations (e.g. error condition). ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If an operation can throw an Exception, implement a handler for that specific exception",
        "Description": "If an operation can throw an Exception, implement a handler for that specific exception. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-662",
    "Title": " Improper Synchronization",
    "Description": "The software utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes. ",
    "ExtendedDescription": "Synchronization refers to a variety of behaviors and mechanisms that allow two or more independently-operating processes or threads to ensure that they operate on shared resources in predictable ways that do not interfere with each other. Some shared resource operations cannot be executed atomically; that is, multiple steps must be guaranteed to execute sequentially, without any interference by other processes. Synchronization mechanisms vary widely, but they may include locking, mutexes, and semaphores. When a multi-step operation on a shared resource cannot be guaranteed to execute independent of interference, then the resulting behavior can be unpredictable. Improper synchronization could lead to data or memory corruption, denial of service, etc. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use industry standard APIs to synchronize your code",
        "Description": "Use industry standard APIs to synchronize your code. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-25",
        "Phase": null,
        "Title": null,
        "Description": "Forced Deadlock",
        "Url": "http://capec.mitre.org/data/definitions/25.html"
      },
      {
        "Id": "CAPEC-26",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/26.html"
      },
      {
        "Id": "CAPEC-27",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions via Symbolic Links",
        "Url": "http://capec.mitre.org/data/definitions/27.html"
      },
      {
        "Id": "CAPEC-29",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/29.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-663",
      "CWE-667",
      "CWE-820",
      "CWE-821",
      "CWE-1058"
    ]
  },
  {
    "Id": "CWE-663",
    "Title": " Use of a Non-reentrant Function in a Concurrent Context",
    "Description": "The software calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use reentrant functions if available",
        "Description": "Use reentrant functions if available. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Add synchronization to your non-reentrant function",
        "Description": "Add synchronization to your non-reentrant function. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "In Java, use the ReentrantLock Class",
        "Description": "In Java, use the ReentrantLock Class. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-29",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/29.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2001-1349",
        "Phase": null,
        "Title": "unsafe calls to library functions from signal handler ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1349"
      },
      {
        "Id": "CVE-2004-2259",
        "Phase": null,
        "Title": "SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2259"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-479",
      "CWE-558"
    ]
  },
  {
    "Id": "CWE-558",
    "Title": " Use of getlogin() in Multithreaded Application",
    "Description": "The application uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values. ",
    "ExtendedDescription": "The getlogin() function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Using names for security purposes is not advised",
        "Description": "Using names for security purposes is not advised. Names are easy to forge and can have overlapping user IDs, potentially causing confusion or impersonation. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username",
        "Description": "Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-667",
    "Title": " Improper Locking",
    "Description": "The software does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors. ",
    "ExtendedDescription": "Locking is a type of synchronization behavior that ensures that multiple independently-operating processes or threads do not interfere with each other when accessing the same resource. All processes/threads are expected to follow the same steps for locking. If these steps are not followed precisely - or if no locking is done at all - then another process/thread could modify the shared resource in a way that is not visible or predictable to the original process. This can lead to data or memory corruption, denial of service, etc. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Libraries or Frameworks\r\nUse industry standard APIs to implement locking mechanism",
        "Description": "Strategy:  Libraries or Frameworks\r\nUse industry standard APIs to implement locking mechanism. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-25",
        "Phase": null,
        "Title": null,
        "Description": "Forced Deadlock",
        "Url": "http://capec.mitre.org/data/definitions/25.html"
      },
      {
        "Id": "CAPEC-26",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions",
        "Url": "http://capec.mitre.org/data/definitions/26.html"
      },
      {
        "Id": "CAPEC-27",
        "Phase": null,
        "Title": null,
        "Description": "Leveraging Race Conditions via Symbolic Links",
        "Url": "http://capec.mitre.org/data/definitions/27.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-0935",
        "Phase": null,
        "Title": "Attacker provides invalid address to a memory-reading function, causing a mutex to be unlocked twice ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0935"
      },
      {
        "Id": "CVE-2010-4210",
        "Phase": null,
        "Title": "function in OS kernel unlocks a mutex that was not previously locked, causing a panic or overwrite of arbitrary memory. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4210"
      },
      {
        "Id": "CVE-2008-4302",
        "Phase": null,
        "Title": "Chain: OS kernel does not properly handle a failure of a function call (CWE-755), leading to an unlock of a resource that was not locked (CWE-832), with resultant crash. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4302"
      },
      {
        "Id": "CVE-2009-1243",
        "Phase": null,
        "Title": "OS kernel performs an unlock in some incorrect circumstances, leading to panic. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1243"
      },
      {
        "Id": "CVE-2009-2857",
        "Phase": null,
        "Title": "OS deadlock ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2857"
      },
      {
        "Id": "CVE-2009-1961",
        "Phase": null,
        "Title": "OS deadlock involving 3 separate functions ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1961"
      },
      {
        "Id": "CVE-2009-2699",
        "Phase": null,
        "Title": "deadlock in library ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2699"
      },
      {
        "Id": "CVE-2009-4272",
        "Phase": null,
        "Title": "deadlock triggered by packets that force collisions in a routing table ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4272"
      },
      {
        "Id": "CVE-2002-1850",
        "Phase": null,
        "Title": "read/write deadlock between web server and script ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1850"
      },
      {
        "Id": "CVE-2004-0174",
        "Phase": null,
        "Title": "web server deadlock involving multiple listening connections ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0174"
      },
      {
        "Id": "CVE-2009-1388",
        "Phase": null,
        "Title": "multiple simultaneous calls to the same function trigger deadlock. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1388"
      },
      {
        "Id": "CVE-2006-5158",
        "Phase": null,
        "Title": "chain: other weakness leads to NULL pointer dereference (CWE-476) or deadlock (CWE-833). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5158"
      },
      {
        "Id": "CVE-2006-4342",
        "Phase": null,
        "Title": "deadlock when an operation is performed on a resource while it is being removed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4342"
      },
      {
        "Id": "CVE-2006-2374",
        "Phase": null,
        "Title": "Deadlock in device driver triggered by using file handle of a related device. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2374"
      },
      {
        "Id": "CVE-2006-2275",
        "Phase": null,
        "Title": "Deadlock when large number of small messages cannot be processed quickly enough. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2275"
      },
      {
        "Id": "CVE-2005-3847",
        "Phase": null,
        "Title": "OS kernel has deadlock triggered by a signal during a core dump. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3847"
      },
      {
        "Id": "CVE-2005-3106",
        "Phase": null,
        "Title": "Race condition leads to deadlock. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3106"
      },
      {
        "Id": "CVE-2005-2456",
        "Phase": null,
        "Title": "Chain: array index error (CWE-129) leads to deadlock (CWE-833) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2456"
      },
      {
        "Id": "CVE-2001-0682",
        "Phase": null,
        "Title": "Program can not execute when attacker obtains a mutex. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0682"
      },
      {
        "Id": "CVE-2002-1914",
        "Phase": null,
        "Title": "Program can not execute when attacker obtains a lock on a critical output file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1914"
      },
      {
        "Id": "CVE-2002-1915",
        "Phase": null,
        "Title": "Program can not execute when attacker obtains a lock on a critical output file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1915"
      },
      {
        "Id": "CVE-2002-0051",
        "Phase": null,
        "Title": "Critical file can be opened with exclusive read access by user, preventing application of security policy. Possibly related to improper permissions, large-window race condition. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0051"
      },
      {
        "Id": "CVE-2000-0338",
        "Phase": null,
        "Title": "Chain: predictable file names used for locking, allowing attacker to create the lock beforehand. Resultant from permissions and randomness. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0338"
      },
      {
        "Id": "CVE-2000-1198",
        "Phase": null,
        "Title": "Chain: Lock files with predictable names. Resultant from randomness. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1198"
      },
      {
        "Id": "CVE-2002-1869",
        "Phase": null,
        "Title": "Product does not check if it can write to a log file, allowing attackers to avoid logging by accessing the file using an exclusive lock. Overlaps unchecked error condition. This is not quite CWE-412, but close. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1869"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-412",
      "CWE-413",
      "CWE-414",
      "CWE-609",
      "CWE-764",
      "CWE-765",
      "CWE-832",
      "CWE-833",
      "CWE-1232",
      "CWE-1233",
      "CWE-1234"
    ]
  },
  {
    "Id": "CWE-412",
    "Title": " Unrestricted Externally Accessible Lock",
    "Description": "The software properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control. ",
    "ExtendedDescription": "This prevents the software from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Use any access control that is offered by the functionality that is offering the lock",
        "Description": "Use any access control that is offered by the functionality that is offering the lock. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Use unpredictable names or identifiers for the locks",
        "Description": "Use unpredictable names or identifiers for the locks. This might not always be possible or feasible. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Consider modifying your code to use non-blocking synchronization methods",
        "Description": "Consider modifying your code to use non-blocking synchronization methods. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-25",
        "Phase": null,
        "Title": null,
        "Description": "Forced Deadlock",
        "Url": "http://capec.mitre.org/data/definitions/25.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2001-0682",
        "Phase": null,
        "Title": "Program can not execute when attacker obtains a mutex. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0682"
      },
      {
        "Id": "CVE-2002-1914",
        "Phase": null,
        "Title": "Program can not execute when attacker obtains a lock on a critical output file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1914"
      },
      {
        "Id": "CVE-2002-1915",
        "Phase": null,
        "Title": "Program can not execute when attacker obtains a lock on a critical output file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1915"
      },
      {
        "Id": "CVE-2002-0051",
        "Phase": null,
        "Title": "Critical file can be opened with exclusive read access by user, preventing application of security policy. Possibly related to improper permissions, large-window race condition. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0051"
      },
      {
        "Id": "CVE-2000-0338",
        "Phase": null,
        "Title": "Chain: predictable file names used for locking, allowing attacker to create the lock beforehand. Resultant from permissions and randomness. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0338"
      },
      {
        "Id": "CVE-2000-1198",
        "Phase": null,
        "Title": "Chain: Lock files with predictable names. Resultant from randomness. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1198"
      },
      {
        "Id": "CVE-2002-1869",
        "Phase": null,
        "Title": "Product does not check if it can write to a log file, allowing attackers to avoid logging by accessing the file using an exclusive lock. Overlaps unchecked error condition. This is not quite CWE-412, but close. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1869"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-413",
    "Title": " Improper Resource Locking",
    "Description": "The software does not lock or does not correctly lock a resource when the software must have exclusive access to the resource. ",
    "ExtendedDescription": "When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the software. This might violate the software's assumption that the resource will not change, potentially leading to unexpected behaviors. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use a non-conflicting privilege scheme",
        "Description": "Use a non-conflicting privilege scheme. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Use synchronization when locking a resource",
        "Description": "Use synchronization when locking a resource. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-591"
    ]
  },
  {
    "Id": "CWE-414",
    "Title": " Missing Lock Check",
    "Description": "A product does not check to see if a lock is present before performing sensitive operations on a resource. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Implement a reliable lock mechanism",
        "Description": "Implement a reliable lock mechanism. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-1056",
        "Phase": null,
        "Title": "Product does not properly check if a lock is present, allowing other attackers to access functionality. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1056"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-609",
    "Title": " Double-Checked Locking",
    "Description": "The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient. ",
    "ExtendedDescription": "Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1",
        "Description": "While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-764",
    "Title": " Multiple Locks of a Critical Resource",
    "Description": "The software locks a critical resource more times than intended, leading to an unexpected state in the system. ",
    "ExtendedDescription": "When software is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412). In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks",
        "Description": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-765",
    "Title": " Multiple Unlocks of a Critical Resource",
    "Description": "The software unlocks a critical resource more times than intended, leading to an unexpected state in the system. ",
    "ExtendedDescription": "When software is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks",
        "Description": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2009-0935",
        "Phase": null,
        "Title": "Attacker provides invalid address to a memory-reading function, causing a mutex to be unlocked twice ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0935"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-832",
    "Title": " Unlock of a Resource that is not Locked",
    "Description": "The software attempts to unlock a resource that is not locked. ",
    "ExtendedDescription": "Depending on the locking functionality, an unlock of a non-locked resource might cause memory corruption or other modification to the resource (or its associated metadata that is used for tracking locks). ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2010-4210",
        "Phase": null,
        "Title": "function in OS kernel unlocks a mutex that was not previously locked, causing a panic or overwrite of arbitrary memory. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4210"
      },
      {
        "Id": "CVE-2008-4302",
        "Phase": null,
        "Title": "Chain: OS kernel does not properly handle a failure of a function call (CWE-755), leading to an unlock of a resource that was not locked (CWE-832), with resultant crash. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4302"
      },
      {
        "Id": "CVE-2009-1243",
        "Phase": null,
        "Title": "OS kernel performs an unlock in some incorrect circumstances, leading to panic. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1243"
      }
    ],
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-833",
    "Title": " Deadlock",
    "Description": "The software contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-25",
        "Phase": null,
        "Title": null,
        "Description": "Forced Deadlock",
        "Url": "http://capec.mitre.org/data/definitions/25.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2009-2857",
        "Phase": null,
        "Title": "OS deadlock ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2857"
      },
      {
        "Id": "CVE-2009-1961",
        "Phase": null,
        "Title": "OS deadlock involving 3 separate functions ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1961"
      },
      {
        "Id": "CVE-2009-2699",
        "Phase": null,
        "Title": "deadlock in library ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2699"
      },
      {
        "Id": "CVE-2009-4272",
        "Phase": null,
        "Title": "deadlock triggered by packets that force collisions in a routing table ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4272"
      },
      {
        "Id": "CVE-2002-1850",
        "Phase": null,
        "Title": "read/write deadlock between web server and script ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1850"
      },
      {
        "Id": "CVE-2004-0174",
        "Phase": null,
        "Title": "web server deadlock involving multiple listening connections ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0174"
      },
      {
        "Id": "CVE-2009-1388",
        "Phase": null,
        "Title": "multiple simultaneous calls to the same function trigger deadlock. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1388"
      },
      {
        "Id": "CVE-2006-5158",
        "Phase": null,
        "Title": "chain: other weakness leads to NULL pointer dereference (CWE-476) or deadlock (CWE-833). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5158"
      },
      {
        "Id": "CVE-2006-4342",
        "Phase": null,
        "Title": "deadlock when an operation is performed on a resource while it is being removed. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4342"
      },
      {
        "Id": "CVE-2006-2374",
        "Phase": null,
        "Title": "Deadlock in device driver triggered by using file handle of a related device. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2374"
      },
      {
        "Id": "CVE-2006-2275",
        "Phase": null,
        "Title": "Deadlock when large number of small messages cannot be processed quickly enough. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2275"
      },
      {
        "Id": "CVE-2005-3847",
        "Phase": null,
        "Title": "OS kernel has deadlock triggered by a signal during a core dump. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3847"
      },
      {
        "Id": "CVE-2005-3106",
        "Phase": null,
        "Title": "Race condition leads to deadlock. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3106"
      },
      {
        "Id": "CVE-2005-2456",
        "Phase": null,
        "Title": "Chain: array index error (CWE-129) leads to deadlock (CWE-833) ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2456"
      }
    ],
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-1232",
    "Title": " Improper Lock Behavior After Power State Transition",
    "Description": "Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable. ",
    "ExtendedDescription": "Devices may allow device configuration controls which need to be programmed after device power reset via a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This action is commonly implemented using a programmable lock bit, which, when set, disables writes to a protected set of registers or address regions. After a power state transition, the lock bit is set to unlocked. Until the Some common weaknesses that can exist in such a protection scheme is that the lock gets cleared, the values of the protected registers get reset, or the lock become programmable. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation; Testing",
        "Title": " Security Lock bit protections should be reviewed for behavior across supported power state transitions",
        "Description": " Security Lock bit protections should be reviewed for behavior across supported power state transitions.  Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing including testing across power transitions.  \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-166",
        "Phase": null,
        "Title": null,
        "Description": "Force the System to Reset Values",
        "Url": "http://capec.mitre.org/data/definitions/166.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1233",
    "Title": " Improper Hardware Lock Protection for Security Sensitive Controls",
    "Description": "The product implements a register lock bit protection feature that permits security sensitive controls to modify the protected configuration. ",
    "ExtendedDescription": "Integrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If any system registers/controls that can modify the protected configuration are not write-protected by the lock, they can then be leveraged by software to modify the protected configuration. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation; Testing",
        "Title": " Security lock bit protections must be reviewed for design inconsistency and common weaknesses",
        "Description": " Security lock bit protections must be reviewed for design inconsistency and common weaknesses.  Security lock bit protections must be reviewed common weaknesses.  Security lock programming flow and lock properties must be tested in pre-si, post-si testing.  ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-176",
        "Phase": null,
        "Title": null,
        "Description": "Configuration/Environment Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/176.html"
      },
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1234",
    "Title": " Hardware Internal or Debug Modes Allow Override of Locks",
    "Description": "System configuration protection may be bypassed during debug mode. ",
    "ExtendedDescription": "Device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set, disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If debug features supported by hardware or internal modes/system states are supported in the hardware design, modification of the lock protection may be allowed allowing access and modification of configuration information. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation; Testing",
        "Title": " Security Lock bit protections should be reviewed for any bypass/override modes supported",
        "Description": " Security Lock bit protections should be reviewed for any bypass/override modes supported.  Any supported override modes either should be removed or protected using authenticated debug modes.  Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing.  \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-176",
        "Phase": null,
        "Title": null,
        "Description": "Configuration/Environment Manipulation",
        "Url": "http://capec.mitre.org/data/definitions/176.html"
      },
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-820",
    "Title": " Missing Synchronization",
    "Description": "The software utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource. ",
    "ExtendedDescription": "If access to a shared resource is not synchronized, then the resource may not be in a state that is expected by the software. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
      "CWE-543",
      "CWE-567",
      "CWE-1096"
    ]
  },
  {
    "Id": "CWE-543",
    "Title": " Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
    "Description": "The software uses the singleton pattern when creating a resource within a multithreaded environment. ",
    "ExtendedDescription": "The use of a singleton pattern may not be thread-safe. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use the Thread-Specific Storage Pattern",
        "Description": "Use the Thread-Specific Storage Pattern. See References. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Do not use member fields to store information in the Servlet",
        "Description": "Do not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety",
        "Description": "Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209). \r\nEffectiveness: Limited",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-567",
    "Title": " Unsynchronized Access to Shared Data in a Multithreaded Context",
    "Description": "The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes. ",
    "ExtendedDescription": "Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable. Note that this weakness is not unique to servlets. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Remove the use of static variables used between servlets",
        "Description": "Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-25",
        "Phase": null,
        "Title": null,
        "Description": "Forced Deadlock",
        "Url": "http://capec.mitre.org/data/definitions/25.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1096",
    "Title": " Singleton Class Instance Creation without Proper Locking or Synchronization",
    "Description": "The software implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once. ",
    "ExtendedDescription": "This issue can prevent the software from running reliably, e.g. by making the instantiation process non-thread-safe and introducing deadlock (CWE-833) or livelock conditions. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-821",
    "Title": " Incorrect Synchronization",
    "Description": "The software utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource. ",
    "ExtendedDescription": "If access to a shared resource is not correctly synchronized, then the resource may not be in a state that is expected by the software. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
      "CWE-572",
      "CWE-574",
      "CWE-1088",
      "CWE-1264"
    ]
  },
  {
    "Id": "CWE-572",
    "Title": " Call to Thread run() instead of start()",
    "Description": "The program calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee. ",
    "ExtendedDescription": "In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use the start() method instead of the run() method",
        "Description": "Use the start() method instead of the run() method. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-574",
    "Title": " EJB Bad Practices",
    "Description": "The program violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives. ",
    "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: \"An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances.\" The specification justifies this requirement in the following way: \"This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs.\" ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Do not use Synchronization Primitives when writing EJBs",
        "Description": "Do not use Synchronization Primitives when writing EJBs. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1088",
    "Title": " Synchronous Access of Remote Resource without Timeout",
    "Description": "The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite. ",
    "ExtendedDescription": "This issue can prevent the software from running reliably, since an outage for the remote resource can cause the software to hang. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-1264",
    "Title": " Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
    "Description": "The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete. ",
    "ExtendedDescription": "Many high-performance on-chip bus protocols and processor data-paths employ separate channels for control and data to increase parallelism and maximize throughput. Bugs in the hardware logic that handle errors and security checks can make it possible for data to be forwarded before the completion of the security checks. If the data can propagate to a location in the hardware observable to an attacker, loss of data confidentiality can occur. 'Meltdown' is a concrete example of how de-synchronization between data and permissions checking logic can violate confidentiality requirements. Data loaded from a page marked as privileged was returned to the cpu regardless of current privilege level for performance reasons. The assumption was that the cpu could later remove all traces of this data during the handling of the illegal memory access exception, but this assumption was proven false as traces of the secret data were not removed from the microarchitectural state. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows",
        "Description": "Thoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-233",
        "Phase": null,
        "Title": null,
        "Description": "Privilege Escalation",
        "Url": "http://capec.mitre.org/data/definitions/233.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2017-5754",
        "Phase": null,
        "Title": "Systems with microprocessors utilizing speculative execution and indirect branch prediction may allow unauthorized disclosure of information to an attacker with local user access via a side-channel analysis of the data cache. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5754"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "The weakness can be introduced in the data transfer or bus protocol itself or in the implementation. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1058",
    "Title": " Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element",
    "Description": "The code contains a function or method that operates in a multi-threaded environment but owns an unsafe non-final static storable or member data element. ",
    "ExtendedDescription": "This issue can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-670",
    "Title": " Always-Incorrect Control Flow Implementation",
    "Description": "The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated. ",
    "ExtendedDescription": "This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces (CWE-483), then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "This issue typically appears in rarely-tested code, since the \"always-incorrect\" nature will be detected as a bug during normal usage. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-480",
      "CWE-483",
      "CWE-484",
      "CWE-617",
      "CWE-698",
      "CWE-783"
    ]
  },
  {
    "Id": "CWE-480",
    "Title": " Use of Incorrect Operator",
    "Description": "The programmer accidentally uses the wrong operator, which changes the application logic in security-relevant ways. ",
    "ExtendedDescription": "These types of errors are generally the result of a typo. ",
    "LikelyHood": "Low",
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-481",
      "CWE-482",
      "CWE-597"
    ]
  },
  {
    "Id": "CWE-481",
    "Title": " Assigning instead of Comparing",
    "Description": "The code uses an operator for assignment when the intention was to perform a comparison. ",
    "ExtendedDescription": "In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Many IDEs and static analysis products will detect this problem",
        "Description": "Many IDEs and static analysis products will detect this problem. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Place constants on the left",
        "Description": "Place constants on the left. If one attempts to assign a constant with a variable, the compiler will of course produce an error. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-482",
    "Title": " Comparing instead of Assigning",
    "Description": "The code uses an operator for comparison when the intention was to perform an assignment. ",
    "ExtendedDescription": "In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Many IDEs and static analysis products will detect this problem",
        "Description": "Many IDEs and static analysis products will detect this problem. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "This bug primarily originates from a typo. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-597",
    "Title": " Use of Wrong Operator in String Comparison",
    "Description": "The product uses the wrong operator when comparing a string, such as using \"==\" when the equals() method should be used instead. ",
    "ExtendedDescription": "In Java, using == or != to compare two strings for equality actually compares two objects for equality, not their values. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, it could be leveraged to affect program security. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Use equals() to compare strings",
        "Description": "Use equals() to compare strings. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-483",
    "Title": " Incorrect Block Delimitation",
    "Description": "The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error. ",
    "ExtendedDescription": "In some languages, braces (or other delimiters) are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Always use explicit block delimitation and use static-analysis technologies to enforce this practice",
        "Description": "Always use explicit block delimitation and use static-analysis technologies to enforce this practice. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2014-1266",
        "Phase": null,
        "Title": "incorrect indentation of \"goto\" statement makes it more difficult to detect an incorrect goto (Apple's \"goto fail\") ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1266"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-484",
    "Title": " Omitted Break Statement in Switch",
    "Description": "The program omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition. ",
    "ExtendedDescription": "This can lead to critical code executing in situations where it should not. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided",
        "Description": "Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "The functionality of omitting a break statement could be clarified with an if statement",
        "Description": "The functionality of omitting a break statement could be clarified with an if statement. This method is much safer. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-617",
    "Title": " Reachable Assertion",
    "Description": "The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. ",
    "ExtendedDescription": "While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service. For example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Make sensitive open/close operation non reachable by directly user-controlled data (e",
        "Description": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources) ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Strategy:  Input Validation\r\nPerform input validation on user data",
        "Description": "Strategy:  Input Validation\r\nPerform input validation on user data. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2006-6767",
        "Phase": null,
        "Title": "FTP server allows remote attackers to cause a denial of service (daemon abort) via crafted commands which trigger an assertion failure. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6767"
      },
      {
        "Id": "CVE-2006-6811",
        "Phase": null,
        "Title": "Chat client allows remote attackers to cause a denial of service (crash) via a long message string when connecting to a server, which causes an assertion failure. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6811"
      },
      {
        "Id": "CVE-2006-5779",
        "Phase": null,
        "Title": "Product allows remote attackers to cause a denial of service (daemon crash) via LDAP BIND requests with long authcid names, which triggers an assertion failure. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5779"
      },
      {
        "Id": "CVE-2006-4095",
        "Phase": null,
        "Title": "Product allows remote attackers to cause a denial of service (crash) via certain queries, which cause an assertion failure. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4095"
      },
      {
        "Id": "CVE-2006-4574",
        "Phase": null,
        "Title": "Chain: security monitoring product has an off-by-one error that leads to unexpected length values, triggering an assertion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4574"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-698",
    "Title": " Execution After Redirect (EAR)",
    "Description": "The web application sends a redirect to another location, but instead of exiting, it executes additional code. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2013-1402",
        "Phase": null,
        "Title": "Execution-after-redirect allows access to application configuration details. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1402"
      },
      {
        "Id": "CVE-2009-1936",
        "Phase": null,
        "Title": "chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1936"
      },
      {
        "Id": "CVE-2007-2713",
        "Phase": null,
        "Title": "Remote attackers can obtain access to administrator functionality through EAR. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2713"
      },
      {
        "Id": "CVE-2007-4932",
        "Phase": null,
        "Title": "Remote attackers can obtain access to administrator functionality through EAR. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4932"
      },
      {
        "Id": "CVE-2007-5578",
        "Phase": null,
        "Title": "Bypass of authentication step through EAR. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5578"
      },
      {
        "Id": "CVE-2007-2713",
        "Phase": null,
        "Title": "Chain: Execution after redirect triggers eval injection. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2713"
      },
      {
        "Id": "CVE-2007-6652",
        "Phase": null,
        "Title": "chain: execution after redirect allows non-administrator to perform static code injection. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6652"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-783",
    "Title": " Operator Precedence Logic Error",
    "Description": "The program uses an expression in which operator precedence causes incorrect logic to be used. ",
    "ExtendedDescription": "While often just a bug, operator precedence logic errors can have serious consequences if they are used in security-critical code, such as making an authentication decision. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Regularly wrap sub-expressions in parentheses, especially in security-critical code",
        "Description": "Regularly wrap sub-expressions in parentheses, especially in security-critical code. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2008-2516",
        "Phase": null,
        "Title": "Authentication module allows authentication bypass because it uses \"(x = call(args) == SUCCESS)\" instead of \"((x = call(args)) == SUCCESS)\". ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2516"
      },
      {
        "Id": "CVE-2008-0599",
        "Phase": null,
        "Title": "Chain: Language interpreter calculates wrong buffer size (CWE-131) by using \"size = ptr ? X : Y\" instead of \"size = (ptr ? X : Y)\" expression. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0599"
      },
      {
        "Id": "CVE-2001-1155",
        "Phase": null,
        "Title": "Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1155"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Logic errors related to operator precedence may cause problems even during normal operation, so they are probably discovered quickly during the testing phase. If testing is incomplete or there is a strong reliance on manual review of the code, then these errors may not be discovered before the software is deployed. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-674",
    "Title": " Uncontrolled Recursion",
    "Description": "The product does not properly control the amount of recursion that takes place, which consumes excessive resources, such as allocated memory or the program stack. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Limit the number of recursive calls to a reasonable number",
        "Description": "Limit the number of recursive calls to a reasonable number. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-230",
        "Phase": null,
        "Title": null,
        "Description": "XML Nested Payloads",
        "Url": "http://capec.mitre.org/data/definitions/230.html"
      },
      {
        "Id": "CAPEC-231",
        "Phase": null,
        "Title": null,
        "Description": "Oversized Serialized Data Payloads",
        "Url": "http://capec.mitre.org/data/definitions/231.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2007-1285",
        "Phase": null,
        "Title": "Deeply nested arrays trigger stack exhaustion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1285"
      },
      {
        "Id": "CVE-2007-3409",
        "Phase": null,
        "Title": "Self-referencing pointers create infinite loop and resultant stack exhaustion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3409"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-776"
    ]
  },
  {
    "Id": "CWE-776",
    "Title": " Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')",
    "Description": "The software uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities. ",
    "ExtendedDescription": "If the DTD contains a large number of nested or recursive entities, this can lead to explosive growth of data when parsed, causing a denial of service. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities",
        "Description": "If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content",
        "Description": "Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2008-3281",
        "Phase": null,
        "Title": "XEE in XML-parsing library. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3281"
      },
      {
        "Id": "CVE-2011-3288",
        "Phase": null,
        "Title": "XML bomb / XEE in enterprise communication product. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3288"
      },
      {
        "Id": "CVE-2011-1755",
        "Phase": null,
        "Title": "\"Billion laughs\" attack in XMPP server daemon. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1755"
      },
      {
        "Id": "CVE-2009-1955",
        "Phase": null,
        "Title": "XML bomb in web server module ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1955"
      },
      {
        "Id": "CVE-2003-1564",
        "Phase": null,
        "Title": "Parsing library allows XML bomb ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1564"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-696",
    "Title": " Incorrect Behavior Order",
    "Description": "The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-463",
        "Phase": null,
        "Title": null,
        "Description": "Padding Oracle Crypto Attack",
        "Url": "http://capec.mitre.org/data/definitions/463.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2007-5191",
        "Phase": null,
        "Title": "file-system management programs call the setuid and setgid functions in the wrong order and do not check the return values, allowing attackers to gain unintended privileges ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5191"
      },
      {
        "Id": "CVE-2007-1588",
        "Phase": null,
        "Title": "C++ web server program calls Process::setuid before calling Process::setgid, preventing it from dropping privileges, potentially allowing CGI programs to be called with higher privileges than intended ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1588"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-179",
      "CWE-408",
      "CWE-551",
      "CWE-1190",
      "CWE-1193",
      "CWE-1280"
    ]
  },
  {
    "Id": "CWE-408",
    "Title": " Incorrect Behavior Order",
    "Description": "The software allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2004-2458",
        "Phase": null,
        "Title": "Tool creates directories before authenticating user. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2458"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1190",
    "Title": " DMA Device Enabled Too Early in Boot Phase",
    "Description": "The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product. ",
    "ExtendedDescription": "DMA is included in a number of devices because it allows data transfer between the computer and the connected device, using direct hardware access to read or write directly to main memory without any OS interaction. An attacker could exploit this to access secrets. Several virtualization-based mitigations have been introduced to thwart DMA attacks. These are usually configured/setup during boot time. However, certain IPs that are powered up before boot is complete (known as early boot IPs) may be DMA capable. Such IPs, if not trusted, could launch DMA attacks and gain access to assets that should otherwise be protected. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Utilize an IOMMU to orchestrate IO access from the start of the boot process",
        "Description": "Utilize an IOMMU to orchestrate IO access from the start of the boot process. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1193",
    "Title": " Power-On of Untrusted Execution Core Before Enabling Fabric Access Control",
    "Description": "The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled. ",
    "ExtendedDescription": "After initial reset, System-on-Chip (SoC) fabric access controls and other security features need to be programmed by trusted firmware as part of the boot sequence. If untrusted IPs or peripheral microcontrollers are enabled first, then the untrusted component can master transactions on the hardware bus and target memory or other assets to compromise the SoC boot firmware. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware",
        "Description": "The boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-1",
        "Phase": null,
        "Title": null,
        "Description": "Accessing Functionality Not Properly Constrained by ACLs",
        "Url": "http://capec.mitre.org/data/definitions/1.html"
      },
      {
        "Id": "CAPEC-180",
        "Phase": null,
        "Title": null,
        "Description": "Exploiting Incorrectly Configured Access Control Security Levels",
        "Url": "http://capec.mitre.org/data/definitions/180.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-705",
    "Title": " Incorrect Control Flow Scoping",
    "Description": "The software does not properly return control flow to the proper location after it has completed a task or detected an unusual condition. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2014-1266",
        "Phase": null,
        "Title": "chain: incorrect \"goto\" in Apple SSL product bypasses certificate validation, allowing MITM attack (Apple \"goto fail\" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint). ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1266"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-248",
      "CWE-382",
      "CWE-395",
      "CWE-396",
      "CWE-397",
      "CWE-455",
      "CWE-584",
      "CWE-698"
    ]
  },
  {
    "Id": "CWE-382",
    "Title": " J2EE Bad Practices",
    "Description": "A J2EE application uses System.exit(), which also shuts down its container. ",
    "ExtendedDescription": "It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nThe shutdown function should be a privileged function available only to a properly authorized administrative user ",
        "Description": "Strategy:  Separation of Privilege\r\nThe shutdown function should be a privileged function available only to a properly authorized administrative user ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Web applications should not call methods that cause the virtual machine to exit, such as System",
        "Description": "Web applications should not call methods that cause the virtual machine to exit, such as System.exit() ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Web applications should also not throw any Throwables to the application server as this may adversely affect the container",
        "Description": "Web applications should also not throw any Throwables to the application server as this may adversely affect the container. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Non-web applications may have a main() method that contains a System",
        "Description": "Non-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-395",
    "Title": " Use of NullPointerException Catch to Detect NULL Pointer Dereference",
    "Description": "Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer. ",
    "ExtendedDescription": "Programmers typically catch NullPointerException under three circumstances: The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem. The program explicitly throws a NullPointerException to signal an error condition. The code is part of a test harness that supplies unexpected input to the classes under test. Of these three circumstances, only the last is acceptable. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Do not extensively rely on catching exceptions (especially for validating user input) to handle errors",
        "Description": "Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-396",
    "Title": " Declaration of Catch for Generic Exception",
    "Description": "Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities. ",
    "ExtendedDescription": "Multiple catch blocks can get ugly and repetitive, but \"condensing\" catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-397",
    "Title": " Declaration of Throws for Generic Exception",
    "Description": "Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities. ",
    "ExtendedDescription": "Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-455",
    "Title": " Non-exit on Failed Initialization",
    "Description": "The software does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error, which can cause the software to execute in a less secure fashion than intended by the administrator. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Follow the principle of failing securely when an error occurs",
        "Description": "Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2005-1345",
        "Phase": null,
        "Title": "Product does not trigger a fatal error if missing or invalid ACLs are in a configuration file. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1345"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-584",
    "Title": " Return Inside Finally Block",
    "Description": "The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded. ",
    "ExtendedDescription": null,
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Do not use a return statement inside the finally block",
        "Description": "Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-749",
    "Title": " Exposed Dangerous Method or Function",
    "Description": "The software provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted. ",
    "ExtendedDescription": "This weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on. The exposure can occur in a few different ways: 1) The function/method was never intended to be exposed to outside actors. 2) The function/method was only intended to be accessible to a limited set of actors, such as Internet-based access from a single web site. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities",
        "Description": "If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; Implementation",
        "Title": "Strategy:  Attack Surface Reduction\r\nIdentify all exposed functionality",
        "Description": "Strategy:  Attack Surface Reduction\r\nIdentify all exposed functionality. Explicitly list all functionality that must be exposed to some user or set of users. Identify which functionality may be: \r\n  accessible to all users  restricted to a small set of privileged users  prevented from being directly accessible at all   \r\nEnsure that the implemented code follows these expectations. This includes setting the appropriate access modifiers where applicable (public, private, protected, etc.) or not marking ActiveX controls safe-for-scripting. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2007-6382",
        "Phase": null,
        "Title": "arbitrary Java code execution via exposed method ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6382"
      },
      {
        "Id": "CVE-2007-1112",
        "Phase": null,
        "Title": "security tool ActiveX control allows download or upload of files ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1112"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-618",
      "CWE-782"
    ]
  },
  {
    "Id": "CWE-618",
    "Title": " Exposed Unsafe ActiveX Method",
    "Description": "An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain). ",
    "ExtendedDescription": "ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities",
        "Description": "If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use code signing, although this does not protect against any weaknesses that are already in the control",
        "Description": "Use code signing, although this does not protect against any weaknesses that are already in the control. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phases:  Architecture and Design; System Configuration",
        "Title": "Where possible, avoid marking the control as safe for scripting",
        "Description": "Where possible, avoid marking the control as safe for scripting. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2007-1120",
        "Phase": null,
        "Title": "download a file to arbitrary folders. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1120"
      },
      {
        "Id": "CVE-2006-6838",
        "Phase": null,
        "Title": "control downloads and executes a url in a parameter ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6838"
      },
      {
        "Id": "CVE-2007-0321",
        "Phase": null,
        "Title": "resultant buffer overflow ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0321"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-782",
    "Title": " Exposed IOCTL with Insufficient Access Control",
    "Description": "The software implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL. ",
    "ExtendedDescription": "When an IOCTL contains privileged functionality and is exposed unnecessarily, attackers may be able to access this functionality by invoking the IOCTL. Even if the functionality is benign, if the programmer has assumed that the IOCTL would only be accessed by a trusted process, there may be little or no validation of the incoming data, exposing weaknesses that would never be reachable if the attacker cannot call the IOCTL directly. The implementations of IOCTLs will differ between operating system types and versions, so the methods of attack and prevention may vary widely. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "In Windows environments, use proper access control for the associated device or device namespace",
        "Description": "In Windows environments, use proper access control for the associated device or device namespace. See References. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2009-2208",
        "Phase": null,
        "Title": "Operating system does not enforce permissions on an IOCTL that can be used to modify network settings. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2208"
      },
      {
        "Id": "CVE-2008-3831",
        "Phase": null,
        "Title": "Device driver does not restrict ioctl calls to its master. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3831"
      },
      {
        "Id": "CVE-2008-3525",
        "Phase": null,
        "Title": "ioctl does not check for a required capability before processing certain requests. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3525"
      },
      {
        "Id": "CVE-2008-0322",
        "Phase": null,
        "Title": "Chain: insecure device permissions allows access to an IOCTL, allowing arbitrary memory to be overwritten. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0322"
      },
      {
        "Id": "CVE-2007-4277",
        "Phase": null,
        "Title": "Chain: anti-virus product uses weak permissions for a device, leading to resultant buffer overflow in an exposed IOCTL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4277"
      },
      {
        "Id": "CVE-2007-1400",
        "Phase": null,
        "Title": "Chain: sandbox allows opening of a TTY device, enabling shell commands through an exposed ioctl. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1400"
      },
      {
        "Id": "CVE-2006-4926",
        "Phase": null,
        "Title": "Anti-virus product uses insecure security descriptor for a device driver, allowing access to a privileged IOCTL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4926"
      },
      {
        "Id": "CVE-1999-0728",
        "Phase": null,
        "Title": "Unauthorized user can disable keyboard or mouse by directly invoking a privileged IOCTL. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0728"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-768",
    "Title": " Incorrect Short Circuit Evaluation",
    "Description": "The software contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring. ",
    "ExtendedDescription": "Usage of short circuit evaluation, though well-defined in the C standard, may alter control flow in a way that introduces logic errors that are difficult to detect, possibly causing errors later during the software's execution. If an attacker can discover such an inconsistency, it may be exploitable to gain arbitrary control over a system. If the first condition of an \"or\" statement is assumed to be true under normal circumstances, or if the first condition of an \"and\" statement is assumed to be false, then any subsequent conditional may contain its own logic errors that are not detected during code review or testing. Finally, the usage of short circuit evaluation may decrease the maintainability of the code. ",
    "LikelyHood": "Low",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Minimizing the number of statements in a conditional that produce side effects will help to prevent the likelihood of short circuit evaluation to alter control flow in an unexpected way",
        "Description": "Minimizing the number of statements in a conditional that produce side effects will help to prevent the likelihood of short circuit evaluation to alter control flow in an unexpected way. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-799",
    "Title": " Improper Control of Interaction Frequency",
    "Description": "The software does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests. ",
    "ExtendedDescription": "This can allow the actor to perform actions more frequently than expected. The actor could be a human or an automated process such as a virus or bot. This could be used to cause a denial of service, compromise program logic (such as limiting humans to a single vote), or other consequences. For example, an authentication routine might not limit the number of times an attacker can guess a password. Or, a web site might conduct a poll but only expect humans to vote a maximum of once a day. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2002-1876",
        "Phase": null,
        "Title": "Mail server allows attackers to prevent other users from accessing mail by sending large number of rapid requests. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1876"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
      "CWE-307",
      "CWE-837"
    ]
  },
  {
    "Id": "CWE-837",
    "Title": " Improper Enforcement of a Single, Unique Action",
    "Description": "The software requires that an actor should only be able to perform an action once, or to have only one unique action, but the software does not enforce or improperly enforces this restriction. ",
    "ExtendedDescription": "In various applications, a user is only expected to perform a certain action once, such as voting, requesting a refund, or making a purchase. When this restriction is not enforced, sometimes this can have security implications. For example, in a voting application, an attacker could attempt to \"stuff the ballot box\" by voting multiple times. If these votes are counted separately, then the attacker could directly affect who wins the vote. This could have significant business impact depending on the purpose of the software. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2008-0294",
        "Phase": null,
        "Title": "Ticket-booking web application allows a user to lock a seat more than once. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0294"
      },
      {
        "Id": "CVE-2005-4051",
        "Phase": null,
        "Title": "CMS allows people to rate downloads by voting more than once. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4051"
      },
      {
        "Id": "CVE-2002-216",
        "Phase": null,
        "Title": "Polling software allows people to vote more than once by setting a cookie. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-216"
      },
      {
        "Id": "CVE-2003-1433",
        "Phase": null,
        "Title": "Chain: lack of validation of a challenge key in a game allows a player to register multiple times and lock other players out of the game. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1433"
      },
      {
        "Id": "CVE-2002-1018",
        "Phase": null,
        "Title": "Library feature allows attackers to check out the same e-book multiple times, preventing other users from accessing copies of the e-book. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1018"
      },
      {
        "Id": "CVE-2009-2346",
        "Phase": null,
        "Title": "Protocol implementation allows remote attackers to cause a denial of service (call-number exhaustion) by initiating many message exchanges. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2346"
      }
    ],
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-834",
    "Title": " Excessive Iteration",
    "Description": "The software performs an iteration or loop without sufficiently limiting the number of times that the loop is executed. ",
    "ExtendedDescription": "If the iteration can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. In many cases, a loop does not need to be infinite in order to cause enough resource consumption to adversely affect the software or its host system; it depends on the amount of resources consumed per iteration. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": null,
    "Children": [
      "CWE-835"
    ]
  },
  {
    "Id": "CWE-835",
    "Title": " Loop with Unreachable Exit Condition ('Infinite Loop')",
    "Description": "The program contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop. ",
    "ExtendedDescription": "If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2011-1027",
        "Phase": null,
        "Title": "Chain: off-by-one error leads to infinite loop using invalid hex-encoded characters. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1027"
      },
      {
        "Id": "CVE-2011-1142",
        "Phase": null,
        "Title": "Chain: self-referential values in recursive definitions lead to infinite loop. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1142"
      },
      {
        "Id": "CVE-2011-1002",
        "Phase": null,
        "Title": "NULL UDP packet is never cleared from a queue, leading to infinite loop. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1002"
      },
      {
        "Id": "CVE-2010-4476",
        "Phase": null,
        "Title": "Floating point conversion routine cycles back and forth between two different values. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4476"
      },
      {
        "Id": "CVE-2010-4645",
        "Phase": null,
        "Title": "Floating point conversion routine cycles back and forth between two different values. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4645"
      },
      {
        "Id": "CVE-2010-2534",
        "Phase": null,
        "Title": "Chain: improperly clearing a pointer in a linked list leads to infinite loop. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2534"
      }
    ],
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-841",
    "Title": " Improper Enforcement of Behavioral Workflow",
    "Description": "The software supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence. ",
    "ExtendedDescription": "By performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the software or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses. For example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the software might still perform the transfer. Note that this is different than CWE-696, which focuses on when the software performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence. Workflow-related behaviors include: Steps are performed in the expected order. Required steps are not omitted. Steps are not interrupted. Steps are performed in a timely fashion. ",
    "LikelyHood": null,
    "PotentialMitigations": null,
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-2011-0348",
        "Phase": null,
        "Title": "Bypass of access/billing restrictions by sending traffic to an unrestricted destination before sending to a restricted destination. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0348"
      },
      {
        "Id": "CVE-2007-3012",
        "Phase": null,
        "Title": "Attacker can access portions of a restricted page by canceling out of a dialog. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3012"
      },
      {
        "Id": "CVE-2009-5056",
        "Phase": null,
        "Title": "Ticket-tracking system does not enforce a permission setting. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-5056"
      },
      {
        "Id": "CVE-2004-2164",
        "Phase": null,
        "Title": "Shopping cart does not close a database connection when user restores a previous order, leading to connection exhaustion. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2164"
      },
      {
        "Id": "CVE-2003-0777",
        "Phase": null,
        "Title": "Chain: product does not properly handle dropped connections, leading to missing NULL terminator (CWE-170) and segmentation fault. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0777"
      },
      {
        "Id": "CVE-2005-3327",
        "Phase": null,
        "Title": "Chain: Authentication bypass by skipping the first startup step as required by the protocol. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3327"
      },
      {
        "Id": "CVE-2004-0829",
        "Phase": null,
        "Title": "Chain: File server crashes when sent a \"find next\" request without an initial \"find first.\" ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0829"
      },
      {
        "Id": "CVE-2010-2620",
        "Phase": null,
        "Title": "FTP server allows remote attackers to bypass authentication by sending (1) LIST, (2) RETR, (3) STOR, or other commands without performing the required login steps first. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2620"
      },
      {
        "Id": "CVE-2005-3296",
        "Phase": null,
        "Title": "FTP server allows remote attackers to list arbitrary directories as root by running the LIST command before logging in. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3296"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "REALIZATION: This weakness is caused during implementation of an architectural security tactic. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-1265",
    "Title": " Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
    "Description": "During execution of non-reentrant code, the software performs a call that unintentionally produces a nested invocation of the non-reentrant code. ",
    "ExtendedDescription": "In complex software, a single function call may lead to many different possible code paths, some of which may involve deeply nested calls. It may be difficult to foresee all possible code paths that could emanate from a given function call. In some systems, an external actor can manipulate inputs to the system and thereby achieve a wide range of possible control flows. This is frequently of concern in software that executes script from untrusted sources. Examples of such software are web browsers and PDF readers. A weakness is present when one of the possible code paths resulting from a function call alters program state that the original caller assumes to be unchanged during the call. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "When architecting a system that will execute untrusted code in response to events, consider executing the untrusted event handlers asynchronously (asynchronous message passing) as opposed to executing them synchronously at the time each event fires",
        "Description": "When architecting a system that will execute untrusted code in response to events, consider executing the untrusted event handlers asynchronously (asynchronous message passing) as opposed to executing them synchronously at the time each event fires. The untrusted code should execute at the start of the next iteration of the thread’s message loop. In this way, calls into non-reentrant code are strictly serialized, so that each operation completes fully before the next operation begins. Special attention must be paid to all places where type coercion may result in script execution. Performing all needed coercions at the very beginning of an operation can help reduce the chance of operations executing at unexpected junctures. \r\nEffectiveness: High",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Make sure the code (e",
        "Description": "Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code. \r\nEffectiveness: High",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-74",
        "Phase": null,
        "Title": null,
        "Description": "Manipulating State",
        "Url": "http://capec.mitre.org/data/definitions/74.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-2014-1772",
        "Phase": null,
        "Title": "In this vulnerability, by registering a malicious onerror handler, an adversary can produce unexpected re-entrance of a CDOMRange object. [REF-1098] ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1772"
      },
      {
        "Id": "CVE-2018-8174",
        "Phase": null,
        "Title": "This CVE covers several vulnerable scenarios enabled by abuse of the Class_Terminate feature in Microsoft VBScript. In one scenario, Class_Terminate is used to produce an undesirable re-entrance of ScriptingDictionary during execution of that object’s destructor. In another scenario, a vulnerable condition results from a recursive entrance of a property setter method. This recursive invocation produces a second, spurious call to the Release method of a reference-counted object, causing a UAF when that object is freed prematurely. This vulnerability pattern has been popularized as “Double Kill”. [REF-1099] ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8174"
      }
    ],
    "ModesOfIntroduction": null,
    "Children": [
    ]
  },
  {
    "Id": "CWE-1281",
    "Title": " Sequence of Processor Instructions Leads to Unexpected Behavior (Halt and Catch Fire)",
    "Description": "Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed. ",
    "ExtendedDescription": "If the instruction set architecture (ISA) and processor logic are not designed carefully, and tested thoroughly, certain combinations of instructions may lead to locking the processor or other unexpected and undesirable behavior. Upon encountering unimplemented instruction opcodes or illegal instruction operands the processor should throw an exception and carry on without negatively impacting security. However, specific combinations of legal and illegal instructions may cause unexpected behavior with security implications such as allowing unprivileged programs to completely lock the CPU. Some examples are the Pentium f00f bug, MC6800 HCF, the Cyrix comma bug, and more generally other \"Halt and Catch Fire\" instructions. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Testing",
        "Title": "Implement a rigorous testing strategy that incorporates randomization to explore instruction sequences that are unlikely to appear in normal workloads in order to identify halt and catch fire instruction sequences",
        "Description": "Implement a rigorous testing strategy that incorporates randomization to explore instruction sequences that are unlikely to appear in normal workloads in order to identify halt and catch fire instruction sequences. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Patching and Maintenance",
        "Title": "Patch operating system to avoid running Halt and Catch Fire type sequences or to mitigate the damage caused by unexpected behaviour",
        "Description": "Patch operating system to avoid running Halt and Catch Fire type sequences or to mitigate the damage caused by unexpected behaviour. See [REF-1108]. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-212",
        "Phase": null,
        "Title": null,
        "Description": "Functionality Misuse",
        "Url": "http://capec.mitre.org/data/definitions/212.html"
      }
    ],
    "ObservedExamples": [
      {
        "Id": "CVE-1999-1420",
        "Phase": null,
        "Title": "A bug in Intel Pentium processor (MMX and Overdrive) allows local users to cause a denial of service (hang) in Intel-based operating systems such as Windows NT and Windows 95, via an invalid instruction, aka the \"Invalid Operand with Locked CMPXCHG8B Instruction\" problem. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1420"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "Unexpected behavior from certain instruction combinations can arise from bugs in the ISA ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "Unexpected behavior from certain instruction combinations can arise because of implementation details such as speculative execution, caching etc. ",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-406",
    "Title": " Insufficient Control of Network Message Volume (Network Amplification)",
    "Description": "The software does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the software to transmit more traffic than should be allowed for that actor. ",
    "ExtendedDescription": "In the absence of a policy to restrict asymmetric resource consumption, the application or system cannot distinguish between legitimate transmissions and traffic intended to serve as an amplifying attack on target systems. Systems can often be configured to restrict the amount of traffic sent out on behalf of a client, based on the client's origin or access level. This is usually defined in a resource allocation policy. In the absence of a mechanism to keep track of transmissions, the system or application can be easily abused to transmit asymmetrically greater traffic than the request or client should be permitted to. ",
    "LikelyHood": null,
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Strategy:  Separation of Privilege\r\nAn application must make network resources available to a client commensurate with the client's access level",
        "Description": "Strategy:  Separation of Privilege\r\nAn application must make network resources available to a client commensurate with the client's access level. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Policy",
        "Title": "Define a clear policy for network resource allocation and consumption",
        "Description": "Define a clear policy for network resource allocation and consumption. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "An application must, at all times, keep track of network resources and meter their usage appropriately",
        "Description": "An application must, at all times, keep track of network resources and meter their usage appropriately. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": [
      {
        "Id": "CVE-1999-0513",
        "Phase": null,
        "Title": "Classic \"Smurf\" attack, using spoofed ICMP packets to broadcast addresses. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0513"
      },
      {
        "Id": "CVE-1999-1379",
        "Phase": null,
        "Title": "DNS query with spoofed source address causes more traffic to be returned to spoofed address than was sent by the attacker. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1379"
      },
      {
        "Id": "CVE-2000-0041",
        "Phase": null,
        "Title": "Large datagrams are sent in response to malformed datagrams. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0041"
      },
      {
        "Id": "CVE-1999-1066",
        "Phase": null,
        "Title": "Game server sends a large amount. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1066"
      },
      {
        "Id": "CVE-2013-5211",
        "Phase": null,
        "Title": "composite: NTP feature generates large responses (high amplification factor) with spoofed UDP source addresses. ",
        "Description": null,
        "Url": "http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5211"
      }
    ],
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Operation",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "If the application uses UDP, then it could potentially be subject to spoofing attacks that use the inherent weaknesses of UDP to perform traffic amplification, although this problem can exist in other protocols or contexts. ",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-121",
    "Title": " Stack-based Buffer Overflow",
    "Description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function). ",
    "ExtendedDescription": null,
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Build and Compilation",
        "Title": "Strategy:  Compilation or Build Hardening\r\nRun or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows",
        "Description": "Strategy:  Compilation or Build Hardening\r\nRun or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows. \r\nFor example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice. \r\nEffectiveness: Defense in Depth\r\nNote: This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Use an abstraction library to abstract away risky APIs",
        "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Build and Compilation",
        "Title": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag",
        "Description": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Implement and perform bounds checking on input",
        "Description": "Implement and perform bounds checking on input. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Do not use dangerous functions such as gets",
        "Description": "Do not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Operation",
        "Title": "Use OS-level preventative functionality, such as ASLR",
        "Description": "Use OS-level preventative functionality, such as ASLR. This is not a complete solution. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-515",
    "Title": " Covert Storage Channel",
    "Description": "A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information. ",
    "ExtendedDescription": "Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel. ",
    "LikelyHood": "High",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Ensure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included",
        "Description": "Ensure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": null,
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  },
  {
    "Id": "CWE-385",
    "Title": " Covert Timing Channel",
    "Description": "Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information. ",
    "ExtendedDescription": "In some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state. Covert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus. ",
    "LikelyHood": "Medium",
    "PotentialMitigations": [
      {
        "Id": null,
        "Phase": "Phase:  Architecture and Design",
        "Title": "Whenever possible, specify implementation strategies that do not introduce time variances in operations",
        "Description": "Whenever possible, specify implementation strategies that do not introduce time variances in operations. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "Often one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker",
        "Description": "Often one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker. ",
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Phase:  Implementation",
        "Title": "It is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application",
        "Description": "It is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application. ",
        "Url": null
      }
    ],
    "RelatedAttackPatterns": [
      {
        "Id": "CAPEC-462",
        "Phase": null,
        "Title": null,
        "Description": "Cross-Domain Search Timing",
        "Url": "http://capec.mitre.org/data/definitions/462.html"
      }
    ],
    "ObservedExamples": null,
    "ModesOfIntroduction": [
      {
        "Id": null,
        "Phase": "Architecture and Design",
        "Title": "",
        "Description": null,
        "Url": null
      },
      {
        "Id": null,
        "Phase": "Implementation",
        "Title": "",
        "Description": null,
        "Url": null
      }
    ],
    "Children": [
    ]
  }
]