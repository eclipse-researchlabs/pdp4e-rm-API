[
  {
    "Id": "CAPEC-1",
    "Description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as \"NoAccess\", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user",
        "Description": "In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as \"NoAccess\", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user. Having done so, any direct access to those protected Servlets will be prohibited by the web container. In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic. "
      }
    ]
  },
  {
    "Id": "CAPEC-10",
    "Description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Do not expose environment variable to the user",
        "Description": "Do not expose environment variable to the user. "
      },
      {
        "Title": "Do not use untrusted data in your environment variables",
        "Description": "Do not use untrusted data in your environment variables. "
      },
      {
        "Title": "Use a language or compiler that performs automatic bounds checking ",
        "Description": "Use a language or compiler that performs automatic bounds checking "
      },
      {
        "Title": "There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library",
        "Description": "There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow. "
      }
    ]
  },
  {
    "Id": "CAPEC-100",
    "Description": "Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use a language or compiler that performs automatic bounds checking",
        "Description": "Use a language or compiler that performs automatic bounds checking. "
      },
      {
        "Title": "Use secure functions not vulnerable to buffer overflow",
        "Description": "Use secure functions not vulnerable to buffer overflow. "
      },
      {
        "Title": "If you have to use dangerous functions, make sure that you do boundary checking",
        "Description": "If you have to use dangerous functions, make sure that you do boundary checking. "
      },
      {
        "Title": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag",
        "Description": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. "
      },
      {
        "Title": "Use OS-level preventative functionality",
        "Description": "Use OS-level preventative functionality. Not a complete solution. "
      },
      {
        "Title": "Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software",
        "Description": "Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software. "
      }
    ]
  },
  {
    "Id": "CAPEC-101",
    "Description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Set the OPTIONS IncludesNOEXEC in the global access",
        "Description": "Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them "
      },
      {
        "Title": "All user controllable input must be appropriately sanitized before use in the application",
        "Description": "All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive "
      },
      {
        "Title": "Server Side Includes must be enabled only if there is a strong business reason to do so",
        "Description": "Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead "
      }
    ]
  },
  {
    "Id": "CAPEC-102",
    "Description": "Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      }
    ],
    "Mitigations": [
      {
        "Title": "Make sure that HTTPS is used to communicate with the target system",
        "Description": "Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel. "
      },
      {
        "Title": "Modify the session token with each transmission and protect it with cryptography",
        "Description": "Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks. "
      }
    ]
  },
  {
    "Id": "CAPEC-104",
    "Description": "An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security. In a zone-based model, pages belong to one of a set of zones corresponding to the level of privilege assigned to that page. Pages in an untrusted zone would have a lesser level of access to the system and/or be restricted in the types of executable content it was allowed to invoke. In a cross-zone scripting attack, a page that should be assigned to a less privileged zone is granted the privileges of a more trusted zone. This can be accomplished by exploiting bugs in the browser, exploiting incorrect configuration in the zone controls, through a cross-site scripting attack that causes the attackers' content to be treated as coming from a more trusted page, or by leveraging some piece of system functionality that is accessible from both the trusted and less trusted zone. This attack differs from \"Restful Privilege Escalation\" in that the latter correlates to the inadequate securing of RESTful access methods (such as HTTP DELETE) on the server, while cross-zone scripting attacks the concept of security zones as implemented by a browser. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Disable script execution",
        "Description": "Disable script execution. "
      },
      {
        "Title": "Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone ",
        "Description": "Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone "
      },
      {
        "Title": "Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone ",
        "Description": "Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone "
      },
      {
        "Title": "Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum ",
        "Description": "Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum "
      },
      {
        "Title": "Ensure proper HTML output encoding before writing user supplied data to the page ",
        "Description": "Ensure proper HTML output encoding before writing user supplied data to the page "
      }
    ]
  },
  {
    "Id": "CAPEC-107",
    "Description": "Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to destination system's web server. The adversary first gets a malicious script to run in the victim's browser that induces the browser to initiate an HTTP TRACE request to the web server. If the destination web server allows HTTP TRACE requests, it will proceed to return a response to the victim's web browser that contains the original HTTP request in its body. The function of HTTP TRACE, as defined by the HTTP specification, is to echo the request that the web server receives from the client back to the client. Since the HTTP header of the original request had the victim's session cookie in it, that session cookie can now be picked off the HTTP TRACE response and sent to the adversary's malicious site. XST becomes relevant when direct access to the session cookie via the \"document.cookie\" object is disabled with the use of httpOnly attribute which ensures that the cookie can be transmitted in HTTP requests but cannot be accessed in other ways. Using SSL does not protect against XST. If the system with which the victim is interacting is susceptible to XSS, an adversary can exploit that weakness directly to get their malicious script to issue an HTTP TRACE request to the destination system's web server. In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that they control and get it to execute in the victim's browser (if they can trick the victim's into visiting their malicious website or clicking on the link that they supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable them to get around the same origin policy protection. ",
    "Likelihood": "Medium",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Administrators should disable support for HTTP TRACE at the destination's web server",
        "Description": "Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default. "
      },
      {
        "Title": "Patch web browser against known security origin policy bypass exploits",
        "Description": "Patch web browser against known security origin policy bypass exploits. "
      }
    ]
  },
  {
    "Id": "CAPEC-108",
    "Description": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host. ",
    "Likelihood": "Low",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Disable MSSQL xp_cmdshell directive on the database ",
        "Description": "Disable MSSQL xp_cmdshell directive on the database "
      },
      {
        "Title": "Properly validate the data (syntactically and semantically) before writing it to the database",
        "Description": "Properly validate the data (syntactically and semantically) before writing it to the database. "
      },
      {
        "Title": "Do not implicitly trust the data stored in the database",
        "Description": "Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument). "
      }
    ]
  },
  {
    "Id": "CAPEC-109",
    "Description": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework ",
        "Description": "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework "
      },
      {
        "Title": "Ensure to keep up to date with security relevant updates to the persistence framework used within your application",
        "Description": "Ensure to keep up to date with security relevant updates to the persistence framework used within your application. "
      }
    ]
  },
  {
    "Id": "CAPEC-11",
    "Description": "An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process. This type of vulnerability has been found in many widely used servers including IIS, Lotus Domino, and Orion. The attacker's job in this case is straightforward, standard communication protocols and methods are used and are generally appended with malicious information at the tail end of an otherwise legitimate request. The attack payload varies, but it could be special characters like a period or simply appending a tag that has a special meaning for operations on the server side like .jsp for a java application server. The essence of this attack is that the attacker deceives the server into executing functionality based on the name of the request, i.e. login.jsp, not the contents. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Implementation: Server routines should be determined by content not determined by filename or file extension",
        "Description": "Implementation: Server routines should be determined by content not determined by filename or file extension. "
      }
    ]
  },
  {
    "Id": "CAPEC-110",
    "Description": "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Properly validate and sanitize/reject user input at the service provider",
        "Description": "Properly validate and sanitize/reject user input at the service provider. "
      },
      {
        "Title": "Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query",
        "Description": "Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query. "
      },
      {
        "Title": "At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation",
        "Description": "At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly. "
      }
    ]
  },
  {
    "Id": "CAPEC-111",
    "Description": "An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website. An attacker gets the victim to visit their malicious page that contains a script tag whose source points to the vulnerable system with a URL that requests a response from the server containing a JSON object with possibly confidential information. The malicious page also contains malicious code to capture the JSON object returned by the server before any other processing on it can take place, typically by overriding the JavaScript function used to create new objects. This hook allows the malicious code to get access to the creation of each object and transmit the possibly sensitive contents of the captured JSON object to the attackers' server. There is nothing in the browser's security model to prevent the attackers' malicious JavaScript code (originating from attacker's domain) to set up an environment (as described above) to intercept a JSON object response (coming from the vulnerable target system's domain), read its contents and transmit to the attackers' controlled site. The same origin policy protects the domain object model (DOM), but not the JSON. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Ensure that server side code can differentiate between legitimate requests and forged requests",
        "Description": "Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce. "
      },
      {
        "Title": "On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag",
        "Description": "On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags). "
      },
      {
        "Title": "Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session",
        "Description": "Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session. "
      },
      {
        "Title": "Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects",
        "Description": "Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario. "
      }
    ]
  },
  {
    "Id": "CAPEC-112",
    "Description": "In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset. Examples of secrets can include, but are not limited to, passwords, encryption keys, database lookup keys, and initial values to one-way functions. The key factor in this attack is the attackers' ability to explore the possible secret space rapidly. This, in turn, is a function of the size of the secret space and the computational power the attacker is able to bring to bear on the problem. If the attacker has modest resources and the secret space is large, the challenge facing the attacker is intractable. While the defender cannot control the resources available to an attacker, they can control the size of the secret space. Creating a large secret space involves selecting one's secret from as large a field of equally likely alternative secrets as possible and ensuring that an attacker is unable to reduce the size of this field using available clues or cryptanalysis. Doing this is more difficult than it sounds since elimination of patterns (which, in turn, would provide an attacker clues that would help them reduce the space of potential secrets) is difficult to do using deterministic machines, such as computers. Assuming a finite secret space, a brute force attack will eventually succeed. The defender must rely on making sure that the time and resources necessary to do so will exceed the value of the information. For example, a secret space that will likely take hundreds of years to explore is likely safe from raw-brute force attacks. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Select a provably large secret space for selection of the secret",
        "Description": "Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space. "
      },
      {
        "Title": "Do not provide the means for an attacker to determine success independently",
        "Description": "Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext. "
      }
    ]
  },
  {
    "Id": "CAPEC-114",
    "Description": "An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker. This attack may exploit assumptions made by the target's authentication procedures, such as assumptions regarding trust relationships or assumptions regarding the generation of secret values. This attack differs from Authentication Bypass attacks in that Authentication Abuse allows the attacker to be certified as a valid user through illegitimate means, while Authentication Bypass allows the user to access protected material without ever being certified as an authenticated user. This attack does not rely on prior sessions established by successfully authenticating users, as relied upon for the \"Exploitation of Session Variables, Resource IDs and other Trusted Credentials\" attack patterns. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-115",
    "Description": "An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place. This refers to an attacker gaining access equivalent to an authenticated user without ever going through an authentication procedure. This is usually the result of the attacker using an unexpected access procedure that does not go through the proper checkpoints where authentication should occur. For example, a web site might assume that all users will click through a given link in order to get to secure material and simply authenticate everyone that clicks the link. However, an attacker might be able to reach secured web content by explicitly entering the path to the content rather than clicking through the authentication link, thereby avoiding the check entirely. This attack pattern differs from other authentication attacks in that attacks of this pattern avoid authentication entirely, rather than faking authentication by exploiting flaws or by stealing credentials from legitimate users. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-116",
    "Description": "An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes. This is achieved by exploring the target via ordinary interactions for the purpose of gathering intelligence about the target, or by sending data that is syntactically invalid or non-standard in an attempt to produce a response that contains the desired data. As a result of these interactions, the adversary is able to obtain information from the target that aids the attacker in making inferences about its security, configuration, or potential vulnerabilities. Examplar exchanges with the target may trigger unhandled exceptions or verbose error messages that reveal information like stack traces, configuration information, path information, or database design. This type of attack also includes the manipulation of query strings in a URI to produce invalid SQL queries, or by trying alternative path values in the hope that the server will return useful information. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Minimize error/response output to only what is necessary for functional use or corrective language",
        "Description": "Minimize error/response output to only what is necessary for functional use or corrective language. "
      },
      {
        "Title": "Remove potentially sensitive information that is not necessary for the application's functionality",
        "Description": "Remove potentially sensitive information that is not necessary for the application's functionality. "
      }
    ]
  },
  {
    "Id": "CAPEC-117",
    "Description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Man-In-the-Middle (MITM) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient. ",
    "Likelihood": "Low",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties",
        "Description": "Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties. "
      }
    ]
  },
  {
    "Id": "CAPEC-12",
    "Description": "This pattern of attack is defined by the selection of messages distributed over via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Associate some ACL (in the form of a token) with an authenticated user which they provide middleware",
        "Description": "Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages. The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message. "
      },
      {
        "Title": "Re-architect system input/output channels as appropriate to distribute self-protecting data",
        "Description": "Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them. "
      }
    ]
  },
  {
    "Id": "CAPEC-120",
    "Description": "The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target. ",
    "Likelihood": "Low",
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input. "
      },
      {
        "Title": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding",
        "Description": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. "
      },
      {
        "Title": "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated",
        "Description": "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible. "
      },
      {
        "Title": "Any security checks should occur after the data has been decoded and validated as correct data format",
        "Description": "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. "
      },
      {
        "Title": "Refer to the RFCs to safely decode URL",
        "Description": "Refer to the RFCs to safely decode URL. "
      },
      {
        "Title": "Regular expression can be used to match safe URL patterns",
        "Description": "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive. "
      },
      {
        "Title": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www",
        "Description": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx). "
      }
    ]
  },
  {
    "Id": "CAPEC-122",
    "Description": "An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts. This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Access ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": [
      {
        "Title": "Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts",
        "Description": "Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts. "
      }
    ]
  },
  {
    "Id": "CAPEC-125",
    "Description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable ExecutionResource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "Ensure that protocols have specific limits of scale configured",
        "Description": "Ensure that protocols have specific limits of scale configured. "
      },
      {
        "Title": "Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits",
        "Description": "Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits. "
      },
      {
        "Title": "Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed",
        "Description": "Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed. "
      }
    ]
  },
  {
    "Id": "CAPEC-126",
    "Description": "An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "IntegrityConfidentialityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Configure the access control correctly",
        "Description": "Design: Configure the access control correctly. "
      },
      {
        "Title": "Design: Enforce principle of least privilege",
        "Description": "Design: Enforce principle of least privilege. "
      },
      {
        "Title": "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities",
        "Description": "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution. "
      },
      {
        "Title": "Design: Input validation",
        "Description": "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement. "
      },
      {
        "Title": "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host",
        "Description": "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host. "
      },
      {
        "Title": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands",
        "Description": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. "
      },
      {
        "Title": "Implementation: Host integrity monitoring for critical files, directories, and processes",
        "Description": "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin. "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content, including remote and user-generated content",
        "Description": "Implementation: Perform input validation for all remote content, including remote and user-generated content. "
      },
      {
        "Title": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables",
        "Description": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables. "
      },
      {
        "Title": "Implementation: Use indirect references rather than actual file names",
        "Description": "Implementation: Use indirect references rather than actual file names. "
      },
      {
        "Title": "Implementation: Use possible permissions on file access when developing and deploying web applications",
        "Description": "Implementation: Use possible permissions on file access when developing and deploying web applications. "
      },
      {
        "Title": "Implementation: Validate user input by only accepting known good",
        "Description": "Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach. "
      }
    ]
  },
  {
    "Id": "CAPEC-127",
    "Description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "1",
        "Description": "1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors. "
      },
      {
        "Title": "2",
        "Description": "2. Preventing with .htaccess in Apache web server: In .htaccess, write \"Options-indexes\". "
      },
      {
        "Title": "3",
        "Description": "3. Suppressing error messages: using error 403 \"Forbidden\" message exactly like error 404 \"Not Found\" message. "
      }
    ]
  },
  {
    "Id": "CAPEC-13",
    "Description": "The attacker directly or indirectly modifies environment variables used by or controlling the target software. The attacker's goal is to cause the target software to deviate from its expected operation in a manner that benefits the attacker. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Accountability",
        "Likelihood": "",
        "Impact": "Hide Activities"
      }
    ],
    "Mitigations": [
      {
        "Title": "Protect environment variables against unauthorized read and write access",
        "Description": "Protect environment variables against unauthorized read and write access. "
      },
      {
        "Title": "Protect the configuration files which contain environment variables against illegitimate read and write access",
        "Description": "Protect the configuration files which contain environment variables against illegitimate read and write access. "
      },
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. "
      },
      {
        "Title": "Apply the least privilege principles",
        "Description": "Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege. "
      }
    ]
  },
  {
    "Id": "CAPEC-130",
    "Description": "An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "Limit the amount of resources that are accessible to unprivileged users",
        "Description": "Limit the amount of resources that are accessible to unprivileged users. "
      },
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Consider all potentially relevant properties when validating input. "
      },
      {
        "Title": "Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed",
        "Description": "Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed. "
      },
      {
        "Title": "Use resource-limiting settings, if possible",
        "Description": "Use resource-limiting settings, if possible. "
      }
    ]
  },
  {
    "Id": "CAPEC-131",
    "Description": "An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests. Resource leaks most often come in the form of memory leaks where memory is allocated but never released after it has served its purpose, however, theoretically, any other resource that can be reserved can be targeted if the target fails to release the reservation when the reserved resource block is no longer needed. In this attack, the adversary determines what activity results in leaked resources and then triggers that activity on the target. Since some leaks may be small, this may require a large number of requests by the adversary. However, this attack differs from a flooding attack in that the rate of requests is generally not significant. This is because the lost resources due to the leak accumulate until the target is reset, usually by restarting it. Thus, a resource-poor adversary who would be unable to flood the target can still utilize this attack. Resource depletion through leak differs from resource depletion through allocation in that, in the former, the adversary may not be able to control the size of each leaked allocation, but instead allows the leak to accumulate until it is large enough to affect the target's performance. When depleting resources through allocation, the allocated resource may eventually be released by the target so the attack relies on making sure that the allocation size itself is prohibitive of normal operations by the target. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable ExecutionResource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "If possible, leverage coding language(s) that do not allow this weakness to occur (e",
        "Description": "If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated). "
      },
      {
        "Title": "Memory should always be allocated/freed using matching functions (e",
        "Description": "Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.) "
      },
      {
        "Title": "Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function",
        "Description": "Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function. "
      }
    ]
  },
  {
    "Id": "CAPEC-134",
    "Description": "An attacker manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol. Many applications allow users to send email messages by filling in fields. For example, a web site may have a link to \"share this site with a friend\" where the user provides the recipient's email address and the web application fills out all the other fields, such as the subject and body. In this pattern, an attacker adds header and body information to an email message by injecting additional content in an input field used to construct a header of the mail message. This attack takes advantage of the fact that RFC 822 requires that headers in a mail message be separated by a carriage return. As a result, an attacker can inject new headers or content simply by adding a delimiting carriage return and then supplying the new heading and body information. This attack will not work if the user can only supply the message body since a carriage return in the body is treated as a normal character. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-135",
    "Description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Access Control",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Access Control",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": [
      {
        "Title": "Limit the usage of formatting string functions",
        "Description": "Limit the usage of formatting string functions. "
      },
      {
        "Title": "Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters",
        "Description": "Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters. "
      }
    ]
  },
  {
    "Id": "CAPEC-136",
    "Description": "An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "AccountabilityAuthenticationAuthorizationNon-Repudiation",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Access ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": [
      {
        "Title": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content",
        "Description": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content. "
      },
      {
        "Title": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages",
        "Description": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application. "
      }
    ]
  },
  {
    "Id": "CAPEC-137",
    "Description": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&amp;). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput&amp;new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Implement an audit log written to a separate host",
        "Description": "Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise. "
      },
      {
        "Title": "Treat all user input as untrusted data that must be validated before use",
        "Description": "Treat all user input as untrusted data that must be validated before use. "
      }
    ]
  },
  {
    "Id": "CAPEC-139",
    "Description": "An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \\) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Access Control",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Input validation",
        "Description": "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content, including remote and user-generated content",
        "Description": "Implementation: Perform input validation for all remote content, including remote and user-generated content. "
      },
      {
        "Title": "Implementation: Validate user input by only accepting known good",
        "Description": "Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach. "
      },
      {
        "Title": "Implementation: Prefer working without user input when using file system calls ",
        "Description": "Implementation: Prefer working without user input when using file system calls "
      },
      {
        "Title": "Implementation: Use indirect references rather than actual file names",
        "Description": "Implementation: Use indirect references rather than actual file names. "
      },
      {
        "Title": "Implementation: Use possible permissions on file access when developing and deploying web applications",
        "Description": "Implementation: Use possible permissions on file access when developing and deploying web applications. "
      }
    ]
  },
  {
    "Id": "CAPEC-14",
    "Description": "This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "The client software should not install untrusted code from a non-authenticated server",
        "Description": "The client software should not install untrusted code from a non-authenticated server. "
      },
      {
        "Title": "The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers",
        "Description": "The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers. "
      },
      {
        "Title": "Perform input validation for length of buffer inputs",
        "Description": "Perform input validation for length of buffer inputs. "
      },
      {
        "Title": "Use a language or compiler that performs automatic bounds checking",
        "Description": "Use a language or compiler that performs automatic bounds checking. "
      },
      {
        "Title": "Use an abstraction library to abstract away risky APIs",
        "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution. "
      },
      {
        "Title": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag",
        "Description": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. "
      },
      {
        "Title": "Ensure all buffer uses are consistently bounds-checked",
        "Description": "Ensure all buffer uses are consistently bounds-checked. "
      },
      {
        "Title": "Use OS-level preventative functionality",
        "Description": "Use OS-level preventative functionality. Not a complete solution. "
      }
    ]
  },
  {
    "Id": "CAPEC-141",
    "Description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Configuration: Disable client side caching",
        "Description": "Configuration: Disable client side caching. "
      },
      {
        "Title": "Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes",
        "Description": "Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes. "
      }
    ]
  },
  {
    "Id": "CAPEC-142",
    "Description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Configuration: Make sure your DNS servers have been updated to the latest versions ",
        "Description": "Configuration: Make sure your DNS servers have been updated to the latest versions "
      },
      {
        "Title": "Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache",
        "Description": "Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet. "
      },
      {
        "Title": "Configuration: Disable client side DNS caching",
        "Description": "Configuration: Disable client side DNS caching. "
      }
    ]
  },
  {
    "Id": "CAPEC-145",
    "Description": "An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-146",
    "Description": "An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema. Possible attacks are denial of service attacks by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data. In addition, manipulation of the data types described in the schema may affect the results of calculations taken by the document reader. For example, a float field could be changed to an int field. Finally, the adversary may change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B). ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable ExecutionResource Consumption"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Protect the schema against unauthorized modification",
        "Description": "Design: Protect the schema against unauthorized modification. "
      },
      {
        "Title": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document",
        "Description": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification. "
      },
      {
        "Title": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification",
        "Description": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification. "
      }
    ]
  },
  {
    "Id": "CAPEC-147",
    "Description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target. ",
    "Likelihood": "Low",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Build throttling mechanism into the resource allocation",
        "Description": "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval. "
      },
      {
        "Title": "Implementation: Provide for network flow control and traffic shaping to control access to the resources",
        "Description": "Implementation: Provide for network flow control and traffic shaping to control access to the resources. "
      }
    ]
  },
  {
    "Id": "CAPEC-148",
    "Description": "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-15",
    "Description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Perform allowlist validation against a positive specification for command length, type, and parameters",
        "Description": "Design: Perform allowlist validation against a positive specification for command length, type, and parameters. "
      },
      {
        "Title": "Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account ",
        "Description": "Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content",
        "Description": "Implementation: Perform input validation for all remote content. "
      },
      {
        "Title": "Implementation: Use type conversions such as JDBC prepared statements",
        "Description": "Implementation: Use type conversions such as JDBC prepared statements. "
      }
    ]
  },
  {
    "Id": "CAPEC-150",
    "Description": "An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-151",
    "Description": "Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials. Alternatively, an adversary may intercept a message from a legitimate sender and attempt to make it look like the message comes from them without changing its content. The latter form of this attack can be used to hijack credentials from legitimate users. Identity Spoofing attacks need not be limited to transmitted messages - any resource that is associated with an identity (for example, a file with a signature) can be the target of an attack where the adversary attempts to change the apparent identity. This attack differs from Content Spoofing attacks where the adversary does not wish to change the apparent identity of the message but instead wishes to change what the message says. In an Identity Spoofing attack, the adversary is attempting to change the identity of the content. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAuthenticationAccess Control",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Employ robust authentication processes (e",
        "Description": "Employ robust authentication processes (e.g., multi-factor authentication). "
      }
    ]
  },
  {
    "Id": "CAPEC-153",
    "Description": "An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target. For example, using a different character encoding might cause dangerous text to be treated as safe text. Alternatively, the attacker may use certain flags, such as file extensions, to make a target application believe that provided data should be handled using a certain interpreter when the data is not actually of the appropriate type. This can lead to bypassing protection mechanisms, forcing the target to use specific components for input processing, or otherwise causing the user's data to be handled differently than might otherwise be expected. This attack differs from Variable Manipulation in that Variable Manipulation attempts to subvert the target's processing through the value of the input while Input Data Manipulation seeks to control how the input is processed. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-155",
    "Description": "An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-157",
    "Description": "In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Man-In-The-Middle attacks (CAPEC-94), but are entirely passive. MITM attacks are predominantly active and often alter the content of the communications themselves. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Encrypt sensitive information when transmitted on insecure mediums to prevent interception",
        "Description": "Encrypt sensitive information when transmitted on insecure mediums to prevent interception. "
      }
    ]
  },
  {
    "Id": "CAPEC-158",
    "Description": "In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Obfuscate network traffic through encryption to prevent its readability by network sniffers",
        "Description": "Obfuscate network traffic through encryption to prevent its readability by network sniffers. "
      },
      {
        "Title": "Employ appropriate levels of segmentation to your network in accordance with best practices",
        "Description": "Employ appropriate levels of segmentation to your network in accordance with best practices. "
      }
    ]
  },
  {
    "Id": "CAPEC-16",
    "Description": "An attacker tries each of the words in a dictionary as passwords to gain access to the system via some user's account. If the password chosen by the user was a word within the dictionary, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern. Dictionary Attacks differ from similar attacks such as Password Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage unknown username/password combinations and don't care about inducing account lockouts. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthentication",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Create a strong password policy and ensure that your system enforces this policy",
        "Description": "Create a strong password policy and ensure that your system enforces this policy. "
      },
      {
        "Title": "Implement an intelligent password throttling mechanism",
        "Description": "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2. "
      },
      {
        "Title": "Leverage multi-factor authentication for all authentication services",
        "Description": "Leverage multi-factor authentication for all authentication services. "
      }
    ]
  },
  {
    "Id": "CAPEC-160",
    "Description": "Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support &lt;script&gt; tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-162",
    "Description": "An adversary exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server, which processes the modified data. For example, eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the adversary to acquire items at a lower cost than the merchant intended. The adversary performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-166",
    "Description": "An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions. Since these functions are usually intended as emergency features to return an application to a stable configuration if the current configuration degrades functionality, they may not be as strongly secured as other configuration options. The resetting of values is dangerous as it may enable undesired functionality, disable services, or modify access controls. At the very least this is a nuisance attack since the administrator will need to re-apply their configuration. At worst, this attack can open avenues for powerful attacks against the application, and, if it isn't obvious that the configuration has been reset, these vulnerabilities may be present a long time before they are notices. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-168",
    "Description": "An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple \"files\" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Use FAT file systems which do not support Alternate Data Streams",
        "Description": "Design: Use FAT file systems which do not support Alternate Data Streams. "
      },
      {
        "Title": "Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered",
        "Description": "Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered. "
      },
      {
        "Title": "Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations",
        "Description": "Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations. "
      }
    ]
  },
  {
    "Id": "CAPEC-169",
    "Description": "An adversary engages in probing and exploration activities to identify constituents and properties of the target. Footprinting is a general term to describe a variety of information gathering techniques, often used by attackers in preparation for some attack. It consists of using tools to learn as much as possible about the composition, configuration, and security mechanisms of the targeted application, system or network. Information that might be collected during a footprinting effort could include open ports, applications and their versions, network topology, and similar information. While footprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks. ",
    "Likelihood": "High",
    "Impact": "Very Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Keep patches up to date by installing weekly or daily if possible",
        "Description": "Keep patches up to date by installing weekly or daily if possible. "
      },
      {
        "Title": "Shut down unnecessary services/ports",
        "Description": "Shut down unnecessary services/ports. "
      },
      {
        "Title": "Change default passwords by choosing strong passwords",
        "Description": "Change default passwords by choosing strong passwords. "
      },
      {
        "Title": "Curtail unexpected input",
        "Description": "Curtail unexpected input. "
      },
      {
        "Title": "Encrypt and password-protect sensitive data",
        "Description": "Encrypt and password-protect sensitive data. "
      },
      {
        "Title": "Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents",
        "Description": "Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents. "
      }
    ]
  },
  {
    "Id": "CAPEC-17",
    "Description": "An attack of this type exploits a system's configuration that allows an attacker to either directly access an executable file, for example through shell access; or in a possible worst case allows an attacker to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Enforce principle of least privilege ",
        "Description": "Design: Enforce principle of least privilege "
      },
      {
        "Title": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands",
        "Description": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. "
      },
      {
        "Title": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables",
        "Description": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables. "
      }
    ]
  },
  {
    "Id": "CAPEC-170",
    "Description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks. ",
    "Likelihood": "High",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": [
      {
        "Title": "Implementation: Obfuscate server fields of HTTP response",
        "Description": "Implementation: Obfuscate server fields of HTTP response. "
      },
      {
        "Title": "Implementation: Hide inner ordering of HTTP response header",
        "Description": "Implementation: Hide inner ordering of HTTP response header. "
      },
      {
        "Title": "Implementation: Customizing HTTP error codes such as 404 or 500",
        "Description": "Implementation: Customizing HTTP error codes such as 404 or 500. "
      },
      {
        "Title": "Implementation: Hide URL file extension",
        "Description": "Implementation: Hide URL file extension. "
      },
      {
        "Title": "Implementation: Hide HTTP response header software information filed",
        "Description": "Implementation: Hide HTTP response header software information filed. "
      },
      {
        "Title": "Implementation: Hide cookie's software information filed",
        "Description": "Implementation: Hide cookie's software information filed. "
      },
      {
        "Title": "Implementation: Appropriately deal with error messages",
        "Description": "Implementation: Appropriately deal with error messages. "
      },
      {
        "Title": "Implementation: Obfuscate database type in Database API's error message",
        "Description": "Implementation: Obfuscate database type in Database API's error message. "
      }
    ]
  },
  {
    "Id": "CAPEC-174",
    "Description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document. These 'FlashVars' are most often passed to the Flash file via URL arguments or from the Object or Embed tag within the embedding HTML document. If these FlashVars are not properly sanitized, an adversary may be able to embed malicious content (such as scripts) into the HTML document. The injected parameters can also provide the adversary control over other objects within the Flash file as well as full control over the parent document's DOM model. As such, this is a form of HTTP parameter injection, but the abilities granted to the Flash document (such as access to a page's document model, including associated cookies) make this attack more flexible. Flash Parameter Injection attacks can also preface further attacks such as various forms of Cross-Site Scripting (XSS) attacks in addition to Session Hijacking attacks. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "User input must be sanitized according to context before reflected back to the user",
        "Description": "User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies). "
      }
    ]
  },
  {
    "Id": "CAPEC-176",
    "Description": "An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-18",
    "Description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (&lt;img&gt;), comments in XML documents (&lt; !-CDATA-&gt;), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an attacker to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote attacker to collect and interpret the output of said attack. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation",
        "Description": "In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered. "
      },
      {
        "Title": "All output displayed to clients must be properly escaped",
        "Description": "All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed. "
      }
    ]
  },
  {
    "Id": "CAPEC-180",
    "Description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack. Most commonly, attackers would take advantage of controls that provided too little protection for sensitive activities in order to perform actions that should be denied to them. In some circumstances, an attacker may be able to take advantage of overly restrictive access control policies, initiating denial of services (if an application locks because it unexpectedly failed to be granted access) or causing other legitimate actions to fail due to security. The latter class of attacks, however, is usually less severe and easier to detect than attacks based on inadequate security restrictions. This attack pattern differs from CAPEC 1, \"Accessing Functionality Not Properly Constrained by ACLs\" in that the latter describes attacks where sensitive functionality lacks access controls, where, in this pattern, the access control is present, but incorrectly configured. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Access ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Configure the access control correctly",
        "Description": "Design: Configure the access control correctly. "
      }
    ]
  },
  {
    "Id": "CAPEC-182",
    "Description": "An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "AccountabilityAuthenticationAuthorizationNon-Repudiation",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Access ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": [
      {
        "Title": "Implementation: remove sensitive information such as user name and password in the SWF file",
        "Description": "Implementation: remove sensitive information such as user name and password in the SWF file. "
      },
      {
        "Title": "Implementation: use validation on both client and server side",
        "Description": "Implementation: use validation on both client and server side. "
      },
      {
        "Title": "Implementation: remove debug information",
        "Description": "Implementation: remove debug information. "
      },
      {
        "Title": "Implementation: use SSL when loading external data ",
        "Description": "Implementation: use SSL when loading external data "
      },
      {
        "Title": "Implementation: use crossdomain",
        "Description": "Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain. "
      }
    ]
  },
  {
    "Id": "CAPEC-183",
    "Description": "An attacker exploits weaknesses in input validation on IMAP/SMTP servers to execute commands on the server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-184",
    "Description": "An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-185",
    "Description": "An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack. ",
    "Likelihood": null,
    "Impact": "Very High",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-186",
    "Description": "An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an attacker controlled source. Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an attacker to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity. As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source. Virtually all software requires frequent updates or patches, giving the attacker immense latitude when structuring the attack, as well as many targets of opportunity. Attacks involving malicious software updates can be targeted or untargeted in reference to a population of users, and can also involve manual and automatic means of payload installation. Untargeted attacks rely upon a mass delivery system such as spamming, phishing, or trojans/botnets to distribute emails or other messages to vast populations of users. Targeted attacks aim at a particular demographic or user population. Corporate Facebook or Myspace pages make it easy to target users of a specific company or affiliation without relying on email address harvesting or spamming. One phishing-assisted variation on this attack involves hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update. This type of attack has also been conducted using an Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update. While both methods involve a high degree of automated mechanisms to support the attack, the primary vector for achieving the installation of the update remains a manual user-directed process, although clicking a link within an IM client or web application may initiate the update. Other class of attacks focus on firmware, where malicious updates are made to the core system firmware or BIOS. Since this occurs outside the controls of the operating system, the OS detection and prevention mechanisms do not aid, thus allowing an adversary to evade defenses as well as gain persistence on the target's system. Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Access ControlAvailabilityConfidentiality",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Validate software updates before installing",
        "Description": "Validate software updates before installing. "
      }
    ]
  },
  {
    "Id": "CAPEC-187",
    "Description": "An attacker exploits a weakness in a server or client's process of delivering and verifying the integrity of code supplied by an update-providing server or mechanism to cause code of the attackers' choosing to be downloaded and installed as a software update. Attacks against automated update mechanisms involve attack vectors which are specific to the type of update mechanism, but typically involve two different attack strategies: redirection or spoofing. Redirection-based attacks exploit two layers of weaknesses in server or client software to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update. One predominate type of redirection attack requires DNS spoofing or hijacking of a domain name corresponding to an update server. The target software initiates an update request and the DNS request resolves the domain name of the update server to the IP address of the attacker, at which point the software accepts updates either transmitted by or pulled from the attackers' server. Attacks against DNS mechanisms comprise an initial phase of a chain of attacks that facilitate automated update hijacking attack, and such attacks have a precedent in targeted activities that have been as complex as DNS/BIND attacks of corporate infrastructures, to untargeted attacks aimed at compromising home broadband routers, as well as attacks involving the compromise of wireless access points, as well as 'evil twin' attacks coupled with DNS redirection. Due to the plethora of options open to the attacker in forcing name resolution to arbitrary servers the Automated Update Hijacking attack strategies are the tip of the spear for many multi-stage attack chains. The second weakness that is exploited by the attacker is the lack of integrity checking by the software in validating the update. Software which relies only upon domain name resolution to establish the identity of update code is particularly vulnerable, because this signals an absence of other security countermeasures that could be applied to invalidate the attackers' payload on basis of code identity, hashing, signing, encryption, and other integrity checking mechanisms. Redirection-based attack patterns work equally well against client-side software as well as local servers or daemons that provide software update functionality. One precedent of redirection-based attacks involves the active exploitation of Firefox extensions, such as the Google Toolbar, Yahoo Toolbar, Facebook Toolbar, and others. The second strategy employed in Automated Hijacking Attacks are spoofing strategies, including content or identity spoofing, as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. Such attacks have numerous precedents, one in particular being eTrust Antivirus Webscan Automated Update Remote Code Execution vulnerability (CVE-2006-3976) and (CVE-2006-3977) whereby an ActiveX control could be remotely manipulated by an attacker controlled web page to download and execute the attackers' code without integrity checking. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-19",
    "Description": "An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. The adversary leverages this capability to execute their own script by embedding it within other scripts that the target software is likely to execute. The adversary must have the ability to inject their script into a script that is likely to be executed. If this is done, then the adversary can potentially launch a variety of probes and attacks against the web server's local environment, in many cases the so-called DMZ, back end resources the web server can communicate with, and other hosts. With the proliferation of intermediaries, such as Web App Firewalls, network devices, and even printers having JVMs and Web servers, there are many locales where an attacker can inject malicious scripts. Since this attack pattern defines scripts within scripts, there are likely privileges to execute said attack on the host. These attacks are not solely limited to the server side, client side scripts like Ajax and client side JavaScript can contain malicious scripts as well. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use browser technologies that do not allow client side scripting",
        "Description": "Use browser technologies that do not allow client side scripting. "
      },
      {
        "Title": "Utilize strict type, character, and encoding enforcement",
        "Description": "Utilize strict type, character, and encoding enforcement. "
      },
      {
        "Title": "Server side developers should not proxy content via XHR or other means",
        "Description": "Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. "
      },
      {
        "Title": "Ensure all content that is delivered to client is sanitized against an acceptable content specification",
        "Description": "Ensure all content that is delivered to client is sanitized against an acceptable content specification. "
      },
      {
        "Title": "Perform input validation for all remote content",
        "Description": "Perform input validation for all remote content. "
      },
      {
        "Title": "Perform output validation for all remote content",
        "Description": "Perform output validation for all remote content. "
      },
      {
        "Title": "Disable scripting languages such as JavaScript in browser ",
        "Description": "Disable scripting languages such as JavaScript in browser "
      },
      {
        "Title": "Session tokens for specific host ",
        "Description": "Session tokens for specific host "
      },
      {
        "Title": "Patching software",
        "Description": "Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. "
      },
      {
        "Title": "Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode ",
        "Description": "Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode "
      }
    ]
  },
  {
    "Id": "CAPEC-191",
    "Description": "An adversary engages in activities to discover any sensitive constants present within the compiled code of an executable. These constants may include literal ASCII strings within the file itself, or possibly strings hard-coded into particular routines that can be revealed by code refactoring methods including static and dynamic analysis. One specific example of a sensitive string is a hard-coded password. Typical examples of software with hard-coded passwords include server-side executables which may check for a hard-coded password or key during a user's authentication with the server. Hard-coded passwords can also be present in client-side executables which utilize the password or key when connecting to either a remote component, such as a database server, licensing server, or otherwise, or a processes on the same host that expects a key or password. When analyzing an executable the adversary may search for the presence of such strings by analyzing the byte-code of the file itself. Example utilities for revealing strings within a file include 'strings,' 'grep,' or other variants of these programs depending upon the type of operating system used. These programs can be used to dump any ASCII or UNICODE strings contained within a program. Strings can also be searched for using a hex editors by loading the binary or object code file and utilizing native search functions such as regular expressions. Additionally, sensitive numeric values can occur within an executable. This can be used to discover the location of cryptographic constants. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-193",
    "Description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized \"include\" or \"require\" call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "AccountabilityAuthenticationAuthorizationNon-Repudiation",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Access ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": [
      {
        "Title": "Implementation: Perform input validation for all remote content, including remote and user-generated content ",
        "Description": "Implementation: Perform input validation for all remote content, including remote and user-generated content "
      },
      {
        "Title": "Implementation: Only allow known files to be included (allowlist) ",
        "Description": "Implementation: Only allow known files to be included (allowlist) "
      },
      {
        "Title": "Implementation: Make use of indirect references passed in URL parameters instead of file names ",
        "Description": "Implementation: Make use of indirect references passed in URL parameters instead of file names "
      },
      {
        "Title": "Configuration: Ensure that remote scripts cannot be include in the \"include\" or \"require\" PHP directives ",
        "Description": "Configuration: Ensure that remote scripts cannot be include in the \"include\" or \"require\" PHP directives "
      }
    ]
  },
  {
    "Id": "CAPEC-194",
    "Description": "An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Alter Execution Logic"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Hide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-197",
    "Description": "An attacker submits an XML document to a target application where the XML document uses nested entity expansion to produce an excessively large output XML. XML allows the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable ExecutionResource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Use libraries and templates that minimize unfiltered input",
        "Description": "Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion. "
      },
      {
        "Title": "Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects",
        "Description": "Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects. If must use DTD, normalize, filter, use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources. "
      }
    ]
  },
  {
    "Id": "CAPEC-198",
    "Description": "An adversary distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page. When the third party web server receives the crafted request and notes the error it then creates an error message that echoes the malformed message, including the exploit. Doing this converts the exploit portion of the message into to valid language elements that are executed by the viewing browser. When a victim executes the query provided by the attacker the infected error message error message is returned including the exploit code which then runs in the victim's browser. XSS can result in execution of code as well as data leakage (e.g. session cookies can be sent to the attacker). This type of attack is especially dangerous since the exploit appears to come from the third party web server, who the victim may trust and hence be more vulnerable to deception. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Use libraries and templates that minimize unfiltered input",
        "Description": "Design: Use libraries and templates that minimize unfiltered input. "
      },
      {
        "Title": "Implementation: Normalize, filter and use an allowlist for any input that will be used in error messages",
        "Description": "Implementation: Normalize, filter and use an allowlist for any input that will be used in error messages. "
      },
      {
        "Title": "Implementation: The victim should configure the browser to minimize active content from untrusted sources",
        "Description": "Implementation: The victim should configure the browser to minimize active content from untrusted sources. "
      }
    ]
  },
  {
    "Id": "CAPEC-199",
    "Description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the \"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass filters where \"script\" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "AccountabilityAuthenticationAuthorizationNon-Repudiation",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Access ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Use browser technologies that do not allow client side scripting",
        "Description": "Design: Use browser technologies that do not allow client side scripting. "
      },
      {
        "Title": "Design: Utilize strict type, character, and encoding enforcement ",
        "Description": "Design: Utilize strict type, character, and encoding enforcement "
      },
      {
        "Title": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification",
        "Description": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. "
      },
      {
        "Title": "Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering",
        "Description": "Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering. "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content, including remote and user-generated content ",
        "Description": "Implementation: Perform input validation for all remote content, including remote and user-generated content "
      },
      {
        "Title": "Implementation: Perform output validation for all remote content",
        "Description": "Implementation: Perform output validation for all remote content. "
      },
      {
        "Title": "Implementation: Disable scripting languages such as JavaScript in browser ",
        "Description": "Implementation: Disable scripting languages such as JavaScript in browser "
      },
      {
        "Title": "Implementation: Patching software",
        "Description": "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. "
      }
    ]
  },
  {
    "Id": "CAPEC-2",
    "Description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name",
        "Description": "Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name. "
      },
      {
        "Title": "When implementing security features, consider how they can be misused and made to turn on themselves",
        "Description": "When implementing security features, consider how they can be misused and made to turn on themselves. "
      }
    ]
  },
  {
    "Id": "CAPEC-20",
    "Description": "An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext. ",
    "Likelihood": "Low",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use commonly accepted algorithms and recommended key sizes",
        "Description": "Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long. "
      },
      {
        "Title": "In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security",
        "Description": "In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months. "
      }
    ]
  },
  {
    "Id": "CAPEC-202",
    "Description": "An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures. For example, servers may assume that clients will accurately compute values (such as prices), will send correctly structured messages, and will attempt to ensure efficient interactions with the server. By reverse-engineering a client and creating their own version, an adversary can take advantage of these assumptions to abuse service functionality. For example, a purchasing service might send a unit price to its client and expect the client to correctly compute the total cost of a purchase. If the adversary uses a malicious client, however, the adversary could ignore the server input and declare any total price. Likewise, an adversary could configure the client to retain network or other server resources for longer than legitimately necessary in order to degrade server performance. Even services with general clients can be susceptible to this attack if they assume certain client behaviors. However, such services generally can make fewer assumptions about the behavior of their clients in the first place and, as such, are less likely to make assumptions that an adversary can exploit. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-203",
    "Description": "An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys",
        "Description": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys. "
      },
      {
        "Title": "Employ a robust and layered defensive posture in order to prevent unauthorized users on your system",
        "Description": "Employ a robust and layered defensive posture in order to prevent unauthorized users on your system. "
      },
      {
        "Title": "Employ robust identification and audit/blocking using an allowlist of applications on your system",
        "Description": "Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern. "
      }
    ]
  },
  {
    "Id": "CAPEC-204",
    "Description": "An attacker examines a target application's cache for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-206",
    "Description": "The attacker extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the attacker has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the attacker to execute arbitrary code on the victim's computer. ",
    "Likelihood": null,
    "Impact": "Very High",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-207",
    "Description": "An attacker removes or disables functionality on the client that the server assumes to be present and trustworthy. Attackers can, in some cases, get around logic put in place to 'guard' sensitive functionality or data. Client applications may include functionality that a server relies on for correct and secure operation. This functionality can include, but is not limited to, filters to prevent the sending of dangerous content to the server, logical functionality such as price calculations, and authentication logic to ensure that only authorized users are utilizing the client. If an attacker can disable this functionality on the client, they can perform actions that the server believes are prohibited. This can result in client behavior that violates assumptions by the server leading to a variety of possible attacks. In the above examples, this could include the sending of dangerous content (such as scripts) to the server, incorrect price calculations, or unauthorized access to server resources. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "AccountabilityAuthenticationAuthorizationNon-Repudiation",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Access ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side",
        "Description": "Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. "
      },
      {
        "Title": "Design: Ship client-side application with integrity checks (code signing) when possible",
        "Description": "Design: Ship client-side application with integrity checks (code signing) when possible. "
      },
      {
        "Title": "Design: Use obfuscation and other techniques to prevent reverse engineering the client code",
        "Description": "Design: Use obfuscation and other techniques to prevent reverse engineering the client code. "
      }
    ]
  },
  {
    "Id": "CAPEC-208",
    "Description": "An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-209",
    "Description": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-21",
    "Description": "An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID, resource ID, cookie, etc.) to perform authorized actions under the guise of an authenticated user or service. Attacks leveraging trusted identifiers typically result in the adversary laterally moving within the local network, since users are often allowed to authenticate to systems/applications within the network using the same identifier. This further allows the adversary to obtain sensitive data, download/install malware on the system, pose as a legitimate user for social engineering purposes, and more. Attacks on trusted identifiers take advantage of the fact that some software accepts user input without verifying its authenticity. For example, in a message queuing system that allows service requesters to post messages to its queue through an open channel (such as anonymous FTP), authorization is done through checking group or role membership contained in the posted message. However, there is no proof that the message itself, the information in the message (such group or role membership), or the process that wrote the message to the queue is authentic and authorized to do so. Many server side processes are vulnerable to these attacks because the server to server communications have not been analyzed from a security perspective or the processes \"trust\" other systems because they are behind a firewall. Similarly, servers that use easy to guess or spoofable schemes for representing digital identity can also be vulnerable. Such systems frequently use schemes without cryptography and digital signatures (or with broken cryptography). Identifiers may be guessed or obtained due to insufficient randomness, poor protection (passed/stored in the clear), lack of integrity (unsigned), or improper correlation with access control policy enforcement points. Exposed configuration and properties files that contain sensitive data may additionally provide an adversary with the information needed to obtain these identifiers. An adversary may also \"ride\" an identifier via a malicious link, as is the case in Cross Site Request Forgery (CSRF) attacks. Regardless of the attack vector, successful spoofing and impersonation of trusted credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthentication",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit",
        "Description": "Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit. "
      },
      {
        "Title": "Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key",
        "Description": "Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. "
      },
      {
        "Title": "Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens",
        "Description": "Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens. "
      },
      {
        "Title": "Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted",
        "Description": "Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted. "
      },
      {
        "Title": "Design: Use strong session identifiers that are protected in transit and at rest",
        "Description": "Design: Use strong session identifiers that are protected in transit and at rest. "
      },
      {
        "Title": "Implementation: Utilize a session timeout for all sessions, for example 20 minutes",
        "Description": "Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated. "
      },
      {
        "Title": "Implementation: Verify authenticity of all identifiers at runtime",
        "Description": "Implementation: Verify authenticity of all identifiers at runtime. "
      }
    ]
  },
  {
    "Id": "CAPEC-212",
    "Description": "An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": [
      {
        "Title": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application",
        "Description": "Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes. "
      },
      {
        "Title": "When implementing security features, consider how they can be misused and compromised",
        "Description": "When implementing security features, consider how they can be misused and compromised. "
      }
    ]
  },
  {
    "Id": "CAPEC-214",
    "Description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes any stack traces produced by error messages. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to cause the targeted application to return an error including a stack trace, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. The stack trace enumerates the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-215",
    "Description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information. ",
    "Likelihood": "High",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Construct a 'code book' for error messages",
        "Description": "Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally. "
      },
      {
        "Title": "Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks",
        "Description": "Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion. "
      },
      {
        "Title": "Implementation: Obfuscate server fields of HTTP response",
        "Description": "Implementation: Obfuscate server fields of HTTP response. "
      },
      {
        "Title": "Implementation: Hide inner ordering of HTTP response header",
        "Description": "Implementation: Hide inner ordering of HTTP response header. "
      },
      {
        "Title": "Implementation: Customizing HTTP error codes such as 404 or 500",
        "Description": "Implementation: Customizing HTTP error codes such as 404 or 500. "
      },
      {
        "Title": "Implementation: Hide HTTP response header software information filed",
        "Description": "Implementation: Hide HTTP response header software information filed. "
      },
      {
        "Title": "Implementation: Hide cookie's software information filed",
        "Description": "Implementation: Hide cookie's software information filed. "
      },
      {
        "Title": "Implementation: Obfuscate database type in Database API's error message",
        "Description": "Implementation: Obfuscate database type in Database API's error message. "
      }
    ]
  },
  {
    "Id": "CAPEC-217",
    "Description": "An adversary takes advantage of incorrectly configured SSL communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server. ",
    "Likelihood": "Low",
    "Impact": null,
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Usage of configuration settings, such as stream ciphers vs",
        "Description": "Usage of configuration settings, such as stream ciphers vs. block ciphers and setting timeouts on SSL sessions to extremely low values lessens the potential impact. Use of later versions of TLS (e.g. TLS 1.1+) can also be effective, but not all clients or servers support the later versions. "
      }
    ]
  },
  {
    "Id": "CAPEC-218",
    "Description": "An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party",
        "Description": "Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party. "
      }
    ]
  },
  {
    "Id": "CAPEC-22",
    "Description": "An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system",
        "Description": "Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system. "
      },
      {
        "Title": "Design: Do not rely on client validation or encoding for security purposes",
        "Description": "Design: Do not rely on client validation or encoding for security purposes. "
      },
      {
        "Title": "Design: Utilize digital signatures to increase authentication assurance",
        "Description": "Design: Utilize digital signatures to increase authentication assurance. "
      },
      {
        "Title": "Design: Utilize two factor authentication to increase authentication assurance",
        "Description": "Design: Utilize two factor authentication to increase authentication assurance. "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content",
        "Description": "Implementation: Perform input validation for all remote content. "
      }
    ]
  },
  {
    "Id": "CAPEC-220",
    "Description": "An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions. For example, an authentication protocol might be used to establish the identities of the server and client while a separate messaging protocol might be used to exchange data. If there is a weakness in a protocol used by the client and server, an attacker might take advantage of this to perform various types of attacks. For example, if the attacker is able to manipulate an authentication protocol, the attacker may be able spoof other clients or servers. If the attacker is able to manipulate a messaging protocol, the may be able to read sensitive information or modify message contents. This attack is often made easier by the fact that many clients and servers support multiple protocols to perform similar roles. For example, a server might support several different authentication protocols in order to support a wide range of clients, including legacy clients. Some of the older protocols may have vulnerabilities that allow an attacker to manipulate client-server interactions. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-224",
    "Description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target. ",
    "Likelihood": "High",
    "Impact": "Very Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible",
        "Description": "While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible. "
      }
    ]
  },
  {
    "Id": "CAPEC-226",
    "Description": "An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server. For example, a credential in the form of a web cookie might have a field that indicates the access rights of a user. By manually tweaking this cookie, a user might be able to increase their access rights to the server. Alternately an attacker may be able to manipulate an existing credential to appear as a different user. This attack differs from falsification through prediction in that the user bases their modified credentials off existing credentials instead of using patterns detected in prior credentials to create a new credential that is accepted because it fits the pattern. As a result, an attacker may be able to impersonate other users or elevate their permissions to a targeted service. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-229",
    "Description": "This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.) which manage data in an inefficient manner. The attacker crafts an serialized data file with multiple configuration parameters in the same dataset. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm. The weakness being exploited is tied to parser implementation and not language specific. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "This attack may be mitigated completely by using a parser that is not using a vulnerable container",
        "Description": "This attack may be mitigated completely by using a parser that is not using a vulnerable container. "
      },
      {
        "Title": "Mitigation may limit the number of configuration parameters per dataset",
        "Description": "Mitigation may limit the number of configuration parameters per dataset. "
      }
    ]
  },
  {
    "Id": "CAPEC-23",
    "Description": "An attack of this type exploits the host's trust in executing remote content, including binary files. The files are poisoned with a malicious payload (targeting the file systems accessible by the target software) by the adversary and may be passed through standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes. Vulnerabilities of this type have been found in a wide variety of commercial applications from Microsoft Office to Adobe Acrobat and Apple Safari web browser. When the adversary knows the standard handling routines and can identify vulnerabilities and entry points, they can be exploited by otherwise seemingly normal content. Once the attack is executed, the adversary's program can access relative directories such as C:\\Program Files or other standard system directories to launch further attacks. In a worst case scenario, these programs are combined with other propagation logic and work as a virus. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Enforce principle of least privilege ",
        "Description": "Design: Enforce principle of least privilege "
      },
      {
        "Title": "Design: Validate all input for content including files",
        "Description": "Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example) "
      },
      {
        "Title": "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities",
        "Description": "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution. "
      },
      {
        "Title": "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host",
        "Description": "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host. "
      },
      {
        "Title": "Implementation: Virus scanning on host ",
        "Description": "Implementation: Virus scanning on host "
      },
      {
        "Title": "Implementation: Host integrity monitoring for critical files, directories, and processes",
        "Description": "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin. "
      }
    ]
  },
  {
    "Id": "CAPEC-230",
    "Description": "Applications often need to transform data in and out of the XML format by using an XML parser. It may be possible for an adversary to inject data that may have an adverse effect on the XML parser when it is being processed. By nesting XML data and causing this data to be continuously self-referential, an adversary can cause the XML parser to consume more resources while processing, causing excessive memory consumption and CPU utilization. An adversary's goal is to leverage parser failure to their advantage. In most cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89]. XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine",
        "Description": "Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser. "
      },
      {
        "Title": "Perform validation on canonical data",
        "Description": "Perform validation on canonical data. "
      },
      {
        "Title": "Pick a robust implementation of an XML parser",
        "Description": "Pick a robust implementation of an XML parser. "
      },
      {
        "Title": "Validate XML against a valid schema or DTD prior to parsing",
        "Description": "Validate XML against a valid schema or DTD prior to parsing. "
      }
    ]
  },
  {
    "Id": "CAPEC-231",
    "Description": "Applications often need to transform data in and out of serialized data formats, such as XML and YAML, by using a data parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the parser, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An adversary's goal is to leverage parser failure to their advantage. In many cases this type of an attack will result in an XML Denial of Service (XDoS) or similar Denial of Service (DoS) due to an application becoming unstable, freezing, or crashing. However it is possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89]. DoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious data payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in serialized data related DoS is that the service provider generally must inspect, parse, and validate the data messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that DoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine",
        "Description": "Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser. "
      },
      {
        "Title": "Perform validation on canonical data",
        "Description": "Perform validation on canonical data. "
      },
      {
        "Title": "Pick a robust implementation of the serialized data parser",
        "Description": "Pick a robust implementation of the serialized data parser. "
      },
      {
        "Title": "Validate data against a valid schema or DTD prior to parsing",
        "Description": "Validate data against a valid schema or DTD prior to parsing. "
      }
    ]
  },
  {
    "Id": "CAPEC-233",
    "Description": "An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-234",
    "Description": "An attacker gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code. Processes can be hijacked through improper handling of user input (for example, a buffer overflow or certain types of injection attacks) or by utilizing system utilities that support process control that have been inadequately secured. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-236",
    "Description": "Attackers can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means. Having done so, the Attacker may not only likely access functionality the system's designer didn't intend for them, but they may also go undetected or deny other users essential service in a catastrophic (or insidiously subtle) way. ",
    "Likelihood": "Low",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code",
        "Description": "Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code. "
      },
      {
        "Title": "Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope",
        "Description": "Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope. "
      }
    ]
  },
  {
    "Id": "CAPEC-24",
    "Description": "In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered). ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      }
    ],
    "Mitigations": [
      {
        "Title": "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through",
        "Description": "Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs. "
      },
      {
        "Title": "Pre-design: Use a language or compiler that performs automatic bounds checking",
        "Description": "Pre-design: Use a language or compiler that performs automatic bounds checking. "
      },
      {
        "Title": "Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag",
        "Description": "Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. "
      },
      {
        "Title": "Operational: Use OS-level preventative functionality",
        "Description": "Operational: Use OS-level preventative functionality. Not a complete solution. "
      },
      {
        "Title": "Design: Use an abstraction library to abstract away risky APIs",
        "Description": "Design: Use an abstraction library to abstract away risky APIs. Not a complete solution. "
      }
    ]
  },
  {
    "Id": "CAPEC-240",
    "Description": "An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Ensure all input content that is delivered to client is sanitized against an acceptable content specification",
        "Description": "Ensure all input content that is delivered to client is sanitized against an acceptable content specification. "
      },
      {
        "Title": "Perform input validation for all content",
        "Description": "Perform input validation for all content. "
      },
      {
        "Title": "Enforce regular patching of software",
        "Description": "Enforce regular patching of software. "
      }
    ]
  },
  {
    "Id": "CAPEC-242",
    "Description": "An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": [
      {
        "Title": "Utilize strict type, character, and encoding enforcement ",
        "Description": "Utilize strict type, character, and encoding enforcement "
      },
      {
        "Title": "Ensure all input content that is delivered to client is sanitized against an acceptable content specification",
        "Description": "Ensure all input content that is delivered to client is sanitized against an acceptable content specification. "
      },
      {
        "Title": "Perform input validation for all content",
        "Description": "Perform input validation for all content. "
      },
      {
        "Title": "Enforce regular patching of software",
        "Description": "Enforce regular patching of software. "
      }
    ]
  },
  {
    "Id": "CAPEC-243",
    "Description": "An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Use libraries and templates that minimize unfiltered input",
        "Description": "Design: Use libraries and templates that minimize unfiltered input. "
      },
      {
        "Title": "Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content",
        "Description": "Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content. "
      },
      {
        "Title": "Implementation: The victim should configure the browser to minimize active content from untrusted sources",
        "Description": "Implementation: The victim should configure the browser to minimize active content from untrusted sources. "
      }
    ]
  },
  {
    "Id": "CAPEC-244",
    "Description": "An attack of this type exploits the ability of most browsers to interpret \"data\", \"javascript\" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "AccountabilityAuthenticationAuthorizationNon-Repudiation",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Access ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Use browser technologies that do not allow client side scripting",
        "Description": "Design: Use browser technologies that do not allow client side scripting. "
      },
      {
        "Title": "Design: Utilize strict type, character, and encoding enforcement",
        "Description": "Design: Utilize strict type, character, and encoding enforcement. "
      },
      {
        "Title": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification",
        "Description": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. "
      },
      {
        "Title": "Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering",
        "Description": "Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering. "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content, including remote and user-generated content ",
        "Description": "Implementation: Perform input validation for all remote content, including remote and user-generated content "
      },
      {
        "Title": "Implementation: Perform output validation for all remote content",
        "Description": "Implementation: Perform output validation for all remote content. "
      },
      {
        "Title": "Implementation: Disable scripting languages such as JavaScript in browser ",
        "Description": "Implementation: Disable scripting languages such as JavaScript in browser "
      },
      {
        "Title": "Implementation: Patching software",
        "Description": "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. "
      }
    ]
  },
  {
    "Id": "CAPEC-245",
    "Description": "The attacker bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the &lt; before a script command, (&lt;&lt;script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the attacker can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Use libraries and templates that minimize unfiltered input",
        "Description": "Design: Use libraries and templates that minimize unfiltered input. "
      },
      {
        "Title": "Implementation: Normalize, filter and sanitize all user supplied fields",
        "Description": "Implementation: Normalize, filter and sanitize all user supplied fields. "
      },
      {
        "Title": "Implementation: The victim should configure the browser to minimize active content from untrusted sources",
        "Description": "Implementation: The victim should configure the browser to minimize active content from untrusted sources. "
      }
    ]
  },
  {
    "Id": "CAPEC-247",
    "Description": "An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the attacker to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Use libraries and templates that minimize unfiltered input",
        "Description": "Design: Use libraries and templates that minimize unfiltered input. "
      },
      {
        "Title": "Implementation: Normalize, filter and use an allowlist for any input that will be included in any subsequent web pages or back end operations",
        "Description": "Implementation: Normalize, filter and use an allowlist for any input that will be included in any subsequent web pages or back end operations. "
      },
      {
        "Title": "Implementation: The victim should configure the browser to minimize active content from untrusted sources",
        "Description": "Implementation: The victim should configure the browser to minimize active content from untrusted sources. "
      }
    ]
  },
  {
    "Id": "CAPEC-248",
    "Description": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "All user-controllable input should be validated and filtered for potentially unwanted characters",
        "Description": "All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary. "
      },
      {
        "Title": "Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command",
        "Description": "Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter. "
      },
      {
        "Title": "Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself",
        "Description": "Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself. "
      }
    ]
  },
  {
    "Id": "CAPEC-25",
    "Description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms)",
        "Description": "Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms). "
      },
      {
        "Title": "For competing actions, use well-known libraries which implement synchronization",
        "Description": "For competing actions, use well-known libraries which implement synchronization. "
      }
    ]
  },
  {
    "Id": "CAPEC-250",
    "Description": "An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information. ",
    "Likelihood": "High",
    "Impact": null,
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query",
        "Description": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query. Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application. "
      }
    ]
  },
  {
    "Id": "CAPEC-26",
    "Description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by \"running the race\", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use safe libraries to access resources such as files",
        "Description": "Use safe libraries to access resources such as files. "
      },
      {
        "Title": "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc",
        "Description": "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition. "
      },
      {
        "Title": "Use synchronization to control the flow of execution",
        "Description": "Use synchronization to control the flow of execution. "
      },
      {
        "Title": "Use static analysis tools to find race conditions",
        "Description": "Use static analysis tools to find race conditions. "
      },
      {
        "Title": "Pay attention to concurrency problems related to the access of resources",
        "Description": "Pay attention to concurrency problems related to the access of resources. "
      }
    ]
  },
  {
    "Id": "CAPEC-261",
    "Description": "An attacker who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide. Many client applications use specific query templates when interacting with a server and often automatically fill in specific fields or attributes. For example, a client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. In the above example, additional information might include social security numbers or salaries. Fuzzing techniques involve sending random or malformed messages to a target and monitoring the target's response. In this particular attack, the fuzzing is applied to the format of the expected templates, creating variants that request additional information, exclude limiting clauses, or alter fields that identify the requester in order to subvert access controls. The attacker may not know the names of fields to request or how other modifications will affect the server response, but by attempting multiple plausible variants, they might eventually trigger a server response that divulges sensitive information. Other possible outcomes include server crashes and resource consumption if the unexpected queries cause the server to enter an unstable state or perform excessive computation. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-267",
    "Description": "An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "AccountabilityAuthenticationAuthorizationNon-Repudiation",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Access ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable ExecutionResource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "Assume all input might use an improper representation",
        "Description": "Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.) "
      },
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input. "
      }
    ]
  },
  {
    "Id": "CAPEC-268",
    "Description": "The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-27",
    "Description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use safe libraries when creating temporary files",
        "Description": "Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing. "
      },
      {
        "Title": "Access to the directories should be restricted as to prevent attackers from manipulating the files",
        "Description": "Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. "
      },
      {
        "Title": "Follow the principle of least privilege when assigning access rights to files",
        "Description": "Follow the principle of least privilege when assigning access rights to files. "
      },
      {
        "Title": "Ensure good compartmentalization in the system to provide protected areas that can be trusted",
        "Description": "Ensure good compartmentalization in the system to provide protected areas that can be trusted. "
      }
    ]
  },
  {
    "Id": "CAPEC-270",
    "Description": "An adversary adds a new entry to the \"run keys\" in the registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify DataGain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist",
        "Description": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist. "
      }
    ]
  },
  {
    "Id": "CAPEC-271",
    "Description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable ExecutionResource Consumption"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Protect the schema against unauthorized modification",
        "Description": "Design: Protect the schema against unauthorized modification. "
      },
      {
        "Title": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document",
        "Description": "Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document. "
      },
      {
        "Title": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification",
        "Description": "Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification. "
      }
    ]
  },
  {
    "Id": "CAPEC-273",
    "Description": "An attacker injects content into a server response that is interpreted differently by intermediaries than it is by the target browser. To do this, it takes advantage of inconsistent or incorrect interpretations of the HTTP protocol by various applications. For example, it might use different block terminating characters (CR or LF alone), adding duplicate header fields that browsers interpret as belonging to separate responses, or other techniques. Consequences of this attack can include response-splitting, cross-site scripting, apparent defacement of targeted sites, cache poisoning, or similar actions. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Employ strict adherence to interpretations of HTTP messages wherever possible",
        "Description": "Design: Employ strict adherence to interpretations of HTTP messages wherever possible. "
      },
      {
        "Title": "Implementation: Encode header information provided by user input so that user-supplied content is not interpreted by intermediaries",
        "Description": "Implementation: Encode header information provided by user input so that user-supplied content is not interpreted by intermediaries. "
      }
    ]
  },
  {
    "Id": "CAPEC-274",
    "Description": "An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Ensure that only legitimate HTTP verbs are allowed",
        "Description": "Design: Ensure that only legitimate HTTP verbs are allowed. "
      },
      {
        "Title": "Design: Do not use HTTP verbs as factors in access decisions",
        "Description": "Design: Do not use HTTP verbs as factors in access decisions. "
      }
    ]
  },
  {
    "Id": "CAPEC-275",
    "Description": "An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address, to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary. Web browsers enforce security zones based on DNS names in order to prevent cross-zone disclosure of information. In a DNS binding attack, an adversary publishes content on their own server with their own name and DNS server. The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution and provides a short Time-To-Live (TTL) in order to prevent the target from caching the value. When the target makes a subsequent request to the adversary's content, the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source. Because the same name resolves to both these IP addresses, browsers will place both IP addresses in the same security zone and allow information to flow between the addresses. The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise. If there is a trust relationship between the computer with the targeted browser and the internal machine the adversary identifies, additional attacks are possible. This attack differs from pharming attacks in that the adversary is the legitimate owner of the malicious DNS server and so does not need to compromise behavior of external DNS services. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "AccountabilityAuthenticationAuthorizationNon-Repudiation",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Access ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response",
        "Description": "Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites. "
      },
      {
        "Title": "Implementation: Reject HTTP request with a malicious Host header",
        "Description": "Implementation: Reject HTTP request with a malicious Host header. "
      },
      {
        "Title": "Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses",
        "Description": "Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses. "
      }
    ]
  },
  {
    "Id": "CAPEC-276",
    "Description": "Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-277",
    "Description": "Data Interchange Protocols are used to transmit structured data between entities. These protocols are often specific to a particular domain (B2B: purchase orders, invoices, transport logistics and waybills, medical records). They are often, but not always, XML-based. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-278",
    "Description": "An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response",
        "Description": "Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response. "
      },
      {
        "Title": "Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them",
        "Description": "Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them. "
      }
    ]
  },
  {
    "Id": "CAPEC-279",
    "Description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adviseries can make use these shortcomings to mount an denial of service attack, disclose information and execute arbitrary code. This includes a SOAP parameter tampering attack in which an attacker sends a SOAP message where the field values are other than what the server is likely to expect in order to precipitate non-standard server behavior. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-28",
    "Description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Alter Execution Logic"
      }
    ],
    "Mitigations": [
      {
        "Title": "Test to ensure that the software behaves as per specification and that there are no unintended side effects",
        "Description": "Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made. "
      },
      {
        "Title": "Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior",
        "Description": "Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior. "
      }
    ]
  },
  {
    "Id": "CAPEC-285",
    "Description": "An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss. Performing this operation for a range of hosts on the network is known as a 'Ping Sweep'. While the Ping utility is useful for small-scale host discovery, it was not designed for rapid or efficient host discovery over large network blocks. Other scanning utilities have been created that make ICMP ping sweeps easier to perform. Most networks filter ingress ICMP Type 8 messages for security reasons. Various other methods of performing ping sweeps have developed as a result. It is important to recognize the key security goal of the adversary is to discover if an IP address is alive, or has a responsive host. To this end, virtually any type of ICMP message, as defined by RFC 792 is useful. An adversary can cycle through various types of ICMP messages to determine if holes exist in the firewall configuration. When ICMP ping sweeps fail to discover hosts, other protocols can be used for the same purpose, such as TCP SYN or ACK segments, UDP datagrams sent to closed ports, etc. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": [
      {
        "Title": "Consider configuring firewall rules to block ICMP Echo requests and prevent replies",
        "Description": "Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers. "
      }
    ]
  },
  {
    "Id": "CAPEC-287",
    "Description": "An adversary uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its enormous advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method, the primary advantages of SYN scanning are its universality and speed. RFC 793 defines the required behavior of any TCP/IP device in that an incoming connection request begins with a SYN packet, which in turn must be followed by a SYN/ACK packet from the receiving service. For this reason, like TCP Connect scanning, SYN scanning works against any TCP stack. Unlike TCP Connect scanning, it is possible to scan thousands of ports per second using this method. This type of scanning is usually referred to as 'half-open' scanning because it does not complete the three-way handshake. The scanning rate is extremely fast because no time is wasted completing the handshake or tearing down the connection. TCP SYN scanning can also immediately detect 3 of the 4 important types of port status: open, closed, and filtered. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. This technique allows an attacker to scan through stateful firewalls due to the common configuration that TCP SYN segments for a new connection will be allowed for almost any port. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered. A TCP Connect scan has the following characteristics: ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-29",
    "Description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Alter Execution Logic"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use safe libraries to access resources such as files",
        "Description": "Use safe libraries to access resources such as files. "
      },
      {
        "Title": "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc",
        "Description": "Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition. "
      },
      {
        "Title": "Use synchronization to control the flow of execution",
        "Description": "Use synchronization to control the flow of execution. "
      },
      {
        "Title": "Use static analysis tools to find race conditions",
        "Description": "Use static analysis tools to find race conditions. "
      },
      {
        "Title": "Pay attention to concurrency problems related to the access of resources",
        "Description": "Pay attention to concurrency problems related to the access of resources. "
      }
    ]
  },
  {
    "Id": "CAPEC-290",
    "Description": "An adversary enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-291",
    "Description": "An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-292",
    "Description": "An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-293",
    "Description": "An adversary uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow the adversary to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP, but as more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-294",
    "Description": "An adversary sends an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. ICMP Address Mask Requests are defined by RFC-950, \"Internet Standard Subnetting Procedure.\" An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps the adversary plan router-based attacks as well as denial-of-service attacks against the broadcast address. Many modern operating systems will not respond to ICMP type 17 messages for security reasons. Determining whether a system or router will respond to an ICMP Address Mask Request helps the adversary determine operating system or firmware version. Additionally, because these types of messages are rare, they are easily spotted by intrusion detection systems. Many ICMP scanning tools support IP spoofing to help conceal the origin of the actual request among a storm of similar ICMP messages. It is a common practice for border firewalls and gateways to be configured to block ingress ICMP type 17 and egress ICMP type 18 messages. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Hide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-295",
    "Description": "This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-296",
    "Description": "An adversary sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-297",
    "Description": "An adversary sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, the adversary can identify that the host is alive by looking for a RST packet. Typically, a remote server will respond with a RST regardless of whether a port is open or closed. In this way, TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping can be used to discover if a host is alive via RST response packets sent from the host. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": [
      {
        "Title": "Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection",
        "Description": "Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection. "
      }
    ]
  },
  {
    "Id": "CAPEC-298",
    "Description": "An adversary sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an 'ICMP port unreachable' message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": [
      {
        "Title": "Configure your firewall to block egress ICMP messages",
        "Description": "Configure your firewall to block egress ICMP messages. "
      }
    ]
  },
  {
    "Id": "CAPEC-299",
    "Description": "An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN \"synchronize\" packet by completing stage two of the 'three-way handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST \"reset\" packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response. Due to the different responses from open and closed ports, SYN packets can be used to determine the remote state of the port. A TCP SYN ping is also useful for discovering alive hosts protected by a stateful firewall. In cases where a specific firewall rule does not block access to a port, a SYN packet can pass through the firewall to the host and solicit a response from either an open or closed port. When a stateful firewall is present, SYN pings are preferable to ACK pings because a stateful firewall will typically drop all unsolicited ACK packets as they are not part of an existing or new connection. TCP SYN pings often fail when a stateless ACL or firewall is configured to blanket-filter incoming packets to a port. The firewall device will discard any SYN packets to a blocked port. Often, an adversary will alternate between SYN and ACK pings to discover if a host is alive. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-3",
    "Description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading \"ghost\" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use an allowlist rather than a denylist input validation",
        "Description": "Use an allowlist rather than a denylist input validation. "
      },
      {
        "Title": "Canonicalize all data prior to validation",
        "Description": "Canonicalize all data prior to validation. "
      },
      {
        "Title": "Take an iterative approach to input validation (defense in depth)",
        "Description": "Take an iterative approach to input validation (defense in depth). "
      }
    ]
  },
  {
    "Id": "CAPEC-30",
    "Description": "Adversaries can sometimes hijack a privileged thread from the underlying system through synchronous (calling a privileged function that returns incorrectly) or asynchronous (callbacks, signal handlers, and similar) means. This can allow the adversary to access functionality the system's designer didn't intend for them to, but they may also go undetected or deny other users essential services in a catastrophic (or insidiously subtle) way. ",
    "Likelihood": "Low",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code",
        "Description": "Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code. "
      },
      {
        "Title": "Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope",
        "Description": "Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope. "
      }
    ]
  },
  {
    "Id": "CAPEC-300",
    "Description": "An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network. Although common services have assigned port numbers, services and applications can run on arbitrary ports. Additionally, port scanning is complicated by the potential for any machine to have up to 65535 possible UDP or TCP services. The goal of port scanning is often broader than identifying open ports, but also give the adversary information concerning the firewall configuration. Depending upon the method of scanning that is used, the process can be stealthy or more obtrusive, the latter being more easily detectable due to the volume of packets involved, anomalous packet traits, or system logging. Typical port scanning activity involves sending probes to a range of ports and observing the responses. There are four types of port status that this type of attack aims to identify: 1) Open Port: The port is open and a firewall does not block access to the port, 2) Closed Port: The port is closed (i.e. no service resides there) and a firewall does not block access to the port, 3) Filtered Port: A firewall or ACL rule is blocking access to the port in some manner, although the presence of a listening service on the port cannot be verified, and 4) Unfiltered Port: A firewall or ACL rule is not blocking access to the port, although the presence of a listening service on the port cannot be verified. For strategic purposes it is useful for an adversary to distinguish between an open port that is protected by a filter vs. a closed port that is not protected by a filter. Making these fine grained distinctions is impossible with certain scan types. A TCP connect scan, for instance, cannot distinguish a blocked port with an active service from a closed port that is not firewalled. Other scan types can only detect closed ports, while others cannot detect port state at all, only the presence or absence of filters. Collecting this type of information tells the adversary which ports can be attacked directly, which must be attacked with filter evasion techniques like fragmentation, source port scans, and which ports are unprotected (i.e. not firewalled) but aren't hosting a network service. An adversary often combines various techniques in order to gain a more complete picture of the firewall filtering mechanisms in place for a host. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-301",
    "Description": "An adversary uses full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack. RFC 793 defines how TCP connections are established and torn down. TCP connect scanning commonly involves establishing a full connection, and then subsequently tearing it down, and therefore involves sending a significant number of packets to each port that is scanned. Compared to other types of scans, a TCP Connect scan is slow and methodical. This type of scanning causes considerable noise in system logs and can be spotted by IDS/IPS systems. TCP Connect scanning can detect when a port is open by completing the three-way handshake, but it cannot distinguish a port that is unfiltered with no service running on it from a port that is filtered by a firewall but contains an active service. Due to the significant volume of packets exchanged per port, TCP connect scanning can become very time consuming (performing a full TCP connect scan against a host can take multiple days). Generally, it is not used as a method for performing a comprehensive port scan, but is reserved for checking a short list of common ports. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Employ a robust network defense posture that includes an IDS/IPS system",
        "Description": "Employ a robust network defense posture that includes an IDS/IPS system. "
      }
    ]
  },
  {
    "Id": "CAPEC-302",
    "Description": "An adversary uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow the adversary to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. In addition to its relative speed in comparison with other types of scans, the major advantage a TCP FIN Scan is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. FIN packets, like out-of-state ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports. FIN scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, FIN scanning a system protected by a stateful firewall may indicate all ports being open. For these reasons, FIN scanning results must always be interpreted as part of a larger scanning strategy. FIN scanning is still relatively stealthy as the packets tend to blend in with the background noise on a network link. FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-303",
    "Description": "An adversary uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the all flags sent in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. In addition to its relative speed when compared with other types of scans, its major advantage is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. XMAS packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason FIN scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing the adversary from distinguishing between open and closed ports. XMAS scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, XMAS scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, XMAS scans are flagged by almost all intrusion prevention or intrusion detection systems. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      }
    ],
    "Mitigations": [
      {
        "Title": "Employ a robust network defensive posture that includes a managed IDS/IPS",
        "Description": "Employ a robust network defensive posture that includes a managed IDS/IPS. "
      }
    ]
  },
  {
    "Id": "CAPEC-304",
    "Description": "An adversary uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets. In addition to being fast, the major advantage of this scan type is its ability to scan through stateless firewall or ACL filters. Such filters are configured to block access to ports usually by preventing SYN packets, thus stopping any attempt to 'build' a connection. NULL packets, like out-of-state FIN or ACK packets, tend to pass through such devices undetected. Many operating systems, however, do not implement RFC 793 exactly and for this reason NULL scans do not work as expected against these devices. Some operating systems, like Microsoft Windows, send a RST packet in response to any out-of-sync (or malformed) TCP segments received by a listening socket (rather than dropping the packet via RFC 793), thus preventing an attacker from distinguishing between open and closed ports. NULL scans are limited by the range of platforms against which they work. Additionally, because open ports are inferred via no responses being generated, one cannot distinguish an open port from a filtered port without further analysis. For instance, NULL scanning a system protected by a stateful firewall may indicate all ports being open. Because of their obvious rule-breaking nature, NULL scans are flagged by almost all intrusion prevention or intrusion detection systems. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-305",
    "Description": "An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present. When a TCP ACK segment is sent to a closed port, or sent out-of-sync to a listening port, the RFC 793 expected behavior is for the device to respond with a RST. Getting RSTs back in response to a ACK scan gives the attacker useful information that can be used to infer the type of firewall present. Stateful firewalls will discard out-of-sync ACK packets, leading to no response. When this occurs the port is marked as filtered. When RSTs are received in response, the ports are marked as unfiltered, as the ACK packets solicited the expected behavior from a port. When combined with SYN techniques an attacker can gain a more complete picture of which types of packets get through to a host and thereby map out its firewall rule-set. ACK scanning, when combined with SYN scanning, also allows the adversary to analyze whether a firewall is stateful or non-stateful. If a SYN solicits a SYN/ACK or a RST and an ACK solicits a RST, the port is unfiltered by any firewall type. If a SYN solicits a SYN/ACK, but an ACK generates no response, the port is statefully filtered. When a SYN generates neither a SYN/ACK or a RST, but an ACK generates a RST, the port is statefully filtered. When neither SYN nor ACK generates any response, the port is blocked by a specific firewall rule, which can occur via any type of firewall. TCP ACK Scans are somewhat faster and more stealthy than other types of scans but often requires rather sophisticated analysis by an experienced person. A skilled adversary may use this method to map out firewall rules, but the results of ACK scanning will be less useful to a novice. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-306",
    "Description": "An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-307",
    "Description": "An adversary scans for RPC services listing on a Unix/Linux host. This type of scan can be obtained via native operating system utilities or via port scanners like nmap. When performed by a scanner, an RPC datagram is sent to a list of UDP ports and the response is recorded. Particular types of responses can be indicative of well-known RPC services running on a UDP port. Direct RPC scans that bypass portmapper/sunrpc are typically slow compare to other scan types, are easily detected by IPS/IDS systems, and can only detect open ports when an RPC service responds. ICMP diagnostic message responses can help identify closed ports, however filtered and unfiltered ports cannot be identified through TCP RPC scans. There are two general approaches to RPC scanning: One is to use a native operating system utility, or script, to query the portmapper/rpcbind application running on port 111. Portmapper will return a list of registered RPC services. Alternately, one can use a port scanner or script to scan for RPC services directly. Discovering RPC services gives the attacker potential targets to attack, as some RPC services are insecure by default. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": [
      {
        "Title": "Typically, an IDS/IPS system is very effective against this type of attack",
        "Description": "Typically, an IDS/IPS system is very effective against this type of attack. "
      }
    ]
  },
  {
    "Id": "CAPEC-308",
    "Description": "An adversary engages in UDP scanning to gather information about UDP port status on the target system. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port. During a UDP scan, a datagram is sent to a target port. If an 'ICMP Type 3 Port unreachable' error message is returned then the port is considered closed. Different types of ICMP messages can indicate a filtered port. UDP scanning is slower than TCP scanning. The protocol characteristics of UDP make port scanning inherently more difficult than with TCP, as well as dependent upon ICMP for accurate scanning. Due to ambiguities that can arise between open ports and filtered ports, UDP scanning results often require a high degree of interpretation and further testing to refine. In general, UDP scanning results are less reliable or accurate than TCP-based scanning. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": [
      {
        "Title": "Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information",
        "Description": "Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information. "
      },
      {
        "Title": "UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages",
        "Description": "UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages. "
      }
    ]
  },
  {
    "Id": "CAPEC-309",
    "Description": "An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-31",
    "Description": "This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Use input validation for cookies ",
        "Description": "Design: Use input validation for cookies "
      },
      {
        "Title": "Design: Generate and validate MAC for cookies ",
        "Description": "Design: Generate and validate MAC for cookies "
      },
      {
        "Title": "Implementation: Use SSL/TLS to protect cookie in transit ",
        "Description": "Implementation: Use SSL/TLS to protect cookie in transit "
      },
      {
        "Title": "Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software",
        "Description": "Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software. "
      }
    ]
  },
  {
    "Id": "CAPEC-310",
    "Description": "An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-312",
    "Description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Hide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-313",
    "Description": "An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection. ",
    "Likelihood": "High",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Hide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-317",
    "Description": "This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing the IP 'ID' sequence generation algorithm for one protocol used by a host and Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values spanning multiple protocols, such as between ICMP and TCP. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-318",
    "Description": "This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-319",
    "Description": "This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-32",
    "Description": "An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Use browser technologies that do not allow client side scripting",
        "Description": "Design: Use browser technologies that do not allow client side scripting. "
      },
      {
        "Title": "Design: Utilize strict type, character, and encoding enforcement ",
        "Description": "Design: Utilize strict type, character, and encoding enforcement "
      },
      {
        "Title": "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from",
        "Description": "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. "
      },
      {
        "Title": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification",
        "Description": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content, including remote and user-generated content ",
        "Description": "Implementation: Perform input validation for all remote content, including remote and user-generated content "
      },
      {
        "Title": "Implementation: Perform output validation for all remote content",
        "Description": "Implementation: Perform output validation for all remote content. "
      },
      {
        "Title": "Implementation: Disable scripting languages such as JavaScript in browser ",
        "Description": "Implementation: Disable scripting languages such as JavaScript in browser "
      },
      {
        "Title": "Implementation: Session tokens for specific host ",
        "Description": "Implementation: Session tokens for specific host "
      },
      {
        "Title": "Implementation: Patching software",
        "Description": "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. "
      },
      {
        "Title": "Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode ",
        "Description": "Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode "
      }
    ]
  },
  {
    "Id": "CAPEC-320",
    "Description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-321",
    "Description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-322",
    "Description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-323",
    "Description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-324",
    "Description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-325",
    "Description": "This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-326",
    "Description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the \"connected\" state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-327",
    "Description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-328",
    "Description": "This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-329",
    "Description": "An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or \"Quoted\" from the originating request that generated the ICMP error message. For this purpose \"Port Unreachable\" error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. The goal of this analysis to make inferences about the type of operating system or firmware that sent the error message in reply. This is useful for identifying unique characteristics of operating systems because the RFC-1122 expected behavior reads: \"Every ICMP error message includes the Internet header and at least the first 8 data octets of the datagram that triggered the error; more than 8 octets MAY be sent [...].\" This contrasts with RFC-792 expected behavior, which limited the quoted text to 64 bits (8 octets). Given the latitude in the specification the resulting RFC-1122 stack implementations often respond with a high degree of variability in the amount of data quoted in the error message because \"older\" or \"legacy\" stacks may comply with the RFC-792 specification, while other stacks may choose a longer format in accordance with RFC-1122. As a general rule most operating systems or firmware will quote the first 8 bytes of the datagram triggering the error, but some IP stacks will quote more than the first 8 bytes of data. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-33",
    "Description": "HTTP Request Smuggling results from the discrepancies in parsing HTTP requests between HTTP entities such as web caching proxies or application firewalls. Entities such as web servers, web caching proxies, application firewalls or simple proxies often parse HTTP requests in slightly different ways. Under specific situations where there are two or more such entities in the path of the HTTP request, a specially crafted request is seen by two attacked entities as two different sets of requests. This allows certain requests to be smuggled through to a second entity without the first one realizing it. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "HTTP Request Smuggling is usually targeted at web servers",
        "Description": "HTTP Request Smuggling is usually targeted at web servers. Therefore, in such cases, careful analysis of the entities must occur during system design prior to deployment. If there are known differences in the way the entities parse HTTP requests, the choice of entities needs consideration. "
      },
      {
        "Title": "Employing an application firewall can help",
        "Description": "Employing an application firewall can help. However, there are instances of the firewalls being susceptible to HTTP Request Smuggling as well. "
      }
    ]
  },
  {
    "Id": "CAPEC-330",
    "Description": "An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or \"Quoted\" from the originating request that generated the error message. For this purpose \"Port Unreachable\" error messages are often used, as generating them requires the attacker to send a UDP datagram to a closed port on the target. When replying with an ICMP error message some IP/ICMP stack implementations change aspects of the IP header, change or reverse certain byte orders, reset certain field values to default values which differ between operating system and firmware implementations, and make other changes. Some IP/ICMP stacks are decidedly broken, indicating an idiosyncratic behavior that differs from the RFC specifications, such as the case when miscalculations affect a field value. A tremendous amount of information about the host operating system can be deduced from its 'echoing' characteristics. Notably, inspection of key protocol header fields, including the echoed header fields of the encapsulating protocol can yield a wealth of data about the host operating system or firmware version. ",
    "Likelihood": "Medium",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-34",
    "Description": "This attack uses a maliciously-crafted HTTP request in order to cause a vulnerable web server to respond with an HTTP response stream that will be interpreted by the client as two separate responses instead of one. This is possible when user-controlled input is used unvalidated as part of the response headers. The target software, the client, will interpret the injected header as being a response to a second request, thereby causing the maliciously-crafted contents be displayed and possibly cached. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "To avoid HTTP Response Splitting, the application must not rely on user-controllable input to form part of its output response stream",
        "Description": "To avoid HTTP Response Splitting, the application must not rely on user-controllable input to form part of its output response stream. Specifically, response splitting occurs due to injection of CR-LF sequences and additional headers. All data arriving from the user and being used as part of HTTP response headers must be subjected to strict validation that performs simple character-based as well as semantic filtering to strip it of malicious character sequences and headers. "
      }
    ]
  },
  {
    "Id": "CAPEC-35",
    "Description": "An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Enforce principle of least privilege ",
        "Description": "Design: Enforce principle of least privilege "
      },
      {
        "Title": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands",
        "Description": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. "
      },
      {
        "Title": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables",
        "Description": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables. "
      },
      {
        "Title": "Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files",
        "Description": "Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files. "
      },
      {
        "Title": "Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i",
        "Description": "Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute. "
      }
    ]
  },
  {
    "Id": "CAPEC-36",
    "Description": "An adversary searches for and invokes interfaces that the target system designers did not intend to be publicly available. If these interfaces fail to authenticate requests the attacker may be able to invoke functionality they are not authorized for. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem",
        "Description": "Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like. "
      }
    ]
  },
  {
    "Id": "CAPEC-37",
    "Description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-38",
    "Description": "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Enforce principle of least privilege ",
        "Description": "Design: Enforce principle of least privilege "
      },
      {
        "Title": "Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program ",
        "Description": "Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program "
      },
      {
        "Title": "Implementation: Host integrity monitoring ",
        "Description": "Implementation: Host integrity monitoring "
      }
    ]
  },
  {
    "Id": "CAPEC-383",
    "Description": "An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a \"virtual sale\" of rare items. As other users enter the event, the attacker records via MITM proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind",
        "Description": "Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind. "
      }
    ]
  },
  {
    "Id": "CAPEC-384",
    "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system. Despite the use of MITM software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Man-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-385",
    "Description": "An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-386",
    "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-387",
    "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. When the goal is to spread malware, deceptive content is created such as modified links, buttons, or images, that entice users to click on those items, all of which point to a malicious URI. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the destination of various application interface elements. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-388",
    "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-389",
    "Description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-39",
    "Description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "One solution to this problem is to protect encrypted data with a CRC of some sort",
        "Description": "One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic \"message authentication code\" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a \"malicious\" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help. "
      },
      {
        "Title": "Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash) ",
        "Description": "Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash) "
      },
      {
        "Title": "Make sure that all session tokens use a good source of randomness ",
        "Description": "Make sure that all session tokens use a good source of randomness "
      },
      {
        "Title": "Perform validation on the server side to make sure that client side data tokens are consistent with what is expected",
        "Description": "Perform validation on the server side to make sure that client side data tokens are consistent with what is expected. "
      }
    ]
  },
  {
    "Id": "CAPEC-4",
    "Description": "This attack relies on the attacker using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Default deny access control policies ",
        "Description": "Design: Default deny access control policies "
      },
      {
        "Title": "Design: Input validation routines should check and enforce both input data types and content against a positive specification",
        "Description": "Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges) "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content",
        "Description": "Implementation: Perform input validation for all remote content. "
      }
    ]
  },
  {
    "Id": "CAPEC-40",
    "Description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Ensure that terminals are only writeable by named owner user and/or administrator ",
        "Description": "Design: Ensure that terminals are only writeable by named owner user and/or administrator "
      },
      {
        "Title": "Design: Enforce principle of least privilege ",
        "Description": "Design: Enforce principle of least privilege "
      }
    ]
  },
  {
    "Id": "CAPEC-401",
    "Description": "An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-402",
    "Description": "An attacker exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-41",
    "Description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Perform validation on email header data ",
        "Description": "Design: Perform validation on email header data "
      },
      {
        "Title": "Implementation: Implement email filtering solutions on mail server or on MTA, relay server",
        "Description": "Implementation: Implement email filtering solutions on mail server or on MTA, relay server. "
      },
      {
        "Title": "Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names ",
        "Description": "Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names "
      }
    ]
  },
  {
    "Id": "CAPEC-42",
    "Description": "An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Stay up to date with third party vendor patches ",
        "Description": "Stay up to date with third party vendor patches "
      },
      {
        "Title": "Disable the 7 to 8 bit conversion",
        "Description": "Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file. For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration): Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40, T=DNS/RFC822/X-Unix, A=mail -d $u Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40, D=$z:/, T=X-Unix, A=sh -c $u This can be achieved for the \"Mlocal\" and \"Mprog\" Mailers by modifying the \".mc\" file to include the following lines: define(`LOCAL_MAILER_FLAGS', ifdef(`LOCAL_MAILER_FLAGS', `translit(LOCAL_MAILER_FLAGS, `9')', `rmn')) define(`LOCAL_SHELL_FLAGS', ifdef(`LOCAL_SHELL_FLAGS', `translit(LOCAL_SHELL_FLAGS, `9')', `eu')) and then rebuilding the sendmail.cf file using m4(1). From \"Exploiting Software\", please see reference below. "
      },
      {
        "Title": "Use the sendmail restricted shell program (smrsh) ",
        "Description": "Use the sendmail restricted shell program (smrsh) "
      },
      {
        "Title": "Use mail",
        "Description": "Use mail.local "
      }
    ]
  },
  {
    "Id": "CAPEC-43",
    "Description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: &lt;parser1&gt; --&gt; &lt;input validator&gt; --&gt; &lt;parser2&gt;. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "An iterative approach to input validation may be required to ensure that no dangerous characters are present",
        "Description": "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it. "
      },
      {
        "Title": "Make sure to perform input validation on canonicalized data (i",
        "Description": "Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters. "
      },
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system. "
      }
    ]
  },
  {
    "Id": "CAPEC-441",
    "Description": "An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Authorization",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-45",
    "Description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An attacker can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link",
        "Description": "Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource. "
      },
      {
        "Title": "Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories",
        "Description": "Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories. "
      },
      {
        "Title": "Pay attention to the resource pointed to by your symlink links (See attack pattern named \"Forced Symlink race\"), they can be replaced by malicious resources",
        "Description": "Pay attention to the resource pointed to by your symlink links (See attack pattern named \"Forced Symlink race\"), they can be replaced by malicious resources. "
      },
      {
        "Title": "Always check the size of the input data before copying to a buffer",
        "Description": "Always check the size of the input data before copying to a buffer. "
      },
      {
        "Title": "Use a language or compiler that performs automatic bounds checking",
        "Description": "Use a language or compiler that performs automatic bounds checking. "
      },
      {
        "Title": "Use an abstraction library to abstract away risky APIs",
        "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution. "
      },
      {
        "Title": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag",
        "Description": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. "
      },
      {
        "Title": "Use OS-level preventative functionality",
        "Description": "Use OS-level preventative functionality. Not a complete solution. "
      }
    ]
  },
  {
    "Id": "CAPEC-459",
    "Description": "An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate a certificate signing request (CSR) that contains collision blocks in the \"to be signed\" part. The adversary specially crafts two different, but valid X.509 certificates that when hashed with a non-collision resistant hashing algorithm would yield the same value. The adversary then sends the CSR for one of the certificates to the Certification Authority which uses the targeted hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key. An adversary then takes that signed blob and inserts it into another X.509 certificate that the attacker generated. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority. To make the attack more interesting, the second certificate could be not just a regular certificate, but rather itself a signing certificate. Thus the adversary is able to start their own Certification Authority that is anchored in its root of trust in the legitimate Certification Authority that has signed the attacker's first X.509 certificate. If the original Certificate Authority was accepted by default by browsers, so will the Certificate Authority set up by the adversary and of course any certificates that it signs. So the adversary is now able to generate any SSL certificates to impersonate any web server, and the user's browser will not issue any warning to the victim. This can be used to compromise HTTPS communications and other types of systems where PKI and X.509 certificates may be used (e.g., VPN, IPSec). ",
    "Likelihood": "Medium",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Access ControlAuthentication",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign",
        "Description": "Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512. "
      }
    ]
  },
  {
    "Id": "CAPEC-46",
    "Description": "This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The attacker crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use a language or compiler that performs automatic bounds checking",
        "Description": "Use a language or compiler that performs automatic bounds checking. "
      },
      {
        "Title": "Use an abstraction library to abstract away risky APIs",
        "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution. "
      },
      {
        "Title": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag",
        "Description": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. "
      },
      {
        "Title": "Use OS-level preventative functionality",
        "Description": "Use OS-level preventative functionality. Not a complete solution. "
      },
      {
        "Title": "Do not trust input data from user",
        "Description": "Do not trust input data from user. Validate all user input. "
      }
    ]
  },
  {
    "Id": "CAPEC-460",
    "Description": "An attacker overrides or adds HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests Design: Perform URL encoding Implementation: Use strict regular expressions in URL rewriting Implementation: Beware of multiple occurrences of a parameter in a Query String ",
        "Description": "Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests Design: Perform URL encoding Implementation: Use strict regular expressions in URL rewriting Implementation: Beware of multiple occurrences of a parameter in a Query String "
      }
    ]
  },
  {
    "Id": "CAPEC-461",
    "Description": "When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller when constructing a request would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. There is a practical attack against an authentication scheme of this nature that makes use of the hash function extension / padding weakness. Leveraging this weakness, an attacker, who does not know the secret token, is able to modify the parameters passed to the web service by generating their own call and still generate a legitimate signature hash. For instance, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error. Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, to compute the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work just as well with another hash function like SHA1. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1 ",
        "Description": "Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1 "
      }
    ]
  },
  {
    "Id": "CAPEC-462",
    "Description": "An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain. For GET requests an attacker could for instance leverage the \"img\" tag in conjunction with \"onload() / onerror()\" javascript events. For the POST requests, an attacker could leverage the \"iframe\" element and leverage the \"onload()\" event. There is nothing in the current browser security model that prevents an attacker to use these methods to time responses to the attackers' cross domain requests. The timing for these responses leaks information. For instance, if a victim has an active session with their online e-mail account, an attacker could issue search requests in the victim's mailbox. While the attacker is not able to view the responses, based on the timings of the responses, the attacker could ask yes / no questions as to the content of victim's e-mails, who the victim e-mailed, when, etc. This is but one example; There are other scenarios where an attacker could infer potentially sensitive information from cross domain requests by timing the responses while asking the right questions that leak information. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: The victim's site could protect all potentially sensitive functionality (e",
        "Description": "Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests Design: The browser's security model could be fixed to not leak timing information for cross domain requests "
      }
    ]
  },
  {
    "Id": "CAPEC-463",
    "Description": "An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key. Any cryptosystem can be vulnerable to padding oracle attacks if the encrypted messages are not authenticated to ensure their validity prior to decryption, and then the information about padding error is leaked to the adversary. This attack technique may be used, for instance, to break CAPTCHA systems or decrypt/modify state information stored in client side objects (e.g., hidden fields or cookies). This attack technique is a side-channel attack on the cryptosystem that uses a data leak from an improperly implemented decryption routine to completely subvert the cryptosystem. The one bit of information that tells the adversary whether a padding error during decryption has occurred, in whatever form it comes, is sufficient for the adversary to break the cryptosystem. That bit of information can come in a form of an explicit error message about a padding error, a returned blank page, or even the server taking longer to respond (a timing attack). This attack can be launched cross domain where an adversary is able to use cross-domain information leaks to get the bits of information from the padding oracle from a target system / service with which the victim is communicating. To do so an adversary sends a request containing ciphertext to the target system. Due to the browser's same origin policy, the adversary is not able to see the response directly, but can use cross-domain information leak techniques to still get the information needed (i.e., information on whether or not a padding error has occurred). For instance, this can be done using \"img\" tag plus the onerror()/onload() events. The adversary's JavaScript can make web browsers to load an image on the target site, and know if the image is loaded or not. This is 1-bit information needed for the padding oracle attack to work: if the image is loaded, then it is valid padding, otherwise it is not. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption Implementation: Do not leak information back to the user as to any cryptography (e",
        "Description": "Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption. "
      }
    ]
  },
  {
    "Id": "CAPEC-464",
    "Description": "An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places to include: Standard HTTP Cookies, Local Shared Objects (Flash Cookies), Silverlight Isolated Storage, Storing cookies in RGB values of auto-generated, force-cached, PNGs using HTML5 Canvas tag to read pixels (cookies) back out, Storing cookies in Web History, Storing cookies in HTTP ETags, Storing cookies in Web cache, window.name caching, Internet Explorer userData storage, HTML5 Session Storage, HTML5 Local Storage, HTML5 Global Storage, HTML5 Database Storage via SQLite, among others. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place",
        "Description": "Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place. Design: Safari browser's private browsing mode is currently effective against evercookies. "
      }
    ]
  },
  {
    "Id": "CAPEC-466",
    "Description": "An attacker leverages a man in the middle attack in order to bypass the same origin policy protection in the victim's browser. This active man in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS. For instance, the victim may be checking flight or weather information. When an attacker intercepts a response bound to the victim, an attacker adds an iFrame (which is possibly invisible) to the response referencing some domain with sensitive functionality and forwards the response to the victim. The victim's browser than automatically initiates an unauthorized request to the site with sensitive functionality. The same origin policy would prevent making these requests to a site other than the one from which the Java Script came, but the attacker once again uses active man in the middle to intercept these automatic requests and redirect them to the domain / service with sensitive functionality. Any persistent cookies that the victim has in their browser would be used for these unauthorized requests. The attacker thus actively directs the victim to a site with sensitive functionality. When the site with sensitive functionality responds back to the victim's request, an active man in the middle attacker intercepts these responses, injects their own malicious Java Script into these responses, and forwards to the victim's browser. In the victim's browser, that Java Script executes under the restrictions of the site with sensitive functionality and can essentially be used to continue to interact with the sensitive site. So an attacker can execute scripts within the victim's browser on any domains the attacker desires. The attacker is able to use this technique to steal cookies from the victim's browser for whatever site the attacker wants. This applies to both persistent cookies and HTTP only cookies (unlike traditional XSS attacks). An attacker is also able to use this technique to steal authentication credentials for sites that only encrypt the login form, but do not require a secure channel for the initial request to get to the page with the login form. Further the attacker is also able to steal any autocompletion information. This attack pattern can also be used to enable session fixation and cache poisoning attacks. Additional attacks can be enabled as well. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Tunnel communications through a secure proxy Design: Trust level separation for privileged / non privileged interactions (e",
        "Description": "Design: Tunnel communications through a secure proxy Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines) "
      }
    ]
  },
  {
    "Id": "CAPEC-467",
    "Description": "An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the \"remember me\" feature to keep their session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing). In one example of an attack, an attacker may post a malicious posting that contains an image with an embedded link. The link actually requests identifying information from the social networking site. A victim who views the malicious posting in their browser will have sent identifying information to the attacker, as long as the victim had an active session with the social networking site. There are many other ways in which the attacker may get the payload to execute in the victim's browser mainly by finding a way to hide it in some reputable site that the victim visits. The attacker could also send the link to the victim in an e-mail and trick the victim into clicking on the link. This attack is basically a cross site request forgery attack with two main differences. First, there is no action that is performed on behalf of the user aside from harvesting information. So standard CSRF protection may not work in this situation. Second, what is important in this attack pattern is the nature of the data being harvested, which is identifying information that can be obtained and used in context. This real time harvesting of identifying information can be used as a prelude for launching real time targeted social engineering attacks on the victim. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Usage: Users should always explicitly log out from the social networking sites when done using them",
        "Description": "Usage: Users should always explicitly log out from the social networking sites when done using them. Usage: Users should not open other tabs in the browser when using a social networking site. "
      }
    ]
  },
  {
    "Id": "CAPEC-468",
    "Description": "An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser By having control of some text in the victim's domain, the attacker is able to inject a seemingly valid CSS string. It does not matter if this CSS string is preceded by other data. The CSS parser will still locate the CSS string. If the attacker is able to control two injection points, one before the cross domain data that the attacker is interested in receiving and the other one after, the attacker can use this attack to steal all of the data in between these two CSS injection points when referencing the injected CSS while performing rendering on the site that the attacker controls. When rendering, the CSS parser will detect the valid CSS string to parse and ignore the data that \"does not make sense\". That data will simply be rendered. That data is in fact the data that the attacker just stole cross domain. The stolen data may contain sensitive information, such CSRF protection tokens. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken",
        "Description": "Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix. Implementation: Perform proper HTML encoding and URL escaping "
      }
    ]
  },
  {
    "Id": "CAPEC-469",
    "Description": "An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Configuration: Configure web server software to limit the waiting period on opened HTTP sessions Design: Use load balancing mechanisms ",
        "Description": "Configuration: Configure web server software to limit the waiting period on opened HTTP sessions Design: Use load balancing mechanisms "
      }
    ]
  },
  {
    "Id": "CAPEC-47",
    "Description": "In this attack, the target software is given input that the attacker knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system ",
        "Description": "Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system "
      }
    ]
  },
  {
    "Id": "CAPEC-470",
    "Description": "An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc. ",
    "Likelihood": null,
    "Impact": "Very High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection Configuration: Ensure that the DBMS is patched with the latest security patches Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user Usage: Do not use the DBMS machine for anything else other than the database Usage: Do not place any trust in the database host on the internal network",
        "Description": "Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection Configuration: Ensure that the DBMS is patched with the latest security patches Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user Usage: Do not use the DBMS machine for anything else other than the database Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host. Usage: Use an intrusion detection system to monitor network connections and logs on the database host. Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised "
      }
    ]
  },
  {
    "Id": "CAPEC-471",
    "Description": "An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected Design: Sign system DLLs so that unauthorized DLLs can be detected",
        "Description": "Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected Design: Sign system DLLs so that unauthorized DLLs can be detected. "
      }
    ]
  },
  {
    "Id": "CAPEC-472",
    "Description": "An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Configuration: Disable Java Script in the browser ",
        "Description": "Configuration: Disable Java Script in the browser "
      }
    ]
  },
  {
    "Id": "CAPEC-473",
    "Description": "An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": [
      {
        "Scope": "Access ControlAuthentication",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-474",
    "Description": "An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Restrict access to private keys from non-supervisory accounts Restrict access to administrative personnel and processes only Ensure all remote methods are secured Ensure all services are patched and up to date ",
        "Description": "Restrict access to private keys from non-supervisory accounts Restrict access to administrative personnel and processes only Ensure all remote methods are secured Ensure all services are patched and up to date "
      }
    ]
  },
  {
    "Id": "CAPEC-475",
    "Description": "An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key. Signature verification algorithms are generally used to determine whether a certificate or piece of code (e.g. executable, binary, etc.) possesses a valid signature and can be trusted. If the leveraged algorithm confirms that a valid signature exists, it establishes a foundation of trust that is further conveyed to the end-user when interacting with a website or application. However, if the signature verification algorithm improperly validates the signature, either by not validating the signature at all or by failing to fully validate the signature, it could result in an adversary generating a spoofed signature and being classified as a legitimate entity. Successfully exploiting such a weakness could further allow the adversary to reroute users to malicious sites, steals files, activates microphones, records keystrokes and passwords, wipes disks, installs malware, and more. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines",
        "Description": "Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines. "
      }
    ]
  },
  {
    "Id": "CAPEC-476",
    "Description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks",
        "Description": "Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks. "
      }
    ]
  },
  {
    "Id": "CAPEC-477",
    "Description": "An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data",
        "Description": "Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data. "
      }
    ]
  },
  {
    "Id": "CAPEC-478",
    "Description": "An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. Specifically, if the permissions for users and groups are not properly assigned and allow access to the registry keys used to store the configuration information for a service, then an adversary could change settings defining the path to the executable and cause a malicious binary to be executed. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation",
        "Description": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation. "
      }
    ]
  },
  {
    "Id": "CAPEC-479",
    "Description": "An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. ",
    "Likelihood": "Low",
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-48",
    "Description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification",
        "Description": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. "
      },
      {
        "Title": "Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production",
        "Description": "Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production. "
      },
      {
        "Title": "Design: Use browser technologies that do not allow client side scripting",
        "Description": "Design: Use browser technologies that do not allow client side scripting. "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content",
        "Description": "Implementation: Perform input validation for all remote content. "
      },
      {
        "Title": "Implementation: Perform output validation for all remote content",
        "Description": "Implementation: Perform output validation for all remote content. "
      },
      {
        "Title": "Implementation: Disable scripting languages such as JavaScript in browser ",
        "Description": "Implementation: Disable scripting languages such as JavaScript in browser "
      }
    ]
  },
  {
    "Id": "CAPEC-482",
    "Description": "An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack",
        "Description": "To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack. "
      }
    ]
  },
  {
    "Id": "CAPEC-486",
    "Description": "An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets",
        "Description": "To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks. "
      }
    ]
  },
  {
    "Id": "CAPEC-487",
    "Description": "An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "To mitigate this type of an attack, an organization can enable ingress filtering",
        "Description": "To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks. "
      }
    ]
  },
  {
    "Id": "CAPEC-488",
    "Description": "An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "To mitigate this type of an attack, an organization can monitor the typical traffic flow",
        "Description": "To mitigate this type of an attack, an organization can monitor the typical traffic flow. When spikes in usage occur, filters could examine traffic for indicators of bad behavior with respect to the web servers, and then create firewall rules to deny the malicious IP addresses. These patterns in the filter could be a combination of trained behavior, knowledge of standards as they apply to the web server, known patterns, or anomaly detection. Firewalling source IPs works since the HTTP is sent using TCP so the source IP can't be spoofed; if the source IP is spoofed is, then it's not legitimate traffic. Special care should be taken care with rule sets to ensure low false positive rates along with a method at the application layer to allow a valid user to begin using the service again. Another possible solution is using 3rd party providers as they have experts, knowledge, experience, and resources to deal with the attack and mitigate it before hand or while it occurs. The best mitigation is preparation before an attack, but there is no bulletproof solution as with ample resources a brute force attack may succeed. "
      }
    ]
  },
  {
    "Id": "CAPEC-489",
    "Description": "An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period",
        "Description": "To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period. "
      }
    ]
  },
  {
    "Id": "CAPEC-49",
    "Description": "In this attack, the adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password. A system will be particularly vulnerable to this type of an attack if it does not have a proper enforcement mechanism in place to ensure that passwords selected by users are strong passwords that comply with an adequate password policy. In practice a pure brute force attack on passwords is rarely used, unless the password is suspected to be weak. Other password cracking methods exist that are far more effective (e.g. dictionary attacks, rainbow tables, etc.). Knowing the password policy on the system can make a brute force attack more efficient. For instance, if the policy states that all passwords must be of a certain level, there is no need to check smaller candidates. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Implement a password throttling mechanism",
        "Description": "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user. "
      },
      {
        "Title": "Put together a strong password policy and make sure that all user created passwords comply with it",
        "Description": "Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users. "
      },
      {
        "Title": "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen",
        "Description": "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen. "
      }
    ]
  },
  {
    "Id": "CAPEC-490",
    "Description": "An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends",
        "Description": "To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked. "
      }
    ]
  },
  {
    "Id": "CAPEC-491",
    "Description": "An adversary exploits a few properties of XML(substitution entities and inline DTDs) to cause a denial of service situation due to excessive memory being allocated to fully expand the XML. The result of this denial of service could cause the application to freeze or crash. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Design: Use libraries and templates that minimize unfiltered input",
        "Description": "Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion. Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects. If must use DTD, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources. "
      }
    ]
  },
  {
    "Id": "CAPEC-492",
    "Description": "An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions. The algorithm builds a finite state machine and based on the input transitions through all the states until the end of the input is reached. NFA engines may evaluate each character in the input string multiple times during the backtracking. The algorithm tries each path through the NFA one by one until a match is found; the malicious input is crafted so every path is tried which results in a failure. Exploitation of the Regex results in programs hanging or taking a very long time to complete. These attacks may target various layers of the Internet due to regular expressions being used in validation. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Test custom written Regex with fuzzing to determine if the Regex is a poor one",
        "Description": "Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex. "
      }
    ]
  },
  {
    "Id": "CAPEC-493",
    "Description": "An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Enforce strict schema validation",
        "Description": "Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer. "
      }
    ]
  },
  {
    "Id": "CAPEC-494",
    "Description": "An attacker may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. The attacker attempts to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered. This behavior defeats some IPS and firewall filters who typically check the FLAGS in the header of the first packet since dropping this packet prevents the following fragments from being processed and assembled. Another variation is overlapping fragments thus that an innocuous first segment passes the filter and the second segment overwrites the TCP header data with the true payload which is malicious in nature. The malicious payload manipulated properly may lead to a DoS due to resource consumption or kernel crash. Additionally the fragmentation could be used in conjunction with sending fragments at a rate slightly slower than the timeout to cause a DoS condition by forcing resources that assemble the packet to wait an inordinate amount of time to complete the task. The fragmentation identification numbers could also be duplicated very easily as there are only 16 bits in IPv4 so only 65536 packets are needed. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858",
        "Description": "This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule \"IF FO=1 and PROTOCOL=TCP then DROP PACKET\" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment. "
      }
    ]
  },
  {
    "Id": "CAPEC-495",
    "Description": "An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "This attack may be mitigated by changing default cache sizes to be larger at the OS level",
        "Description": "This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity. "
      }
    ]
  },
  {
    "Id": "CAPEC-496",
    "Description": "An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "This attack may be mitigated through egress filtering based on ICMP payload so a network is a \"good neighbor\" to other networks",
        "Description": "This attack may be mitigated through egress filtering based on ICMP payload so a network is a \"good neighbor\" to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended. "
      }
    ]
  },
  {
    "Id": "CAPEC-497",
    "Description": "An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks. ",
    "Likelihood": "High",
    "Impact": "Very Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Leverage file protection mechanisms to render these files accessible only to authorized parties",
        "Description": "Leverage file protection mechanisms to render these files accessible only to authorized parties. "
      }
    ]
  },
  {
    "Id": "CAPEC-499",
    "Description": "An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent",
        "Description": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication. "
      }
    ]
  },
  {
    "Id": "CAPEC-5",
    "Description": "This type of attack against older telephone switches and trunks has been around for decades. A tone is sent by an adversary to impersonate a supervisor signal which has the effect of rerouting or usurping command of the line. While the US infrastructure proper may not contain widespread vulnerabilities to this type of attack, many companies are connected globally through call centers and business process outsourcing. These international systems may be operated in countries which have not upgraded Telco infrastructure and so are vulnerable to Blue boxing. Blue boxing is a result of failure on the part of the system to enforce strong authorization for administrative functions. While the infrastructure is different than standard current applications like web applications, there are historical lessons to be learned to upgrade the access control for administrative functions. ",
    "Likelihood": "Medium",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Implementation: Upgrade phone lines",
        "Description": "Implementation: Upgrade phone lines. Note this may be prohibitively expensive "
      },
      {
        "Title": "Use strong access control such as two factor access control for administrative access to the switch ",
        "Description": "Use strong access control such as two factor access control for administrative access to the switch "
      }
    ]
  },
  {
    "Id": "CAPEC-50",
    "Description": "An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure. Most of them use only one security question . For instance, mother's maiden name tends to be a fairly popular one. Unfortunately in many cases this information is not very hard to find, especially if the attacker knows the legitimate user. These generic security questions are also re-used across many applications, thus making them even more insecure. An attacker could for instance overhear a coworker talking to a bank representative at the work place and supplying their mother's maiden name for verification purposes. An attacker can then try to log in into one of the victim's accounts, click on \"forgot password\" and there is a good chance that the security question there will be to provide mother's maiden name. A weak password recovery scheme totally undermines the effectiveness of a strong password scheme. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use multiple security questions (e",
        "Description": "Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic. "
      },
      {
        "Title": "E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online",
        "Description": "E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online. "
      },
      {
        "Title": "Ensure that your password recovery functionality is not vulnerable to an injection style attack",
        "Description": "Ensure that your password recovery functionality is not vulnerable to an injection style attack. "
      }
    ]
  },
  {
    "Id": "CAPEC-501",
    "Description": "An adversary intercepts an implicit intent sent to launch a trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and prompt the target to enter sensitive data as if they were interacting with the trusted activity. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent",
        "Description": "To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls). "
      },
      {
        "Title": "Never use implicit intents for inter-application communication",
        "Description": "Never use implicit intents for inter-application communication. "
      }
    ]
  },
  {
    "Id": "CAPEC-502",
    "Description": "An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component blindly trusts the intent's action, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications",
        "Description": "To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values. "
      }
    ]
  },
  {
    "Id": "CAPEC-503",
    "Description": "An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads",
        "Description": "To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads. "
      }
    ]
  },
  {
    "Id": "CAPEC-508",
    "Description": "In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content \"over the victim's shoulder\", as implied by the name of this attack. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "High",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Be mindful of your surroundings when discussing or viewing sensitive information in public areas",
        "Description": "Be mindful of your surroundings when discussing or viewing sensitive information in public areas. "
      },
      {
        "Title": "Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information",
        "Description": "Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information. "
      }
    ]
  },
  {
    "Id": "CAPEC-509",
    "Description": "Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Monitor system and domain logs for abnormal access",
        "Description": "Monitor system and domain logs for abnormal access. "
      },
      {
        "Title": "Employ a robust password policy for service accounts",
        "Description": "Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time. "
      },
      {
        "Title": "Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more",
        "Description": "Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more. "
      },
      {
        "Title": "Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible",
        "Description": "Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible. "
      }
    ]
  },
  {
    "Id": "CAPEC-51",
    "Description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata (to effect a denial of service), and delete information about service provider interfaces. WS-Addressing is used to virtualize services, provide return addresses and other routing information, however, unless the WS-Addressing headers are protected they are vulnerable to rewriting. The attacker that can rewrite WS-addressing information gains the ability to route service requesters to any service providers, and the ability to route service provider response to any service. Content in a registry is deployed by the service provider. The registry in an SOA or Web Services system can be accessed by the service requester via UDDI or other protocol. The basic flow for the attacker consists of either altering the data at rest in the registry or uploading malicious content by spoofing a service provider. The service requester is then redirected to send its requests and/or responses to services the attacker controls. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Enforce principle of least privilege ",
        "Description": "Design: Enforce principle of least privilege "
      },
      {
        "Title": "Design: Harden registry server and file access permissions ",
        "Description": "Design: Harden registry server and file access permissions "
      },
      {
        "Title": "Implementation: Implement communications to and from the registry using secure protocols ",
        "Description": "Implementation: Implement communications to and from the registry using secure protocols "
      }
    ]
  },
  {
    "Id": "CAPEC-510",
    "Description": "An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, \"piggy-backing\" on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level. ",
    "Likelihood": "High",
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "To limit one's exposure to this type of attack, tunnel communications through a secure proxy service",
        "Description": "To limit one's exposure to this type of attack, tunnel communications through a secure proxy service. "
      },
      {
        "Title": "Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns",
        "Description": "Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering) "
      }
    ]
  },
  {
    "Id": "CAPEC-52",
    "Description": "An attacker embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s). ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Properly handle the NULL characters supplied as part of user input prior to doing anything with the data",
        "Description": "Properly handle the NULL characters supplied as part of user input prior to doing anything with the data. "
      }
    ]
  },
  {
    "Id": "CAPEC-528",
    "Description": "An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing. XDoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious XML payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. The main weakness in XDoS is that the service provider generally must inspect, parse, and validate the XML messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that XDoS targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends. ",
    "Likelihood": "Low",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Build throttling mechanism into the resource allocation",
        "Description": "Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval. "
      },
      {
        "Title": "Implementation: Provide for network flow control and traffic shaping to control access to the resources",
        "Description": "Implementation: Provide for network flow control and traffic shaping to control access to the resources. "
      }
    ]
  },
  {
    "Id": "CAPEC-53",
    "Description": "If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an attacker to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Properly handle Null characters",
        "Description": "Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs. "
      },
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. "
      }
    ]
  },
  {
    "Id": "CAPEC-533",
    "Description": "An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in their arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-536",
    "Description": "An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes",
        "Description": "Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes. "
      }
    ]
  },
  {
    "Id": "CAPEC-54",
    "Description": "An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide. ",
    "Likelihood": "High",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Application designers can construct a 'code book' for error messages",
        "Description": "Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally. "
      },
      {
        "Title": "Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks",
        "Description": "Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion. "
      }
    ]
  },
  {
    "Id": "CAPEC-545",
    "Description": "An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-546",
    "Description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there. ",
    "Likelihood": "Low",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources",
        "Description": "Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources. "
      },
      {
        "Title": "Deletion of data should be completed promptly when requested",
        "Description": "Deletion of data should be completed promptly when requested. "
      }
    ]
  },
  {
    "Id": "CAPEC-55",
    "Description": "An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system. A password rainbow table stores hash chains for various passwords. A password chain is computed, starting from the original password, P, via a reduce(compression) function R and a hash function H. A recurrence relation exists where Xi+1 = R(H(Xi)), X0 = P. Then the hash chain of length n for the original password P can be formed: X1, X2, X3, ... , Xn-2, Xn-1, Xn, H(Xn). P and H(Xn) are then stored together in the rainbow table. Constructing the rainbow tables takes a very long time and is computationally expensive. A separate table needs to be constructed for the various hash algorithms (e.g. SHA1, MD5, etc.). However, once a rainbow table is computed, it can be very effective in cracking the passwords that have been hashed without the use of salt. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use salt when computing password hashes",
        "Description": "Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it. "
      }
    ]
  },
  {
    "Id": "CAPEC-550",
    "Description": "When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Limit privileges of user accounts so new service creation can only be performed by authorized administrators",
        "Description": "Limit privileges of user accounts so new service creation can only be performed by authorized administrators. "
      }
    ]
  },
  {
    "Id": "CAPEC-551",
    "Description": "When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Limit privileges of user accounts so service changes can only be performed by authorized administrators",
        "Description": "Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently. "
      }
    ]
  },
  {
    "Id": "CAPEC-552",
    "Description": "An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Prevent adversary access to privileged accounts necessary to install rootkits",
        "Description": "Prevent adversary access to privileged accounts necessary to install rootkits. "
      }
    ]
  },
  {
    "Id": "CAPEC-554",
    "Description": "An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-555",
    "Description": "This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed. ",
    "Likelihood": null,
    "Impact": "Very High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Disable RDP, telnet, SSH and enable firewall rules to block such traffic",
        "Description": "Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins. "
      }
    ]
  },
  {
    "Id": "CAPEC-556",
    "Description": "When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Inspect registry for changes",
        "Description": "Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators. "
      }
    ]
  },
  {
    "Id": "CAPEC-558",
    "Description": "An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-560",
    "Description": "An adversary guesses or obtains (i.e. steals or purchases) legitimate credentials (e.g. userID/password) to achieve authentication and to perform authorized actions under the guise of an authenticated user or service. Attacks leveraging trusted credentials typically result in the adversary laterally moving within the local network, since users are often allowed to login to systems/applications within the network using the same password. This further allows the adversary to obtain sensitive data, download/install malware on the system, pose as a legitimate user for social engineering purposes, and more. Attacks on known passwords generally rely on the primary fact that users often reuse the same username/password combination for a variety of systems, applications, and services, coupled with poor password policies on the target system or application. Adversaries can also utilize known passwords to target Single Sign On (SSO) or cloud-based applications and services, which often don't verify the authenticity of the user's input. Known credentials are usually obtained by an adversary via a system/application breach and/or by purchasing dumps of credentials on the dark web. These credentials may be further gleaned via exposed configuration and properties files that contain system passwords, database connection strings, and other sensitive data. Successful spoofing and impersonation of trusted credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthentication",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityAuthorization",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network",
        "Description": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network. "
      },
      {
        "Title": "Create a strong password policy and ensure that your system enforces this policy",
        "Description": "Create a strong password policy and ensure that your system enforces this policy. "
      },
      {
        "Title": "Ensure users are not reusing username/password combinations for multiple systems, applications, or services",
        "Description": "Ensure users are not reusing username/password combinations for multiple systems, applications, or services. "
      },
      {
        "Title": "Do not reuse local administrator account credentials across systems",
        "Description": "Do not reuse local administrator account credentials across systems. "
      },
      {
        "Title": "Deny remote use of local admin credentials to log into domain systems",
        "Description": "Deny remote use of local admin credentials to log into domain systems. "
      },
      {
        "Title": "Do not allow accounts to be a local administrator on more than one system",
        "Description": "Do not allow accounts to be a local administrator on more than one system. "
      },
      {
        "Title": "Implement an intelligent password throttling mechanism",
        "Description": "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2. "
      },
      {
        "Title": "Monitor system and domain logs for abnormal credential access",
        "Description": "Monitor system and domain logs for abnormal credential access. "
      }
    ]
  },
  {
    "Id": "CAPEC-561",
    "Description": "An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain. Windows systems within the Windows NT family contain hidden network shares that are only accessible to system administrators. These shares allow administrators to remotely access all disk volumes on a network-connected system and further allow for files to be copied, written, and executed, along with other administrative actions. Example network shares include: C$, ADMIN$ and IPC$. If an adversary is able to obtain legitimate Windows credentials, the hidden shares can be accessed remotely, via server message block (SMB) or the Net utility, to transfer files and execute code. It is also possible for adversaries to utilize NTLM hashes to access administrator shares on systems with certain configuration and patch levels. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthentication",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityAuthorization",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Do not reuse local administrator account credentials across systems",
        "Description": "Do not reuse local administrator account credentials across systems. "
      },
      {
        "Title": "Deny remote use of local admin credentials to log into domain systems",
        "Description": "Deny remote use of local admin credentials to log into domain systems. "
      },
      {
        "Title": "Do not allow accounts to be a local administrator on more than one system",
        "Description": "Do not allow accounts to be a local administrator on more than one system. "
      }
    ]
  },
  {
    "Id": "CAPEC-562",
    "Description": "An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Disallow shared content",
        "Description": "Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run. "
      }
    ]
  },
  {
    "Id": "CAPEC-563",
    "Description": "An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Ensure proper permissions on directories that are accessible through a web server",
        "Description": "Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems. "
      }
    ]
  },
  {
    "Id": "CAPEC-564",
    "Description": "Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Restrict write access to logon scripts to necessary administrators",
        "Description": "Restrict write access to logon scripts to necessary administrators. "
      }
    ]
  },
  {
    "Id": "CAPEC-565",
    "Description": "In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of common or expected passwords, often matching the target's complexity policy, against a known list of user accounts to gain valid credentials. The adversary tries a particular password for each user account, before moving onto the next password in the list. This approach assists the adversary in remaining undetected by avoiding rapid or frequent account lockouts. The adversary may then reattempt the process with additional passwords, once enough time has passed to prevent inducing a lockout. Password Spraying attacks often target management services over commonly used ports such as SSH, FTP, Telnet, LDAP, Kerberos, MySQL, and more. Additional targets include Single Sign-On (SSO) or cloud-based applications/services that utilize federated authentication protocols, and externally facing applications. Successful execution of Password Spraying attacks usually lead to lateral movement within the target, which allows the adversary to impersonate the victim or execute any action that the victim is authorized to perform. If the password chosen by the user is commonly used or easily guessed, this attack will be successful (in the absence of other mitigations). This is a specific instance of the password brute forcing attack pattern. Password Spraying Attacks are similar to Dictionary-based Password Attacks (CAPEC-16) in that they both leverage precompiled lists (i.e. dictionaries) of username/password combinations to try against a system/application. The primary difference is that Password Spraying Attacks leverage a known list of user accounts and only try one password for each account before moving onto the next password. In contrast, Dictionary-based Password Attacks leverage unknown username/password combinations and are often executed offline against files containing hashed credentials, where inducing an account lockout is not a concern. Password Spraying Attacks are also similar to Credential Stuffing attacks (CAPEC-600), since both utilize known user accounts and often attack the same targets. Credential Stuffing attacks, however, leverage known username/password combinations, whereas Password Spraying attacks have no insight into known username/password pairs. If a Password Spraying attack succeeds, it may additionally lead to Credential Stuffing attacks on different targets. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthentication",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityAuthorization",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Create a strong password policy and ensure that your system enforces this policy",
        "Description": "Create a strong password policy and ensure that your system enforces this policy. "
      },
      {
        "Title": "Implement an intelligent password throttling mechanism",
        "Description": "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2. "
      },
      {
        "Title": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network",
        "Description": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network. "
      }
    ]
  },
  {
    "Id": "CAPEC-57",
    "Description": "This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated. Rest applications premise is that they leverage existing infrastructure to deliver web services functionality. An example of this is a Rest application that uses HTTP Get methods and receives a HTTP response with an XML document. These Rest style web services are deployed on existing infrastructure such as Apache and IIS web servers with no SOAP stack required. Unfortunately from a security standpoint, there frequently is no interoperable identity security mechanism deployed, so Rest developers often fall back to SSL to deliver security. In large data centers, SSL is typically terminated at the edge of the network - at the firewall, load balancer, or router. Once the SSL is terminated the HTTP request is in the clear (unless developers have hashed or encrypted the values, but this is rare). The attacker can utilize a sniffer such as Wireshark to snapshot the credentials, such as username and password that are passed in the clear once SSL is terminated. Once the attacker gathers these credentials, they can submit requests to the web service provider just as authorized user do. There is not typically an authentication on the client side, beyond what is passed in the request itself so once this is compromised, then this is generally sufficient to compromise the service's authentication scheme. ",
    "Likelihood": "Medium",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Implementation: Implement message level security such as HMAC in the HTTP communication ",
        "Description": "Implementation: Implement message level security such as HMAC in the HTTP communication "
      },
      {
        "Title": "Design: Utilize defense in depth, do not rely on a single security mechanism like SSL ",
        "Description": "Design: Utilize defense in depth, do not rely on a single security mechanism like SSL "
      },
      {
        "Title": "Design: Enforce principle of least privilege ",
        "Description": "Design: Enforce principle of least privilege "
      }
    ]
  },
  {
    "Id": "CAPEC-573",
    "Description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. ",
    "Likelihood": "Low",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": [
      {
        "Title": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist",
        "Description": "Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist. "
      }
    ]
  },
  {
    "Id": "CAPEC-574",
    "Description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include \"sc\" and \"tasklist/svc\" using Tasklist, and \"net start\" using Net. ",
    "Likelihood": "Low",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": [
      {
        "Title": "Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist",
        "Description": "Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist. "
      }
    ]
  },
  {
    "Id": "CAPEC-575",
    "Description": "An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: \"net user\" and \"dsquery\". ",
    "Likelihood": "Low",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": [
      {
        "Title": "Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist",
        "Description": "Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist. "
      }
    ]
  },
  {
    "Id": "CAPEC-576",
    "Description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is \"net localgroup\". ",
    "Likelihood": "Low",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": [
      {
        "Title": "Identify programs (such as \"net\") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist",
        "Description": "Identify programs (such as \"net\") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist. "
      }
    ]
  },
  {
    "Id": "CAPEC-577",
    "Description": "An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is \"dir /A ntuser.dat\". Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in. ",
    "Likelihood": "Low",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection MechanismHide Activities"
      }
    ],
    "Mitigations": [
      {
        "Title": "Ensure that proper permissions on files and folders are enacted to limit accessibility",
        "Description": "Ensure that proper permissions on files and folders are enacted to limit accessibility. "
      }
    ]
  },
  {
    "Id": "CAPEC-578",
    "Description": "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Hide Activities"
      }
    ],
    "Mitigations": [
      {
        "Title": "Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools",
        "Description": "Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools. "
      }
    ]
  },
  {
    "Id": "CAPEC-58",
    "Description": "Rest uses standard HTTP (Get, Put, Delete) style permissions methods, but these are not necessarily correlated generally with back end programs. Strict interpretation of HTTP get methods means that these HTTP Get services should not be used to delete information on the server, but there is no access control mechanism to back up this logic. This means that unless the services are properly ACL'd and the application's service implementation are following these guidelines then an HTTP request can easily execute a delete or update on the server side. The attacker identifies a HTTP Get URL such as http://victimsite/updateOrder, which calls out to a program to update orders on a database or other resource. The URL is not idempotent so the request can be submitted multiple times by the attacker, additionally, the attacker may be able to exploit the URL published as a Get method that actually performs updates (instead of merely retrieving data). This may result in malicious or inadvertent altering of data on the server. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Enforce principle of least privilege ",
        "Description": "Design: Enforce principle of least privilege "
      },
      {
        "Title": "Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side ",
        "Description": "Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side "
      },
      {
        "Title": "Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose ",
        "Description": "Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose "
      }
    ]
  },
  {
    "Id": "CAPEC-588",
    "Description": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAuthorizationAccess Control",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use browser technologies that do not allow client-side scripting",
        "Description": "Use browser technologies that do not allow client-side scripting. "
      },
      {
        "Title": "Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM",
        "Description": "Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. "
      },
      {
        "Title": "Ensure that all user-supplied input is validated before use",
        "Description": "Ensure that all user-supplied input is validated before use. "
      }
    ]
  },
  {
    "Id": "CAPEC-589",
    "Description": "An adversary intercepts traffic and intentionally drops DNS requests based on content in the request. In this way, the adversary can deny the availability of specific services or content to the user even if the IP address is changed. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": [
      {
        "Title": "Hard Coded Alternate DNS server in applications Avoid dependence on DNS Include \"hosts file\"/IP address in the application Ensure best practices with respect to communications channel protections",
        "Description": "Hard Coded Alternate DNS server in applications Avoid dependence on DNS Include \"hosts file\"/IP address in the application Ensure best practices with respect to communications channel protections. Use a .onion domain with Tor support "
      }
    ]
  },
  {
    "Id": "CAPEC-59",
    "Description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use a strong source of randomness to generate a session ID",
        "Description": "Use a strong source of randomness to generate a session ID. "
      },
      {
        "Title": "Use adequate length session IDs ",
        "Description": "Use adequate length session IDs "
      },
      {
        "Title": "Do not use information available to the user in order to generate session ID (e",
        "Description": "Do not use information available to the user in order to generate session ID (e.g., time). "
      },
      {
        "Title": "Ideas for creating random numbers are offered by Eastlake [RFC1750] ",
        "Description": "Ideas for creating random numbers are offered by Eastlake [RFC1750] "
      },
      {
        "Title": "Encrypt the session ID if you expose it to the user",
        "Description": "Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format. "
      }
    ]
  },
  {
    "Id": "CAPEC-590",
    "Description": "An adversary performing this type of attack drops packets destined for a target IP address. The aim is to prevent access to the service hosted at the target IP address. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": [
      {
        "Title": "Have a large pool of backup IPs built into the application and support proxy capability in the application",
        "Description": "Have a large pool of backup IPs built into the application and support proxy capability in the application. "
      }
    ]
  },
  {
    "Id": "CAPEC-591",
    "Description": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (&lt;img&gt;), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAuthorizationAccess Control",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use browser technologies that do not allow client-side scripting",
        "Description": "Use browser technologies that do not allow client-side scripting. "
      },
      {
        "Title": "Utilize strict type, character, and encoding enforcement",
        "Description": "Utilize strict type, character, and encoding enforcement. "
      },
      {
        "Title": "Ensure that all user-supplied input is validated before use",
        "Description": "Ensure that all user-supplied input is validated before use. "
      }
    ]
  },
  {
    "Id": "CAPEC-592",
    "Description": "This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly \"stored\" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (&lt;img&gt;), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAuthorizationAccess Control",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use browser technologies that do not allow client-side scripting",
        "Description": "Use browser technologies that do not allow client-side scripting. "
      },
      {
        "Title": "Utilize strict type, character, and encoding enforcement",
        "Description": "Utilize strict type, character, and encoding enforcement. "
      },
      {
        "Title": "Ensure that all user-supplied input is validated before being stored",
        "Description": "Ensure that all user-supplied input is validated before being stored. "
      }
    ]
  },
  {
    "Id": "CAPEC-593",
    "Description": "This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key",
        "Description": "Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated. "
      }
    ]
  },
  {
    "Id": "CAPEC-594",
    "Description": "An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-595",
    "Description": "In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-596",
    "Description": "An adversary injects one or more TCP RST packets to a target after the target has made a HTTP GET request. The goal of this attack is to have the target and/or destination web server terminate the TCP connection. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-597",
    "Description": "An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as \"..\" to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access. ",
    "Likelihood": null,
    "Impact": null,
    "Consequences": [
      {
        "Scope": "IntegrityConfidentialityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Configure the access control correctly",
        "Description": "Design: Configure the access control correctly. "
      },
      {
        "Title": "Design: Enforce principle of least privilege",
        "Description": "Design: Enforce principle of least privilege. "
      },
      {
        "Title": "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities",
        "Description": "Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution. "
      },
      {
        "Title": "Design: Input validation",
        "Description": "Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement. "
      },
      {
        "Title": "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host",
        "Description": "Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host. "
      },
      {
        "Title": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands",
        "Description": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. "
      },
      {
        "Title": "Implementation: Host integrity monitoring for critical files, directories, and processes",
        "Description": "Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin. "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content, including remote and user-generated content",
        "Description": "Implementation: Perform input validation for all remote content, including remote and user-generated content. "
      },
      {
        "Title": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables",
        "Description": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables. "
      },
      {
        "Title": "Implementation: Use indirect references rather than actual file names",
        "Description": "Implementation: Use indirect references rather than actual file names. "
      },
      {
        "Title": "Implementation: Use possible permissions on file access when developing and deploying web applications",
        "Description": "Implementation: Use possible permissions on file access when developing and deploying web applications. "
      },
      {
        "Title": "Implementation: Validate user input by only accepting known good",
        "Description": "Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification using an allowlist approach. "
      }
    ]
  },
  {
    "Id": "CAPEC-6",
    "Description": "An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent",
        "Description": "Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process. "
      },
      {
        "Title": "Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account",
        "Description": "Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred. "
      },
      {
        "Title": "Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise",
        "Description": "Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise. "
      }
    ]
  },
  {
    "Id": "CAPEC-60",
    "Description": "This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Always invalidate a session ID after the user logout",
        "Description": "Always invalidate a session ID after the user logout. "
      },
      {
        "Title": "Setup a session time out for the session IDs",
        "Description": "Setup a session time out for the session IDs. "
      },
      {
        "Title": "Protect the communication between the client and server",
        "Description": "Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate man in the middle attack. "
      },
      {
        "Title": "Do not code send session ID with GET method, otherwise the session ID will be copied to the URL",
        "Description": "Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker. "
      },
      {
        "Title": "Encrypt the session data associated with the session ID",
        "Description": "Encrypt the session data associated with the session ID. "
      },
      {
        "Title": "Use multifactor authentication",
        "Description": "Use multifactor authentication. "
      }
    ]
  },
  {
    "Id": "CAPEC-600",
    "Description": "An adversary tries known username/password combinations against different systems, applications, or services to gain additional authenticated access. Credential Stuffing attacks rely upon the fact that many users leverage the same username/password combination for multiple systems, applications, and services. Attacks of this kind often target management services over commonly used ports such as SSH, FTP, Telnet, LDAP, Kerberos, MySQL, and more. Additional targets include Single Sign-On (SSO) or cloud-based applications/services that utilize federated authentication protocols, and externally facing applications. The primary goal of Credential Stuffing is to achieve lateral movement and gain authenticated access to additional systems, applications, and/or services. A successfully executed Credential Stuffing attack could result in the adversary impersonating the victim or executing any action that the victim is authorized to perform. If the password obtained by the adversary is used for multiple systems, accounts, and/or services, this attack will be successful (in the absence of other mitigations). Although not technically a brute force attack, Credential Stuffing attacks can function as such if an adversary possess multiple known passwords for the same user account. This may occur in the event where an adversary obtains user credentials from multiple sources or if the adversary obtains a user's password history for an account. Credential Stuffing attacks are similar to Password Spraying attacks (CAPEC-565) regarding their targets and their overall goals. However, Password Spraying attacks do not have any insight into known username/password combinations and instead leverage common or expected passwords. This also means that Password Spraying attacks must avoid inducing account lockouts, which is generally not a worry of Credential Stuffing attacks. Password Spraying attacks may additionally lead to Credential Stuffing attacks, once a successful username/password combination is discovered. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthentication",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityAuthorization",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network",
        "Description": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network. "
      },
      {
        "Title": "Create a strong password policy and ensure that your system enforces this policy",
        "Description": "Create a strong password policy and ensure that your system enforces this policy. "
      },
      {
        "Title": "Ensure users are not reusing username/password combinations for multiple systems, applications, or services",
        "Description": "Ensure users are not reusing username/password combinations for multiple systems, applications, or services. "
      },
      {
        "Title": "Do not reuse local administrator account credentials across systems",
        "Description": "Do not reuse local administrator account credentials across systems. "
      },
      {
        "Title": "Deny remote use of local admin credentials to log into domain systems",
        "Description": "Deny remote use of local admin credentials to log into domain systems. "
      },
      {
        "Title": "Do not allow accounts to be a local administrator on more than one system",
        "Description": "Do not allow accounts to be a local administrator on more than one system. "
      },
      {
        "Title": "Implement an intelligent password throttling mechanism",
        "Description": "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2. "
      },
      {
        "Title": "Monitor system and domain logs for abnormal credential access",
        "Description": "Monitor system and domain logs for abnormal credential access. "
      }
    ]
  },
  {
    "Id": "CAPEC-606",
    "Description": "An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode). ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption",
        "Description": "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption. "
      },
      {
        "Title": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption",
        "Description": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption. "
      }
    ]
  },
  {
    "Id": "CAPEC-608",
    "Description": "The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption",
        "Description": "Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption. "
      },
      {
        "Title": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption",
        "Description": "Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption. "
      }
    ]
  },
  {
    "Id": "CAPEC-609",
    "Description": "Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter",
        "Description": "Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter. "
      }
    ]
  },
  {
    "Id": "CAPEC-61",
    "Description": "The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice",
        "Description": "Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice. "
      },
      {
        "Title": "Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes",
        "Description": "Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes. "
      },
      {
        "Title": "Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them",
        "Description": "Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult. "
      }
    ]
  },
  {
    "Id": "CAPEC-612",
    "Description": "In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Automatic randomization of WiFi MAC addresses ",
        "Description": "Automatic randomization of WiFi MAC addresses "
      },
      {
        "Title": "Frequent changing of handset and retransmission device ",
        "Description": "Frequent changing of handset and retransmission device "
      }
    ]
  },
  {
    "Id": "CAPEC-613",
    "Description": "In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Do not enable the feature of \"Hidden SSIDs\" (also known as \"Network Cloaking\") – this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID",
        "Description": "Do not enable the feature of \"Hidden SSIDs\" (also known as \"Network Cloaking\") – this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently. "
      },
      {
        "Title": "Frequently change the SSID to new and unrelated values ",
        "Description": "Frequently change the SSID to new and unrelated values "
      }
    ]
  },
  {
    "Id": "CAPEC-614",
    "Description": "SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrity",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA",
        "Description": "Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA. "
      }
    ]
  },
  {
    "Id": "CAPEC-615",
    "Description": "Adversaries install Wi-Fi equipment that acts as a legitimate Wi-Fi network access point. When a device connects to this access point, Wi-Fi data traffic is intercepted, captured, and analyzed. This also allows the adversary to act as a \"man-in-the-middle\" for all communications. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Commercial defensive technology that monitors for rogue Wi-Fi access points, man-in-the-middle attacks, and anomalous activity with the mobile device baseband radios",
        "Description": "Commercial defensive technology that monitors for rogue Wi-Fi access points, man-in-the-middle attacks, and anomalous activity with the mobile device baseband radios. "
      }
    ]
  },
  {
    "Id": "CAPEC-616",
    "Description": "An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrity",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-618",
    "Description": "In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence or absence of that message, an attacker could verify that the target is in (or not in) a given location. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Other",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": [
      {
        "Title": "Frequent changing of mobile number",
        "Description": "Frequent changing of mobile number. "
      }
    ]
  },
  {
    "Id": "CAPEC-619",
    "Description": "In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-62",
    "Description": "An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply \"riding\" the existing session cookie. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use cryptographic tokens to associate a request with a specific action",
        "Description": "Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with. "
      },
      {
        "Title": "Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context",
        "Description": "Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context. "
      },
      {
        "Title": "Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked",
        "Description": "Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions. "
      },
      {
        "Title": "In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context",
        "Description": "In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context. "
      }
    ]
  },
  {
    "Id": "CAPEC-620",
    "Description": "An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Access Control",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-621",
    "Description": "An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients). ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing",
        "Description": "Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing. "
      }
    ]
  },
  {
    "Id": "CAPEC-622",
    "Description": "In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing). This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Utilize side-channel resistant implementations of all crypto algorithms",
        "Description": "Utilize side-channel resistant implementations of all crypto algorithms. "
      },
      {
        "Title": "Strong physical security of all devices that contain secret key information",
        "Description": "Strong physical security of all devices that contain secret key information. (even when devices are not in use) "
      }
    ]
  },
  {
    "Id": "CAPEC-623",
    "Description": "Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "None are known",
        "Description": "None are known. "
      }
    ]
  },
  {
    "Id": "CAPEC-624",
    "Description": "The adversary uses disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior in electronic devices. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read DataBypass Protection MechanismHide Activities"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Implement robust physical security countermeasures and monitoring",
        "Description": "Implement robust physical security countermeasures and monitoring. "
      }
    ]
  },
  {
    "Id": "CAPEC-63",
    "Description": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Use browser technologies that do not allow client side scripting",
        "Description": "Design: Use browser technologies that do not allow client side scripting. "
      },
      {
        "Title": "Design: Utilize strict type, character, and encoding enforcement ",
        "Description": "Design: Utilize strict type, character, and encoding enforcement "
      },
      {
        "Title": "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from",
        "Description": "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. "
      },
      {
        "Title": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification",
        "Description": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content",
        "Description": "Implementation: Perform input validation for all remote content. "
      },
      {
        "Title": "Implementation: Perform output validation for all remote content",
        "Description": "Implementation: Perform output validation for all remote content. "
      },
      {
        "Title": "Implementation: Session tokens for specific host ",
        "Description": "Implementation: Session tokens for specific host "
      },
      {
        "Title": "Implementation: Patching software",
        "Description": "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. "
      }
    ]
  },
  {
    "Id": "CAPEC-633",
    "Description": "An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Alter Execution Logic"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Hide Activities"
      }
    ],
    "Mitigations": null
  },
  {
    "Id": "CAPEC-634",
    "Description": "The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Prevent unknown code from executing on a system through the use of an allowlist policy",
        "Description": "Prevent unknown code from executing on a system through the use of an allowlist policy. "
      },
      {
        "Title": "Patch installed applications as soon as new updates become available",
        "Description": "Patch installed applications as soon as new updates become available. "
      }
    ]
  },
  {
    "Id": "CAPEC-635",
    "Description": "The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension",
        "Description": "Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension. "
      }
    ]
  },
  {
    "Id": "CAPEC-637",
    "Description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized. ",
    "Likelihood": "Low",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature",
        "Description": "While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality. "
      },
      {
        "Title": "Employ a robust identification and audit/blocking via using an allowlist of applications on your system",
        "Description": "Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern. "
      }
    ]
  },
  {
    "Id": "CAPEC-639",
    "Description": "An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary",
        "Description": "Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary. "
      }
    ]
  },
  {
    "Id": "CAPEC-64",
    "Description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input. "
      },
      {
        "Title": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding",
        "Description": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. "
      },
      {
        "Title": "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated",
        "Description": "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible. "
      },
      {
        "Title": "Any security checks should occur after the data has been decoded and validated as correct data format",
        "Description": "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. "
      },
      {
        "Title": "Refer to the RFCs to safely decode URL",
        "Description": "Refer to the RFCs to safely decode URL. "
      },
      {
        "Title": "Regular expression can be used to match safe URL patterns",
        "Description": "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive. "
      },
      {
        "Title": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www",
        "Description": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx). "
      }
    ]
  },
  {
    "Id": "CAPEC-642",
    "Description": "Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Insure that binaries commonly used by the system have the correct file permissions",
        "Description": "Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services. "
      }
    ]
  },
  {
    "Id": "CAPEC-643",
    "Description": "An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools",
        "Description": "Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools. "
      }
    ]
  },
  {
    "Id": "CAPEC-644",
    "Description": "An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential (e.g. userID and password) hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols. When authenticating via LM or NTLM, an authenticating account's plaintext credentials are not required by the protocols for successful authentication. Instead, the hashed credentials are used to determine if an authentication attempt is valid. If an adversary can obtain an account's hashed credentials, the hash values can then be passed to a system or service to authenticate, without needing to brute-force the hashes to obtain their cleartext values. Successful Pass The Hash attacks result in the adversary fully authenticating as the targeted account, which can further allow the adversary to laterally move within the network, impersonate a legitimate user, and/or download/install malware to systems within the domain. This technique can be performed against any operating system that leverages the LM or NTLM protocols even if the operating system is not Windows-based, since these systems/accounts may still authenticate to a Windows domain. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthentication",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityAuthorization",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems",
        "Description": "Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems. "
      },
      {
        "Title": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network",
        "Description": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network. "
      },
      {
        "Title": "Monitor system and domain logs for abnormal credential access",
        "Description": "Monitor system and domain logs for abnormal credential access. "
      },
      {
        "Title": "Create a strong password policy and ensure that your system enforces this policy",
        "Description": "Create a strong password policy and ensure that your system enforces this policy. "
      },
      {
        "Title": "Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain",
        "Description": "Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain. "
      }
    ]
  },
  {
    "Id": "CAPEC-645",
    "Description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them",
        "Description": "Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them. "
      },
      {
        "Title": "Monitor system and domain logs for abnormal access",
        "Description": "Monitor system and domain logs for abnormal access. "
      }
    ]
  },
  {
    "Id": "CAPEC-646",
    "Description": "Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks. ",
    "Likelihood": "Low",
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": [
      {
        "Title": "Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist",
        "Description": "Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist. "
      }
    ]
  },
  {
    "Id": "CAPEC-647",
    "Description": "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Employ a robust and layered defensive posture in order to prevent unauthorized users on your system",
        "Description": "Employ a robust and layered defensive posture in order to prevent unauthorized users on your system. "
      },
      {
        "Title": "Employ robust identification and audit/blocking via using an allowlist of applications on your system",
        "Description": "Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern. "
      }
    ]
  },
  {
    "Id": "CAPEC-648",
    "Description": "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks. ",
    "Likelihood": "Medium",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools",
        "Description": "Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools. "
      },
      {
        "Title": "While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature",
        "Description": "While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature. "
      }
    ]
  },
  {
    "Id": "CAPEC-649",
    "Description": "An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution. ",
    "Likelihood": "Low",
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "File extensions should be checked to see if non-visible characters are being included",
        "Description": "File extensions should be checked to see if non-visible characters are being included. "
      }
    ]
  },
  {
    "Id": "CAPEC-65",
    "Description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server. ",
    "Likelihood": "Low",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Encrypt all communication between the client and server",
        "Description": "Design: Encrypt all communication between the client and server. "
      },
      {
        "Title": "Implementation: Use SSL, SSH, SCP",
        "Description": "Implementation: Use SSL, SSH, SCP. "
      },
      {
        "Title": "Operation: Use \"ifconfig/ipconfig\" or other tools to detect the sniffer installed in the network",
        "Description": "Operation: Use \"ifconfig/ipconfig\" or other tools to detect the sniffer installed in the network. "
      }
    ]
  },
  {
    "Id": "CAPEC-650",
    "Description": "By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a \"gateway\" to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels. ",
    "Likelihood": null,
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Make sure your web server is up-to-date with all patches to protect against known vulnerabilities",
        "Description": "Make sure your web server is up-to-date with all patches to protect against known vulnerabilities. Insure that the file permissions in directories on the web server from which files can be execute is set to the \"least privilege\" settings, and that those directories contents is controlled by an allowlist. "
      }
    ]
  },
  {
    "Id": "CAPEC-651",
    "Description": "An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Other"
      }
    ],
    "Mitigations": [
      {
        "Title": "Be mindful of your surroundings when discussing sensitive information in public areas",
        "Description": "Be mindful of your surroundings when discussing sensitive information in public areas. "
      },
      {
        "Title": "Implement proper software restriction policies to only allow authorized software on your environment",
        "Description": "Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available. "
      },
      {
        "Title": "If possible, physically disable the microphone on your machine if it is not needed",
        "Description": "If possible, physically disable the microphone on your machine if it is not needed. "
      }
    ]
  },
  {
    "Id": "CAPEC-652",
    "Description": "An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain. Kerberos is the default authentication method for Windows domains and is utilized for numerous authentication purposes. Attacks leveraging trusted Kerberos credentials can result in numerous consequences, depending on what Kerberos credential is stolen. For example, Kerberos service accounts are typically used to run services or scheduled tasks pertaining to authentication. However, these credentials are often weak and never expire, in addition to possessing local or domain administrator privileges. If an adversary is able to acquire these credentials, it could result in lateral movement within the Windows domain or access to any resources the service account is privileged to access, among other things. The protocol itself centers around a ticketing system that is used to request/grant access to resources and to then access the requested resources. If one of these tickets is acquired, an adversary could gain access to a specific resource; access any resource a user has privileges to access; gain access to services that use Kerberos as an authentication mechanism and generate tickets to access a particular resource and the system that hosts the resource; or generate Ticket Granting Tickets (TGTs) for any domain account within Active Directory. Kerberos credentials can be obtained by an adversary via methods such as system breaches, network sniffing attacks, and/or brute force attacks against the Kerberos service account or the hash of a service ticket. Ultimately, successful spoofing and impersonation of trusted Kerberos credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthentication",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityAuthorization",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts",
        "Description": "Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts. "
      },
      {
        "Title": "Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services",
        "Description": "Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services. "
      },
      {
        "Title": "Do not reuse Kerberos service account credentials across systems",
        "Description": "Do not reuse Kerberos service account credentials across systems. "
      },
      {
        "Title": "Deny remote use of Kerberos service account credentials to log into domain systems",
        "Description": "Deny remote use of Kerberos service account credentials to log into domain systems. "
      },
      {
        "Title": "Do not allow Kerberos service accounts to be a local administrator on more than one system",
        "Description": "Do not allow Kerberos service accounts to be a local administrator on more than one system. "
      },
      {
        "Title": "Enable at least AES Kerberos encryption for tickets",
        "Description": "Enable at least AES Kerberos encryption for tickets. "
      },
      {
        "Title": "Monitor system and domain logs for abnormal credential access",
        "Description": "Monitor system and domain logs for abnormal credential access. "
      }
    ]
  },
  {
    "Id": "CAPEC-653",
    "Description": "An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows domain credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the domain, under the guise of an authenticated user or service. Attacks leveraging trusted Windows credentials typically result in the adversary laterally moving within the local Windows network, since users are often allowed to login to systems/applications within the domain using their Windows domain password. This domain authentication can occur directly (user typing in their password or PIN) or via Single Sign-On (SSO) or cloud-based authentication, which often don't verify the authenticity of the user's input. Known credentials are usually obtained by an adversary via a system/application breach and/or by purchasing dumps of credentials on the dark web. These credentials may be further gleaned via exposed configuration and properties files that contain system passwords, database connection strings, and other sensitive data. Utilizing known Windows credentials, an adversary can obtain sensitive data from administrator shares, download/install malware on the system, pose as a legitimate user for social engineering purposes, and more. Ultimately, successful spoofing and impersonation of trusted credentials can lead to an adversary breaking authentication, authorization, and audit controls with the target system or application. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthentication",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityAuthorization",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network",
        "Description": "Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network. "
      },
      {
        "Title": "Create a strong password policy and ensure that your system enforces this policy",
        "Description": "Create a strong password policy and ensure that your system enforces this policy. "
      },
      {
        "Title": "Ensure users are not reusing username/password combinations for multiple systems, applications, or services",
        "Description": "Ensure users are not reusing username/password combinations for multiple systems, applications, or services. "
      },
      {
        "Title": "Do not reuse local administrator account credentials across systems",
        "Description": "Do not reuse local administrator account credentials across systems. "
      },
      {
        "Title": "Deny remote use of local admin credentials to log into domain systems",
        "Description": "Deny remote use of local admin credentials to log into domain systems. "
      },
      {
        "Title": "Do not allow accounts to be a local administrator on more than one system",
        "Description": "Do not allow accounts to be a local administrator on more than one system. "
      },
      {
        "Title": "Implement an intelligent password throttling mechanism",
        "Description": "Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2. "
      },
      {
        "Title": "Monitor system and domain logs for abnormal credential access",
        "Description": "Monitor system and domain logs for abnormal credential access. "
      }
    ]
  },
  {
    "Id": "CAPEC-66",
    "Description": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker: ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content",
        "Description": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear. "
      },
      {
        "Title": "Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails",
        "Description": "Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically. "
      },
      {
        "Title": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages",
        "Description": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application. "
      }
    ]
  },
  {
    "Id": "CAPEC-67",
    "Description": "This attack targets the format string vulnerabilities in the syslog() function. An attacker would typically inject malicious input in the format string parameter of the syslog function. This is a common problem, and many public vulnerabilities and associated exploits have been posted. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "The code should be reviewed for misuse of the Syslog function call",
        "Description": "The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog(): syslog(LOG_ERR, \"%s\", cmdBuf); The following code shows a vulnerable usage of Syslog(): syslog(LOG_ERR, cmdBuf); // the buffer cmdBuff is taking user supplied data. "
      }
    ]
  },
  {
    "Id": "CAPEC-68",
    "Description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack. ",
    "Likelihood": "Low",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "A given code signing scheme may be fallible due to improper use of cryptography",
        "Description": "A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored. "
      },
      {
        "Title": "If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes",
        "Description": "If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable. "
      }
    ]
  },
  {
    "Id": "CAPEC-69",
    "Description": "This attack targets programs running with elevated privileges. The attacker would try to leverage a bug in the running program and get arbitrary code to execute with elevated privileges. For instance an attacker would look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break. The malicious user try to execute its code at the same level as a privileged system call. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      }
    ],
    "Mitigations": [
      {
        "Title": "Apply the principle of least privilege",
        "Description": "Apply the principle of least privilege. "
      },
      {
        "Title": "Validate all untrusted data",
        "Description": "Validate all untrusted data. "
      },
      {
        "Title": "Apply the latest patches",
        "Description": "Apply the latest patches. "
      },
      {
        "Title": "Scan your services and disable the ones which are not needed and are exposed unnecessarily",
        "Description": "Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them. "
      },
      {
        "Title": "Avoid revealing information about your system (e",
        "Description": "Avoid revealing information about your system (e.g., version of the program) to anonymous users. "
      },
      {
        "Title": "Make sure that your program or service fail safely",
        "Description": "Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs. "
      },
      {
        "Title": "If possible use a sandbox model which limits the actions that programs can take",
        "Description": "If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage. "
      },
      {
        "Title": "Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code",
        "Description": "Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code. "
      },
      {
        "Title": "Monitor traffic and resource usage and pay attention if resource exhaustion occurs",
        "Description": "Monitor traffic and resource usage and pay attention if resource exhaustion occurs. "
      },
      {
        "Title": "Protect your log file from unauthorized modification and log forging",
        "Description": "Protect your log file from unauthorized modification and log forging. "
      }
    ]
  },
  {
    "Id": "CAPEC-7",
    "Description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Security by Obscurity is not a solution to preventing SQL Injection",
        "Description": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals. "
      },
      {
        "Title": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content",
        "Description": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear. "
      }
    ]
  },
  {
    "Id": "CAPEC-70",
    "Description": "An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Delete all default account credentials that may be put in by the product vendor",
        "Description": "Delete all default account credentials that may be put in by the product vendor. "
      },
      {
        "Title": "Implement a password throttling mechanism",
        "Description": "Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user. "
      },
      {
        "Title": "Put together a strong password policy and make sure that all user created passwords comply with it",
        "Description": "Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users. "
      },
      {
        "Title": "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen",
        "Description": "Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen. "
      }
    ]
  },
  {
    "Id": "CAPEC-71",
    "Description": "An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      }
    ],
    "Mitigations": [
      {
        "Title": "Ensure that the system is Unicode aware and can properly process Unicode data",
        "Description": "Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII. "
      },
      {
        "Title": "Ensure that filtering or input validation is applied to canonical data",
        "Description": "Ensure that filtering or input validation is applied to canonical data. "
      },
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. "
      }
    ]
  },
  {
    "Id": "CAPEC-72",
    "Description": "This attack targets the encoding of the URL. An attacker can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL. An URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc. The attacker could also subvert the meaning of the URL string request by encoding the data being sent to the server through a GET request. For instance an attacker may subvert the meaning of parameters used in a SQL request and sent through the URL string (See Example section). ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Refer to the RFCs to safely decode URL",
        "Description": "Refer to the RFCs to safely decode URL. "
      },
      {
        "Title": "Regular expression can be used to match safe URL patterns",
        "Description": "Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive. "
      },
      {
        "Title": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www",
        "Description": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx). "
      },
      {
        "Title": "Any security checks should occur after the data has been decoded and validated as correct data format",
        "Description": "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. "
      },
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input. "
      },
      {
        "Title": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding",
        "Description": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section) "
      },
      {
        "Title": "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated",
        "Description": "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible. "
      }
    ]
  },
  {
    "Id": "CAPEC-73",
    "Description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Alter Execution Logic"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Use browser technologies that do not allow client side scripting",
        "Description": "Design: Use browser technologies that do not allow client side scripting. "
      },
      {
        "Title": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification",
        "Description": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content",
        "Description": "Implementation: Perform input validation for all remote content. "
      },
      {
        "Title": "Implementation: Perform output validation for all remote content",
        "Description": "Implementation: Perform output validation for all remote content. "
      },
      {
        "Title": "Implementation: Disable scripting languages such as JavaScript in browser ",
        "Description": "Implementation: Disable scripting languages such as JavaScript in browser "
      },
      {
        "Title": "Implementation: Scan dynamically generated content against validation specification ",
        "Description": "Implementation: Scan dynamically generated content against validation specification "
      }
    ]
  },
  {
    "Id": "CAPEC-74",
    "Description": "The adversary modifies state information maintained by the target software or causes a state transition in hardware. If successful, the target will use this tainted state and execute in an unintended manner. State management is an important function within a software application. User state maintained by the application can include usernames, payment information, browsing history as well as application-specific contents such as items in a shopping cart. Manipulating user state can be employed by an adversary to elevate privilege, conduct fraudulent transactions or otherwise modify the flow of the application to derive certain benefits. If there is a hardware logic error in a finite state machine, the adversary can use this to put the system in an undefined state which could cause a denial of service or exposure of secure data. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      }
    ],
    "Mitigations": [
      {
        "Title": "Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state",
        "Description": "Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state. "
      },
      {
        "Title": "Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations",
        "Description": "Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations. "
      },
      {
        "Title": "Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request",
        "Description": "Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request. "
      },
      {
        "Title": "All possible states must be handled by hardware finite state machines",
        "Description": "All possible states must be handled by hardware finite state machines. "
      }
    ]
  },
  {
    "Id": "CAPEC-75",
    "Description": "Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Enforce principle of least privilege ",
        "Description": "Design: Enforce principle of least privilege "
      },
      {
        "Title": "Design: Backup copies of all configuration files ",
        "Description": "Design: Backup copies of all configuration files "
      },
      {
        "Title": "Implementation: Integrity monitoring for configuration files ",
        "Description": "Implementation: Integrity monitoring for configuration files "
      },
      {
        "Title": "Implementation: Enforce audit logging on code and configuration promotion procedures",
        "Description": "Implementation: Enforce audit logging on code and configuration promotion procedures. "
      },
      {
        "Title": "Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD ",
        "Description": "Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD "
      }
    ]
  },
  {
    "Id": "CAPEC-76",
    "Description": "An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Enforce principle of least privilege",
        "Description": "Design: Enforce principle of least privilege. "
      },
      {
        "Title": "Design: Ensure all input is validated, and does not contain file system commands ",
        "Description": "Design: Ensure all input is validated, and does not contain file system commands "
      },
      {
        "Title": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands",
        "Description": "Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. "
      },
      {
        "Title": "Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication",
        "Description": "Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication. "
      },
      {
        "Title": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables",
        "Description": "Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables. "
      }
    ]
  },
  {
    "Id": "CAPEC-77",
    "Description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An attacker can override environment variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the attacker can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Do not allow override of global variables and do Not Trust Global Variables",
        "Description": "Do not allow override of global variables and do Not Trust Global Variables. If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables. "
      },
      {
        "Title": "A software system should be reluctant to trust variables that have been initialized outside of its trust boundary",
        "Description": "A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. "
      },
      {
        "Title": "Separate the presentation layer and the business logic layer",
        "Description": "Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data. "
      },
      {
        "Title": "Use encapsulation when declaring your variables",
        "Description": "Use encapsulation when declaring your variables. This is to lower the exposure of your variables. "
      },
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program. "
      }
    ]
  },
  {
    "Id": "CAPEC-78",
    "Description": "This attack targets the use of the backslash in alternate encoding. An attacker can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the attacker tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Resource Consumption"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": [
      {
        "Title": "Verify that the user-supplied data does not use backslash character to escape malicious characters",
        "Description": "Verify that the user-supplied data does not use backslash character to escape malicious characters. "
      },
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. "
      },
      {
        "Title": "Be aware of the threat of alternative method of data encoding",
        "Description": "Be aware of the threat of alternative method of data encoding. "
      },
      {
        "Title": "Regular expressions can be used to filter out backslash",
        "Description": "Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data. "
      },
      {
        "Title": "In the case of path traversals, use the principle of least privilege when determining access rights to file systems",
        "Description": "In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access. "
      },
      {
        "Title": "Any security checks should occur after the data has been decoded and validated as correct data format",
        "Description": "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. "
      },
      {
        "Title": "Avoid making decisions based on names of resources (e",
        "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names. "
      }
    ]
  },
  {
    "Id": "CAPEC-79",
    "Description": "This attack targets the encoding of the Slash characters. An attacker would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the attacker many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Any security checks should occur after the data has been decoded and validated as correct data format",
        "Description": "Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL. "
      },
      {
        "Title": "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated",
        "Description": "When client input is required from web-based forms, avoid using the \"GET\" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the \"POST method whenever possible. "
      },
      {
        "Title": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www",
        "Description": "There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx) "
      },
      {
        "Title": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding",
        "Description": "Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section) "
      },
      {
        "Title": "Test your path decoding process against malicious input",
        "Description": "Test your path decoding process against malicious input. "
      },
      {
        "Title": "In the case of path traversals, use the principle of least privilege when determining access rights to file systems",
        "Description": "In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access. "
      },
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. "
      }
    ]
  },
  {
    "Id": "CAPEC-8",
    "Description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An attacker who has access to an API may try to embed malicious code in the API function call and exploit a buffer overflow vulnerability in the function's implementation. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use a language or compiler that performs automatic bounds checking",
        "Description": "Use a language or compiler that performs automatic bounds checking. "
      },
      {
        "Title": "Use secure functions not vulnerable to buffer overflow",
        "Description": "Use secure functions not vulnerable to buffer overflow. "
      },
      {
        "Title": "If you have to use dangerous functions, make sure that you do boundary checking",
        "Description": "If you have to use dangerous functions, make sure that you do boundary checking. "
      },
      {
        "Title": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag",
        "Description": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. "
      },
      {
        "Title": "Use OS-level preventative functionality",
        "Description": "Use OS-level preventative functionality. Not a complete solution. "
      }
    ]
  },
  {
    "Id": "CAPEC-80",
    "Description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the \"shortest possible\" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      }
    ],
    "Mitigations": [
      {
        "Title": "The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal",
        "Description": "The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters. "
      },
      {
        "Title": "The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards",
        "Description": "The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence: 1. Insert a replacement character (e.g. '?', ''). 2. Ignore the bytes. 3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map). 4. Not notice and decode as if the bytes were some similar bit of UTF-8. 5. Stop decoding and report an error (possibly giving the caller the option to continue). It is possible for a decoder to behave in different ways for different types of invalid input. RFC 3629 only requires that UTF-8 decoders must not decode \"overlong sequences\" (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to \"...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence.\" Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done. To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data. Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position. "
      },
      {
        "Title": "For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character",
        "Description": "For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms). "
      },
      {
        "Title": "Look for overlong UTF-8 sequences starting with malicious pattern",
        "Description": "Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section) "
      },
      {
        "Title": "Assume all input is malicious",
        "Description": "Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input. "
      }
    ]
  },
  {
    "Id": "CAPEC-81",
    "Description": "Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application. ",
    "Likelihood": "Medium",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Use input validation before writing to web log ",
        "Description": "Design: Use input validation before writing to web log "
      },
      {
        "Title": "Design: Validate all log data before it is output ",
        "Description": "Design: Validate all log data before it is output "
      }
    ]
  },
  {
    "Id": "CAPEC-83",
    "Description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression",
        "Description": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&amp;) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions. "
      },
      {
        "Title": "Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails",
        "Description": "Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. "
      },
      {
        "Title": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages",
        "Description": "Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application. "
      }
    ]
  },
  {
    "Id": "CAPEC-84",
    "Description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Perform input allowlist validation on all XML input ",
        "Description": "Design: Perform input allowlist validation on all XML input "
      },
      {
        "Title": "Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL",
        "Description": "Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL. "
      }
    ]
  },
  {
    "Id": "CAPEC-85",
    "Description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS. ",
    "Likelihood": "High",
    "Impact": "Low",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Use browser technologies that do not allow client side scripting",
        "Description": "Design: Use browser technologies that do not allow client side scripting. "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content",
        "Description": "Implementation: Perform input validation for all remote content. "
      }
    ]
  },
  {
    "Id": "CAPEC-86",
    "Description": "An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      }
    ],
    "Mitigations": [
      {
        "Title": "Design: Use browser technologies that do not allow client side scripting",
        "Description": "Design: Use browser technologies that do not allow client side scripting. "
      },
      {
        "Title": "Design: Utilize strict type, character, and encoding enforcement ",
        "Description": "Design: Utilize strict type, character, and encoding enforcement "
      },
      {
        "Title": "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from",
        "Description": "Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. "
      },
      {
        "Title": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification",
        "Description": "Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. "
      },
      {
        "Title": "Implementation: Perform input validation for all remote content",
        "Description": "Implementation: Perform input validation for all remote content. "
      },
      {
        "Title": "Implementation: Perform output validation for all remote content",
        "Description": "Implementation: Perform output validation for all remote content. "
      },
      {
        "Title": "Implementation: Disable scripting languages such as JavaScript in browser ",
        "Description": "Implementation: Disable scripting languages such as JavaScript in browser "
      },
      {
        "Title": "Implementation: Session tokens for specific host ",
        "Description": "Implementation: Session tokens for specific host "
      },
      {
        "Title": "Implementation: Patching software",
        "Description": "Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. "
      }
    ]
  },
  {
    "Id": "CAPEC-87",
    "Description": "An attacker employs forceful browsing to access portions of a website that are otherwise unreachable through direct URL entry. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Bypass Protection Mechanism"
      }
    ],
    "Mitigations": [
      {
        "Title": "Authenticate request to every resource",
        "Description": "Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context. "
      },
      {
        "Title": "Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources",
        "Description": "Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context. "
      }
    ]
  },
  {
    "Id": "CAPEC-88",
    "Description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain PrivilegesBypass Protection Mechanism"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use language APIs rather than relying on passing data to the operating system shell or command line",
        "Description": "Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable. "
      },
      {
        "Title": "Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands ",
        "Description": "Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands "
      },
      {
        "Title": "All application processes should be run with the minimal privileges required",
        "Description": "All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them. "
      }
    ]
  },
  {
    "Id": "CAPEC-89",
    "Description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "All sensitive information must be handled over a secure connection",
        "Description": "All sensitive information must be handled over a secure connection. "
      },
      {
        "Title": "Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested",
        "Description": "Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested. "
      },
      {
        "Title": "End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority",
        "Description": "End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority. "
      }
    ]
  },
  {
    "Id": "CAPEC-9",
    "Description": "This attack targets command-line utilities available in a number of shells. An attacker can leverage a vulnerability found in a command-line utility to escalate privilege to root. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Carefully review the service's implementation before making it available to user",
        "Description": "Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow. "
      },
      {
        "Title": "Use a language or compiler that performs automatic bounds checking",
        "Description": "Use a language or compiler that performs automatic bounds checking. "
      },
      {
        "Title": "Use an abstraction library to abstract away risky APIs",
        "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution. "
      },
      {
        "Title": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag",
        "Description": "Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution. "
      },
      {
        "Title": "Operational: Use OS-level preventative functionality",
        "Description": "Operational: Use OS-level preventative functionality. Not a complete solution. "
      },
      {
        "Title": "Apply the latest patches to your user exposed services",
        "Description": "Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack. "
      },
      {
        "Title": "Do not unnecessarily expose services",
        "Description": "Do not unnecessarily expose services. "
      }
    ]
  },
  {
    "Id": "CAPEC-90",
    "Description": "An attacker can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the attacker illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An attacker can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain PrivilegesBypass Protection Mechanism"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "The server must initiate the handshake by issuing the challenge",
        "Description": "The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further "
      },
      {
        "Title": "The use of HMAC to hash the response from the server can also be used to thwart reflection",
        "Description": "The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values. "
      },
      {
        "Title": "Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol ",
        "Description": "Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol "
      }
    ]
  },
  {
    "Id": "CAPEC-92",
    "Description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "ConfidentialityIntegrityAvailability",
        "Likelihood": "",
        "Impact": "Execute Unauthorized Commands"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      },
      {
        "Scope": "Availability",
        "Likelihood": "",
        "Impact": "Unreliable Execution"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use a language or compiler that performs automatic bounds checking",
        "Description": "Use a language or compiler that performs automatic bounds checking. "
      },
      {
        "Title": "Carefully review the service's implementation before making it available to user",
        "Description": "Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow. "
      },
      {
        "Title": "Use an abstraction library to abstract away risky APIs",
        "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution. "
      },
      {
        "Title": "Always do bound checking before consuming user input data",
        "Description": "Always do bound checking before consuming user input data. "
      },
      {
        "Title": "",
        "Description": ""
      }
    ]
  },
  {
    "Id": "CAPEC-93",
    "Description": "This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing them to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Carefully control access to physical log files",
        "Description": "Carefully control access to physical log files. "
      },
      {
        "Title": "Do not allow tainted data to be written in the log file without prior input validation",
        "Description": "Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data. "
      },
      {
        "Title": "Use synchronization to control the flow of execution",
        "Description": "Use synchronization to control the flow of execution. "
      },
      {
        "Title": "Use static analysis tools to identify log forging vulnerabilities",
        "Description": "Use static analysis tools to identify log forging vulnerabilities. "
      },
      {
        "Title": "Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells",
        "Description": "Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells. "
      }
    ]
  },
  {
    "Id": "CAPEC-94",
    "Description": "This type of attack targets the communication between two components (typically client and server). The attacker places themself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed on to the other component as if it was never observed. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identify between two components. MITM attacks differ from sniffing attacks since they often modify the communications prior to delivering it to the intended recipient. These attacks also differ from interception attacks since they may forward the sender's original unmodified data, after copying it, instead of keeping it for themselves. ",
    "Likelihood": "High",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Integrity",
        "Likelihood": "",
        "Impact": "Modify Data"
      },
      {
        "Scope": "ConfidentialityAccess ControlAuthorization",
        "Likelihood": "",
        "Impact": "Gain Privileges"
      },
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Get your Public Key signed by a Certificate Authority ",
        "Description": "Get your Public Key signed by a Certificate Authority "
      },
      {
        "Title": "Encrypt your communication using cryptography (SSL,",
        "Description": "Encrypt your communication using cryptography (SSL,...) "
      },
      {
        "Title": "Use Strong mutual authentication to always fully authenticate both ends of any communications channel",
        "Description": "Use Strong mutual authentication to always fully authenticate both ends of any communications channel. "
      },
      {
        "Title": "Exchange public keys using a secure channel ",
        "Description": "Exchange public keys using a secure channel "
      }
    ]
  },
  {
    "Id": "CAPEC-95",
    "Description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files. ",
    "Likelihood": "High",
    "Impact": "High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "It is important to protect WSDL file or provide limited access to it",
        "Description": "It is important to protect WSDL file or provide limited access to it. "
      },
      {
        "Title": "Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it)",
        "Description": "Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection. "
      },
      {
        "Title": "Ensure the WSDL does not expose functions and APIs that were not intended to be exposed",
        "Description": "Ensure the WSDL does not expose functions and APIs that were not intended to be exposed. "
      },
      {
        "Title": "Pay attention to the function naming convention (within the WSDL interface)",
        "Description": "Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack. "
      },
      {
        "Title": "Validate the received messages against the WSDL Schema",
        "Description": "Validate the received messages against the WSDL Schema. Incomplete solution. "
      }
    ]
  },
  {
    "Id": "CAPEC-97",
    "Description": "Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits). ",
    "Likelihood": "Low",
    "Impact": "Very High",
    "Consequences": [
      {
        "Scope": "Confidentiality",
        "Likelihood": "",
        "Impact": "Read Data"
      }
    ],
    "Mitigations": [
      {
        "Title": "Use proven cryptographic algorithms with recommended key sizes",
        "Description": "Use proven cryptographic algorithms with recommended key sizes. "
      },
      {
        "Title": "Ensure that the algorithms are used properly",
        "Description": "Ensure that the algorithms are used properly. That means: 1. Not rolling out your own crypto; Use proven algorithms and implementations. 2. Choosing initialization vectors with sufficiently random numbers 3. Generating key material using good sources of randomness and avoiding known weak keys 4. Using proven protocols and their implementations. 5. Picking the most appropriate cryptographic algorithm for your usage context and data "
      }
    ]
  },
  {
    "Id": "CAPEC-124",
    "Description": "An adversary exploits a resource shared between multiple applications, an application pool or hardware pin multiplexing to affect behavior. Resources may be shared between multiple applications or between multiple threads of a single application. Resource sharing is usually accomplished through mutual access to a single memory location or multiplexed hardware pins. If an adversary can manipulate this shared resource (usually by co-opting one of the applications or threads) the other applications or threads using the shared resource will often continue to trust the validity of the compromised shared resource and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared resource, or even cause a crash or compromise of the sharing applications. ",
    "Likelihood": null,
    "Impact": "Medium",
    "Consequences": null,
    "Mitigations": null
  },
  {
    "Id": "CAPEC-189",
    "Description": "An attacker discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. ",
    "Likelihood": null,
    "Impact": "Low",
    "Consequences": null,
    "Mitigations": null
  }
]